import{_ as n,c as a,f as e,o as t}from"./app-BCC5ysrj.js";const p={};function o(i,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="zip-函数" tabindex="-1"><a class="header-anchor" href="#zip-函数"><span>zip()函数</span></a></h1><h2 id="zip-函数和" tabindex="-1"><a class="header-anchor" href="#zip-函数和"><span>zip()函数和*</span></a></h2><p><code>zip(*strs)</code> 是 Python 中一个非常有用的功能，特别是在处理多个序列时。在这里，<code>zip</code> 函数和 <code>*</code> 运算符（解包运算符）结合使用，用于同时迭代多个序列（在你的例子中是字符串列表 <code>strs</code> 中的字符串）。让我逐步解释这个表达式的含义和工作原理：</p><h3 id="zip-函数-1" tabindex="-1"><a class="header-anchor" href="#zip-函数-1"><span><code>zip</code> 函数</span></a></h3><p>首先，<code>zip</code> 是一个内置函数，它接受多个可迭代对象（如列表、元组、字符串等）作为参数，并返回一个迭代器，这个迭代器生成由输入可迭代对象中元素组成的元组。举个例子：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span></span>
<span class="line">zipped <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>zipped<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 [(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>zip</code> 将列表 <code>a</code> 和 <code>b</code> 中的相应元素配对。</p><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span><code>*</code> 运算符</span></a></h3><p><code>*</code> 运算符在这里用作解包运算符。它将 <code>strs</code> 列表中的每个元素（即每个字符串）解包为独立的参数传递给 <code>zip</code> 函数。</p><p>例如，假设 <code>strs = [&quot;flower&quot;, &quot;flow&quot;, &quot;flight&quot;]</code>。当执行 <code>zip(*strs)</code> 时，实际上是执行 <code>zip(&quot;flower&quot;, &quot;flow&quot;, &quot;flight&quot;)</code>。</p><h3 id="zip-strs" tabindex="-1"><a class="header-anchor" href="#zip-strs"><span><code>zip(*strs)</code></span></a></h3><p>当 <code>zip</code> 函数与 <code>*strs</code> 结合使用时，它实际上是在并行地遍历 <code>strs</code> 中的每个字符串。<code>zip</code> 会从每个字符串的相同位置取出字符，并将它们组合成一个元组。</p><p>以 <code>strs = [&quot;flower&quot;, &quot;flow&quot;, &quot;flight&quot;]</code> 为例，<code>zip(*strs)</code> 的操作过程是：</p><ol><li>从所有字符串的第一个字符中创建元组：<code>(&#39;f&#39;, &#39;f&#39;, &#39;f&#39;)</code></li><li>从所有字符串的第二个字符中创建元组：<code>(&#39;l&#39;, &#39;l&#39;, &#39;l&#39;)</code></li><li>以此类推，直到最短的字符串结束。</li></ol><p>所以，如果你打印 <code>zip(*strs)</code> 的结果，你会得到一个包含上述元组的迭代器。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;flower&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;flow&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;flight&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 [(&#39;f&#39;, &#39;f&#39;, &#39;f&#39;), (&#39;l&#39;, &#39;l&#39;, &#39;l&#39;), (&#39;o&#39;, &#39;o&#39;, &#39;i&#39;), (&#39;w&#39;, &#39;w&#39;, &#39;g&#39;)]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个特性在处理多个序列时非常有用，特别是当你需要对它们的相应元素执行某些操作时。例如，在寻找多个字符串的最长公共前缀问题中，<code>zip(*strs)</code> 可以用来比较所有字符串的每个对应位置的字符。</p>`,17)]))}const l=n(p,[["render",o],["__file","function-zip.html.vue"]]),d=JSON.parse('{"path":"/fpython/library/function/function-zip.html","title":"zip()函数","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"zip()函数和*","slug":"zip-函数和","link":"#zip-函数和","children":[{"level":3,"title":"zip 函数","slug":"zip-函数-1","link":"#zip-函数-1","children":[]},{"level":3,"title":"* 运算符","slug":"运算符","link":"#运算符","children":[]},{"level":3,"title":"zip(*strs)","slug":"zip-strs","link":"#zip-strs","children":[]}]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/library/function/function-zip.md"}');export{l as comp,d as data};
