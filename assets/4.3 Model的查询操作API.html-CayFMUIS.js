import{_ as s,c as a,f as e,o as t}from"./app-BCC5ysrj.js";const l={};function p(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_4-3-model的查询操作api" tabindex="-1"><a class="header-anchor" href="#_4-3-model的查询操作api"><span>4.3 Model的查询操作API</span></a></h1><ul><li><a href="#43-model%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9Capi">4.3 Model的查询操作API</a><ul><li><a href="#431-%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B">4.3.1 创建实例</a><ul><li><a href="#save%E6%96%B9%E6%B3%95%E5%88%9B%E5%BB%BAmodel%E5%AE%9E%E4%BE%8B">save方法创建Model实例</a></li><li><a href="#create%E6%96%B9%E6%B3%95%E5%88%9B%E5%BB%BAmodel%E5%AE%9E%E4%BE%8B">create方法创建Model实例</a></li></ul></li><li><a href="#432-%E8%BF%94%E5%9B%9E%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95">4.3.2 返回单实例的查询方法</a></li><li><a href="#433-%E8%BF%94%E5%9B%9Equeryset%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95">4.3.3 返回QuerySet的查询方法</a><ul><li><a href="#values%E6%96%B9%E6%B3%95%E8%8E%B7%E5%8F%96%E5%AD%97%E5%85%B8%E7%BB%93%E6%9E%9C">values()方法获取字典结果</a></li><li><a href="#values_list%E6%96%B9%E6%B3%95%E8%8E%B7%E5%8F%96%E5%85%83%E7%BB%84%E7%BB%93%E6%9E%9C">values_list()方法获取元组结果</a></li><li><a href="#%E5%AF%B9queryset%E8%BF%9B%E8%A1%8C%E5%88%87%E7%89%87">对QuerySet进行切片</a></li></ul></li><li><a href="#434-%E8%BF%94%E5%9B%9Erawqueryset%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95">4.3.4 返回RawQuerySet的查询方法</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%9A%84sql%E6%9F%A5%E8%AF%A2">简单的SQL查询</a></li><li><a href="#%E4%B8%8D%E8%A6%81%E6%8B%BC%E6%8E%A5sql%E8%AF%AD%E5%8F%A5">不要拼接SQL语句</a></li><li><a href="#rawqueryset%E6%94%AF%E6%8C%81%E7%B4%A2%E5%BC%95%E5%92%8C%E5%88%87%E7%89%87">RawQuerySet支持索引和切片</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li><li><a href="#435-%E8%BF%94%E5%9B%9E%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%96%B9%E6%B3%95">4.3.5 返回其他类型的查询方法</a><ul><li><a href="#%E8%BF%94%E5%9B%9Equeryset%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%95%B0%E9%87%8Fcount">返回QuerySet的对象数量：<code>count()</code></a></li><li><a href="#%E5%88%A4%E6%96%ADqueryset%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E5%AF%B9%E8%B1%A1exists">判断QuerySet是否包含对象：<code>exists()</code></a></li><li><a href="#update%E6%96%B9%E6%B3%95%E6%9B%B4%E6%96%B0model%E5%AE%9E%E4%BE%8B"><code>update()</code>方法更新Model实例</a></li><li><a href="#delete%E6%96%B9%E6%B3%95%E5%88%A0%E9%99%A4model%E5%AE%9E%E4%BE%8B"><code>delete()</code>方法删除Model实例</a></li></ul></li><li><a href="#436-%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E7%9A%84%E6%9F%A5%E8%AF%A2">4.3.6 关联关系的查询</a><ul><li><a href="#model%E7%9A%84%E5%8F%8D%E5%90%91%E6%9F%A5%E8%AF%A2">Model的反向查询</a></li><li><a href="#%E8%B7%A8%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E6%9F%A5%E8%AF%A2">跨关联关系查询</a></li><li><a href="#%E8%B7%A8%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E5%A4%9A%E5%80%BC%E6%9F%A5%E8%AF%A2">跨关联关系多值查询</a></li></ul></li><li><a href="#437-f%E5%AF%B9%E8%B1%A1%E5%92%8Cq%E5%AF%B9%E8%B1%A1%E6%9F%A5%E8%AF%A2">4.3.7 F对象和Q对象查询</a></li><li><a href="#438-%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2%E5%92%8C%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2">4.3.8 聚合查询和分组查询</a><ul><li><a href="#1-%E8%81%9A%E5%90%88%E6%9F%A5%E8%A9%A2">1. 聚合查詢</a></li></ul></li></ul></li></ul><hr><ul><li>应用中创建的每一个Model类，Django都会自动添加一个名称为objects的Manager对象</li><li>它是Model与数据库实现交互的入口，也被称作查询管理器</li></ul><hr><h2 id="_4-3-1-创建实例" tabindex="-1"><a class="header-anchor" href="#_4-3-1-创建实例"><span>4.3.1 创建实例</span></a></h2><h3 id="save方法创建model实例" tabindex="-1"><a class="header-anchor" href="#save方法创建model实例"><span>save方法创建Model实例</span></a></h3><p>使用<code>save</code>方法可以创建并保存一个Model实例到数据库中。例如，如果我们有一个名为<code>Book</code>的Model，我们可以使用以下代码创建并保存一个新的<code>Book</code>实例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">book <span class="token operator">=</span> Book<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;新书&#39;</span><span class="token punctuation">,</span> author<span class="token operator">=</span><span class="token string">&#39;作者&#39;</span><span class="token punctuation">)</span></span>
<span class="line">book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将创建一个新的<code>Book</code>实例，并将其保存到数据库中。</p><h3 id="create方法创建model实例" tabindex="-1"><a class="header-anchor" href="#create方法创建model实例"><span>create方法创建Model实例</span></a></h3><p><code>create</code>方法是另一种创建Model实例的方式。它可以直接创建并保存一个实例，而不需要先创建实例然后再调用<code>save</code>方法。例如：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;新书&#39;</span><span class="token punctuation">,</span> author<span class="token operator">=</span><span class="token string">&#39;作者&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将直接创建并保存一个新的<code>Book</code>实例到数据库中。</p><p>需要注意的是，<code>create</code>方法返回的是一个已经保存到数据库的实例对象，而不是一个未保存的实例对象。</p><h2 id="_4-3-2-返回单实例的查询方法" tabindex="-1"><a class="header-anchor" href="#_4-3-2-返回单实例的查询方法"><span>4.3.2 返回单实例的查询方法</span></a></h2><p>Django在查询的时候支持使用pk代替主键名称</p><ul><li><p>查询实例的接口通常返回三种类型</p><ul><li>单实例</li><li>QuerySet</li><li>RawQuerySet</li></ul></li><li><p>查询单实例</p><ul><li>get() <ul><li>会抛出两类异常</li><li>DoesNotExist: 给定的查询条件找不到对应的数据记录</li><li>MultipleObjectsReturned: 给定的查询条件匹配了多条数据记录</li></ul></li><li>get_or_create(): 实例不存在会创建新的实例对象</li></ul></li><li><p>get()查询</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;first topic&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 优化</span></span>
<span class="line"><span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">    topic <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;first topic&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">except</span> Topic<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"><span class="token keyword">except</span> Topic<span class="token punctuation">.</span>MultipleObjectsReturned<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># pk</span></span>
<span class="line">primary_obj <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>get_or_create()查询</p><ul><li>此方法返回一个：tuple对象（object,created）。第一个元素是实例对象，第二个元素是布尔值 <code>Topic.objects.get_or_create(id=1,title=&#39;first topic&#39;)</code></li><li>如果查询条件能够匹配多条记录，也会抛出<code>MultipleObjectsReturned</code>异常</li></ul></li></ul><h2 id="_4-3-3-返回queryset的查询方法" tabindex="-1"><a class="header-anchor" href="#_4-3-3-返回queryset的查询方法"><span>4.3.3 返回QuerySet的查询方法</span></a></h2><ul><li>返回多条数据记录时，需要使用QuerySet对象</li><li>可以简单理解为Model集合，可以包含一个，多个或者零个Model实例</li><li>返回QuerySet对象的常用接口 <ul><li>all：获取所有的数据记录</li><li>filter：按照查询条件过滤数据记录；在数据库中实现WHERE的功能 <img src="https://oss.moniter.top/blog/202206/20220629175751.png" alt="filter"><ul><li>对于contains、startswith、endswith关键字，也都有对应的忽略大小写的查询版本，只需要在关键字之前加上字母<code>i</code>就可以了，例如<code>icontains</code></li></ul></li><li>exclude：反向过滤：与filter方法实现的功能是很类似的，只是用一个布尔值标记自己是正向过滤（filter）还是反向过滤（exclude） <ul><li>exclude方法相当于在filter方法的前面加上一个NOT，即过滤出来的结果是不满足给定条件的数据记录</li></ul></li><li>reverse：获取逆序数据记录</li><li>order_by：获取自定义排序规则</li></ul></li></ul><blockquote><p>Topic<br> 小技巧：使用<code>print(Topic.objects.all().query)</code>可以打印QuerySet的query属性查看生成的SQL语句</p></blockquote><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># all</span></span>
<span class="line">Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">topic_qs <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将语句赋值给一个变量时不会去访问数据库的，（惰性求值）</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">)</span>  <span class="token comment"># 打印QuerySet的query属性查看生成的SQL语句</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># reverse</span></span>
<span class="line">Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># order_by</span></span>
<span class="line">Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&#39;-title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;created_time&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># filter</span></span>
<span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>up_get<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>  <span class="token comment"># up字段与gte关键字使用的连接符是双下画线,up字段与gte关键字使用的连接符是双下画线</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">## filter_exect是比较特殊的</span></span>
<span class="line"><span class="token comment"># 当查询字段没有指定查询关键字，默认就是exact，下面的两条语句是等效的</span></span>
<span class="line">Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span></span>
<span class="line">Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>title_exect<span class="token operator">=</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># exclude：相当于在filter方法的前面加上一个NOT</span></span>
<span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>exclude<span class="token punctuation">(</span>up_lt<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">)</span>  <span class="token comment"># 过滤up不小于29的Comment对象；lt(小于)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Topic<br> filter和exclude方法返回的是一个QuerySet，所以，在它们获得的结果后面还可以继续调用filter exclude等方法，来形成链式查询</p></blockquote><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 优化后的链式查询</span></span>
<span class="line"><span class="token comment"># 需要content中包含good、down不大于20且up大于20的Comment对象，可以使用链式查询</span></span>
<span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>content__icontains<span class="token operator">=</span><span class="token string">&#39;good&#39;</span><span class="token punctuation">,</span> down__lte<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> up__gt<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 优化后的排序查询</span></span>
<span class="line"><span class="token comment"># 下面的查询会按照created_time正序排列</span></span>
<span class="line">Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">&#39;created_time&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 可以通过print() 方法查看对应的SQL语句</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="values-方法获取字典结果" tabindex="-1"><a class="header-anchor" href="#values-方法获取字典结果"><span>values()方法获取字典结果</span></a></h3><ul><li><p>values方法返回的是一个QuerySet，与all, filter的区别在于</p><ul><li>all, filter：通过迭代获取Model的实例对象</li><li>values：返回字典，字典中的键对应Model的字段名</li></ul></li><li><p>给values方法传递参数，限制SELECT的查询范围，没有指定，会查询Model的所有字段</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 只查询Comment表的id和up字段</span></span>
<span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;up&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="values-list-方法获取元组结果" tabindex="-1"><a class="header-anchor" href="#values-list-方法获取元组结果"><span>values_list()方法获取元组结果</span></a></h3><ul><li><p>获取到的结果是元组，不是字典</p></li><li><p>会按照传递的字段名限制SELECT的查询范围</p></li><li><p>当只传递一个参数，可以配合flat参数。</p><ul><li><code>flat=True</code>: 迭代返回结果得到的将是字段值</li><li>默认<code>False</code>: 结果是只有单个元素的元组</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>values_list<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;up&#39;</span><span class="token punctuation">)</span></span>
<span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>values_list<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>flat<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="对queryset进行切片" tabindex="-1"><a class="header-anchor" href="#对queryset进行切片"><span>对QuerySet进行切片</span></a></h3><ul><li><p>在SQL上表现为LIMIT和OFFSET</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><blockquote><p>注意</p><ul><li>QuerySet不支持从末尾切片，即索引值不能为负数</li><li>一个QuerySet执行切片操作会返回另一个QuerySet，不会触发数据库的查询</li><li>但使用step切片语法，则会触发数据库查询，并返回Model实例列表 <ul><li>如<code>Comment.objects.all()[1:3:2]</code></li></ul></li><li>切片后返回的QuerySet不能在执行过滤或者排序操作</li></ul><p>Topic: Manager而言，all filter exculde等常用的方法会返回QuerySet外，一些不常用的方法也会返回QuerySet，如：distinct，only，defer等方法</p></blockquote><h2 id="_4-3-4-返回rawqueryset的查询方法" tabindex="-1"><a class="header-anchor" href="#_4-3-4-返回rawqueryset的查询方法"><span>4.3.4 返回RawQuerySet的查询方法</span></a></h2><p>复杂的查询：ORM的表达能力会存在局限性，需要使用SQL语句实现查询</p><ul><li>Manager提供了：<code>raw()</code>方法允许使用SQL语句实现对Model的查询</li><li><code>raw()</code>返回的是一个RawQuerySet对象，可以迭代得到Model实例对象</li><li>RawQuerySet不能在此基础上执行<code>filter</code> <code>exclude</code>等方法</li></ul><h3 id="简单的sql查询" tabindex="-1"><a class="header-anchor" href="#简单的sql查询"><span>简单的SQL查询</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">for</span> comment <span class="token keyword">in</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">&#39;SELECT * FROM post_comment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d:%s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>comment<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：Django不会对传递给raw方法的SQL语句进行检查。Django期望它会从数据库中返回一组行数据，但是并不做强制要求。如果查询的结果不是行数据，则会产生一个错误</p></blockquote><h3 id="不要拼接sql语句" tabindex="-1"><a class="header-anchor" href="#不要拼接sql语句"><span>不要拼接SQL语句</span></a></h3><ul><li><p>不要手动填充SQL字符串，因为此方式会存在SQL注入攻击的风险</p></li><li><p>raw()方法提供了<code>params</code>参数解决SQL注入的风险</p></li><li><p>例子</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 对于参数化查询的SQL来说，只需要在语句中加上%s或者%(key)s之类的占位符</span></span>
<span class="line"><span class="token keyword">for</span> topic <span class="token keyword">in</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">&#39;SELECT id FROM post_topic WHERE title = %s&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;first_topic&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d:%s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>topic<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>topic<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>raw() 接受的是一个：<strong>列表或者字典</strong>的参数，将SQL语句中的占位符进行替换，完成查询</p></li><li><p>上面的代码中获取的是id这个字段，但是仍可以获取title字段</p></li></ul><h3 id="rawqueryset支持索引和切片" tabindex="-1"><a class="header-anchor" href="#rawqueryset支持索引和切片"><span>RawQuerySet支持索引和切片</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">&#39;SELECT ** FROM post_comment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">&#39;SELECT ** FROM post_comment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>raw SQL的查询方法是比较少用到的，一般还是使用常规的ORM模型进行查询</p><h2 id="_4-3-5-返回其他类型的查询方法" tabindex="-1"><a class="header-anchor" href="#_4-3-5-返回其他类型的查询方法"><span>4.3.5 返回其他类型的查询方法</span></a></h2><h3 id="返回queryset的对象数量-count" tabindex="-1"><a class="header-anchor" href="#返回queryset的对象数量-count"><span>返回QuerySet的对象数量：<code>count()</code></span></a></h3><ul><li>通过 all filter exclude方法得到QuerySet对象后，可以通过<code>len()</code>方法对象的数量 <ul><li><code>len(Comment.objects.filter(id_gt=1))</code></li><li>通过<code>len()</code>方法的效率比较低效</li></ul></li><li><strong>QuerySet提供的是<code>count()</code>方法</strong><ul><li><code>Comment.objects.filter(id_get=1).count()</code></li><li><code>count()</code>方法会在SQL上执行<code>SELECT COUNT(*)</code>操作并返回数字类型</li></ul></li></ul><h3 id="判断queryset是否包含对象-exists" tabindex="-1"><a class="header-anchor" href="#判断queryset是否包含对象-exists"><span>判断QuerySet是否包含对象：<code>exists()</code></span></a></h3><ul><li>根据当前给定的条件返回是否存在匹配实例对象的布尔结果</li><li>方法1：判断count方法的返回值是否为0</li><li>方法2：使用<code>exists()</code>方法 <strong>推荐</strong><ul><li>包含返回：True，否则为：False</li><li>在SQL中表现为<code>LIMIT 1</code></li><li><code>Comment.objects.filter(id_get=1).exists()</code></li></ul></li></ul><h3 id="update-方法更新model实例" tabindex="-1"><a class="header-anchor" href="#update-方法更新model实例"><span><code>update()</code>方法更新Model实例</span></a></h3><ul><li><p>更新实例的方法</p></li><li><p>方法1：<code>save()</code>方法: 即先查询出Model对象，之后更新字段值</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">comment <span class="token operator">=</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">comment<span class="token punctuation">.</span>up<span class="token operator">=</span><span class="token number">90</span></span>
<span class="line">comment<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意的是，虽然只是给up字段重新设定了值，但是save执行会更新Comment表的所有列</p></blockquote></li><li><p>方法2：<code>update()</code>方法：更新特定的列</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>up<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">,</span>down<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>注意：update方法可以一次性更新多个对象，并返回一个整数，标识受影响的记录条数</p></blockquote></li></ul><h3 id="delete-方法删除model实例" tabindex="-1"><a class="header-anchor" href="#delete-方法删除model实例"><span><code>delete()</code>方法删除Model实例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 删除id=1的Comment实例</span></span>
<span class="line">comment <span class="token operator">=</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">comment<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 删除id=2的实例</span></span>
<span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>delete方法返回一个二元组：第一个元素标识删除的实例个数，第二个元素是字典类型，记录每一个Model类型删除的实例个数</p></blockquote><h2 id="_4-3-6-关联关系的查询" tabindex="-1"><a class="header-anchor" href="#_4-3-6-关联关系的查询"><span>4.3.6 关联关系的查询</span></a></h2><h3 id="model的反向查询" tabindex="-1"><a class="header-anchor" href="#model的反向查询"><span>Model的反向查询</span></a></h3><ul><li><p>Django中的每一种关联关系都可以实现反向查询</p></li><li><p>默认情况下，管理器的名称为“小写模型名_set”，对于Topic而言就是comment_set。之前介绍过可以通过related_name参数覆盖，但是通常不需要这样做</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 通过comment_set实现反向查询</span></span>
<span class="line">topic <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">topic<span class="token punctuation">.</span>comment_set<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 反向查询</span></span>
<span class="line">topic<span class="token punctuation">.</span>comment_set<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>content<span class="token operator">=</span><span class="token string">&#39;very good!&#39;</span><span class="token punctuation">)</span></span>
<span class="line">topic<span class="token punctuation">.</span>comment_set<span class="token punctuation">.</span>exclude<span class="token punctuation">(</span>content_contains<span class="token operator">=</span><span class="token string">&#39;good&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>ManyToManyField和OneToOneField关系类型也可以实现类似的反向查询</p></li></ul><blockquote><p>注意：OneToOneField类型的反向查询比较特殊。它的管理器代表的是一个单一的对象，而不是对象集合，且名称变成了小写的Model名</p></blockquote><ul><li><p>对于OneToOneField的反向查询</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 例如之前定义的CustomUser，它的user字段与Django的User存在OneToOneField的关系，那么，User可以这样实现反向查询</span></span>
<span class="line"><span class="token comment"># 如果没有CustomUser对象与User关联，那么，上面的查询将会抛出RelatedObjectDoesNotExist异常</span></span>
<span class="line">user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;admin&#39;</span><span class="token punctuation">)</span></span>
<span class="line">user<span class="token punctuation">.</span>customuser</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="跨关联关系查询" tabindex="-1"><a class="header-anchor" href="#跨关联关系查询"><span>跨关联关系查询</span></a></h3><ul><li>跨关联查询：只需要使用<strong>双下画线</strong>与<strong>关联Model的字段名称</strong>组合在一起，并给出合适的条件就可以完成查询 <ul><li><code>Comment.objects.filter(topic_title_contains=&#39;first&#39;)</code>: 查询所有Topic的title字段包含first的Comment对象</li><li><code>Comment.objects.filter(topic_user_username=&#39;first&#39;)</code></li></ul></li><li>支持反向的关联查询，只需要使用关联Model的小写名称即可 <ul><li><code>Topic.objects.filter(comment_up_gte=30)</code>: 查询所有Comment的up值大于等于30的Topic对象</li></ul></li></ul><h3 id="跨关联关系多值查询" tabindex="-1"><a class="header-anchor" href="#跨关联关系多值查询"><span>跨关联关系多值查询</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">topic <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>content<span class="token operator">=</span><span class="token string">&#39;general&#39;</span><span class="token punctuation">,</span> up<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> down<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>topic<span class="token operator">=</span>topic<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第一个查询: 对应的是Comment中的content字段值包含very且up字段值小于等于60的所有的Topic对象</span></span>
<span class="line">Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>comment_content_contains<span class="token operator">=</span><span class="token string">&#39;very&#39;</span><span class="token punctuation">,</span> comment_up_lte<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 第二个查询</span></span>
<span class="line">Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>comment_content_contains<span class="token operator">=</span><span class="token string">&#39;very&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>comment_up_lte<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-3-7-f对象和q对象查询" tabindex="-1"><a class="header-anchor" href="#_4-3-7-f对象和q对象查询"><span>4.3.7 F对象和Q对象查询</span></a></h2><h2 id="_4-3-8-聚合查询和分组查询" tabindex="-1"><a class="header-anchor" href="#_4-3-8-聚合查询和分组查询"><span>4.3.8 聚合查询和分组查询</span></a></h2><p>聚合和分组都是用来生成统计值的过程：聚合是指对QuerySet整体（可以理解为Model对象的集合）生成一个统计值；分组是为QuerySet中每一个对象都生成一个统计值。</p><h3 id="_1-聚合查詢" tabindex="-1"><a class="header-anchor" href="#_1-聚合查詢"><span>1. 聚合查詢</span></a></h3><p>对QuerySet计算统计值，需要使用aggregate方法，提供的参数可以是一个或多个聚合函数。aggregate是QuerySet的一个终止子句，它返回的是字典类型，键是聚合的标识，值是聚合的结果。Django提供了一系列的聚合函数，其中Avg（平均值）、Count（计数）、Max（最大值）、Min（最小值）、Sum（加和）最为常用。要使用这些聚合函数，需要将它们引入当前的环境中</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models <span class="token keyword">import</span> Avg<span class="token punctuation">,</span> Max<span class="token punctuation">,</span> Min<span class="token punctuation">,</span> Sum<span class="token punctuation">,</span> Count</span>
<span class="line"></span>
<span class="line"><span class="token comment"># For Example</span></span>
<span class="line">Comment<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>topic<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>Sum<span class="token punctuation">(</span><span class="token string">&#39;up&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,68)]))}const c=s(l,[["render",p],["__file","4.3 Model的查询操作API.html.vue"]]),u=JSON.parse('{"path":"/fpython/htmlsystem/Django/chapter-04%EF%BC%9AORM%E5%BA%94%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/4.3%20Model%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9CAPI.html","title":"4.3 Model的查询操作API","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"4.3.1 创建实例","slug":"_4-3-1-创建实例","link":"#_4-3-1-创建实例","children":[{"level":3,"title":"save方法创建Model实例","slug":"save方法创建model实例","link":"#save方法创建model实例","children":[]},{"level":3,"title":"create方法创建Model实例","slug":"create方法创建model实例","link":"#create方法创建model实例","children":[]}]},{"level":2,"title":"4.3.2 返回单实例的查询方法","slug":"_4-3-2-返回单实例的查询方法","link":"#_4-3-2-返回单实例的查询方法","children":[]},{"level":2,"title":"4.3.3 返回QuerySet的查询方法","slug":"_4-3-3-返回queryset的查询方法","link":"#_4-3-3-返回queryset的查询方法","children":[{"level":3,"title":"values()方法获取字典结果","slug":"values-方法获取字典结果","link":"#values-方法获取字典结果","children":[]},{"level":3,"title":"values_list()方法获取元组结果","slug":"values-list-方法获取元组结果","link":"#values-list-方法获取元组结果","children":[]},{"level":3,"title":"对QuerySet进行切片","slug":"对queryset进行切片","link":"#对queryset进行切片","children":[]}]},{"level":2,"title":"4.3.4 返回RawQuerySet的查询方法","slug":"_4-3-4-返回rawqueryset的查询方法","link":"#_4-3-4-返回rawqueryset的查询方法","children":[{"level":3,"title":"简单的SQL查询","slug":"简单的sql查询","link":"#简单的sql查询","children":[]},{"level":3,"title":"不要拼接SQL语句","slug":"不要拼接sql语句","link":"#不要拼接sql语句","children":[]},{"level":3,"title":"RawQuerySet支持索引和切片","slug":"rawqueryset支持索引和切片","link":"#rawqueryset支持索引和切片","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"4.3.5 返回其他类型的查询方法","slug":"_4-3-5-返回其他类型的查询方法","link":"#_4-3-5-返回其他类型的查询方法","children":[{"level":3,"title":"返回QuerySet的对象数量：count()","slug":"返回queryset的对象数量-count","link":"#返回queryset的对象数量-count","children":[]},{"level":3,"title":"判断QuerySet是否包含对象：exists()","slug":"判断queryset是否包含对象-exists","link":"#判断queryset是否包含对象-exists","children":[]},{"level":3,"title":"update()方法更新Model实例","slug":"update-方法更新model实例","link":"#update-方法更新model实例","children":[]},{"level":3,"title":"delete()方法删除Model实例","slug":"delete-方法删除model实例","link":"#delete-方法删除model实例","children":[]}]},{"level":2,"title":"4.3.6 关联关系的查询","slug":"_4-3-6-关联关系的查询","link":"#_4-3-6-关联关系的查询","children":[{"level":3,"title":"Model的反向查询","slug":"model的反向查询","link":"#model的反向查询","children":[]},{"level":3,"title":"跨关联关系查询","slug":"跨关联关系查询","link":"#跨关联关系查询","children":[]},{"level":3,"title":"跨关联关系多值查询","slug":"跨关联关系多值查询","link":"#跨关联关系多值查询","children":[]}]},{"level":2,"title":"4.3.7 F对象和Q对象查询","slug":"_4-3-7-f对象和q对象查询","link":"#_4-3-7-f对象和q对象查询","children":[]},{"level":2,"title":"4.3.8 聚合查询和分组查询","slug":"_4-3-8-聚合查询和分组查询","link":"#_4-3-8-聚合查询和分组查询","children":[{"level":3,"title":"1. 聚合查詢","slug":"_1-聚合查詢","link":"#_1-聚合查詢","children":[]}]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":4}]},"filePathRelative":"fpython/htmlsystem/Django/chapter-04：ORM应用与原理剖析/4.3 Model的查询操作API.md"}');export{c as comp,u as data};
