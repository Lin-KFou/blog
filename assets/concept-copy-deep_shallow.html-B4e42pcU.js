import{_ as p,c as i,a as n,d as e,e as t,f as o,r as c,o as r,b as l}from"./app-BCC5ysrj.js";const d={},u={class:"vuepress-toc"},k={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"};function w(x,s){const a=c("router-link");return r(),i("div",null,[s[9]||(s[9]=n("h1",{id:"深拷贝与浅拷贝",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#深拷贝与浅拷贝"},[n("span",null,"深拷贝与浅拷贝")])],-1)),n("nav",u,[n("ul",null,[n("li",k,[e(a,{to:"#浅拷贝"},{default:t(()=>s[0]||(s[0]=[l("浅拷贝")])),_:1}),n("ul",null,[n("li",h,[e(a,{to:"#用法"},{default:t(()=>s[1]||(s[1]=[l("用法")])),_:1})]),n("li",m,[e(a,{to:"#特点"},{default:t(()=>s[2]||(s[2]=[l("特点")])),_:1})]),n("li",v,[e(a,{to:"#示例"},{default:t(()=>s[3]||(s[3]=[l("示例")])),_:1})])])]),n("li",b,[e(a,{to:"#深拷贝"},{default:t(()=>s[4]||(s[4]=[l("深拷贝")])),_:1}),n("ul",null,[n("li",g,[e(a,{to:"#用法-1"},{default:t(()=>s[5]||(s[5]=[l("用法")])),_:1})]),n("li",_,[e(a,{to:"#特点-1"},{default:t(()=>s[6]||(s[6]=[l("特点")])),_:1})]),n("li",y,[e(a,{to:"#示例-1"},{default:t(()=>s[7]||(s[7]=[l("示例")])),_:1})])])]),n("li",f,[e(a,{to:"#应用场景"},{default:t(()=>s[8]||(s[8]=[l("应用场景")])),_:1})])])]),s[10]||(s[10]=o(`<p>在 Python 中，深拷贝和浅拷贝是两个重要的概念，尤其在处理复杂数据结构时。理解这两个概念有助于避免意外的数据修改和提高代码的健壮性。本文将详细介绍深拷贝和浅拷贝的区别、用法及其应用场景。</p><h2 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝"><span>浅拷贝</span></a></h2><p>浅拷贝创建一个新的对象，但不复制对象中嵌套的子对象。换句话说，浅拷贝仅复制对象的引用，而不是对象本身。</p><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h3><p>可以使用 <code>copy</code> 模块中的 <code>copy()</code> 函数来实现浅拷贝。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> copy</span>
<span class="line"></span>
<span class="line">original_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">shallow_copied_list <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>original_list<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>shallow_copied_list<span class="token punctuation">)</span>  <span class="token comment"># 输出: [1, 2, [3, 4]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li>浅拷贝会创建一个新的对象，但不会递归地复制子对象。</li><li>修改浅拷贝中的可变子对象会影响原始对象。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">original_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;changed&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>original_list<span class="token punctuation">)</span>        <span class="token comment"># 输出: [1, 2, [&#39;changed&#39;, 4]]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>shallow_copied_list<span class="token punctuation">)</span>  <span class="token comment"># 输出: [1, 2, [&#39;changed&#39;, 4]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝</span></a></h2><p>深拷贝创建一个新的对象，并递归地复制所有嵌套的子对象。这样，深拷贝与原始对象完全独立。</p><h3 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1"><span>用法</span></a></h3><p>可以使用 <code>copy</code> 模块中的 <code>deepcopy()</code> 函数来实现深拷贝。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> copy</span>
<span class="line"></span>
<span class="line">original_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">deep_copied_list <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>original_list<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>deep_copied_list<span class="token punctuation">)</span>  <span class="token comment"># 输出: [1, 2, [3, 4]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点</span></a></h3><ul><li>深拷贝会创建一个新的对象，并递归地复制所有子对象。</li><li>修改深拷贝中的子对象不会影响原始对象。</li></ul><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">original_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;changed&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>original_list<span class="token punctuation">)</span>       <span class="token comment"># 输出: [1, 2, [&#39;changed&#39;, 4]]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>deep_copied_list<span class="token punctuation">)</span>    <span class="token comment"># 输出: [1, 2, [3, 4]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><ul><li><strong>浅拷贝</strong>：适用于需要复制对象，但不需要复制嵌套对象的场景。适合处理简单数据结构。</li><li><strong>深拷贝</strong>：适用于需要完全独立的副本，尤其是当对象包含复杂嵌套结构时。</li></ul>`,21))])}const j=p(d,[["render",w],["__file","concept-copy-deep_shallow.html.vue"]]),C=JSON.parse('{"path":"/fpython/library/concept/concept-copy-deep_shallow.html","title":"深拷贝与浅拷贝","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[{"level":3,"title":"用法","slug":"用法","link":"#用法","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[{"level":3,"title":"用法","slug":"用法-1","link":"#用法-1","children":[]},{"level":3,"title":"特点","slug":"特点-1","link":"#特点-1","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":2}]},"filePathRelative":"fpython/library/concept/concept-copy-deep_shallow.md"}');export{j as comp,C as data};
