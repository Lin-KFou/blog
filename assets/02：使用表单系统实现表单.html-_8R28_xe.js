import{_ as n,c as a,f as t,o as e}from"./app-BCC5ysrj.js";const p={};function l(o,s){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="_8-2-使用表单系统实现表单-modelform" tabindex="-1"><a class="header-anchor" href="#_8-2-使用表单系统实现表单-modelform"><span>8.2 使用表单系统实现表单: ModelForm</span></a></h1><ul><li><a href="#82-%E4%BD%BF%E7%94%A8%E8%A1%A8%E5%8D%95%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95-modelform">8.2 使用表单系统实现表单: ModelForm</a><ul><li><a href="#821-%E4%BD%BF%E7%94%A8form%E5%AF%B9%E8%B1%A1%E5%AE%9A%E4%B9%89%E8%A1%A8%E5%8D%95">8.2.1 使用Form对象定义表单</a><ul><li><a href="#forms%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%89%B9%E6%80%A7">Forms对象的特性</a></li></ul></li><li><a href="#822-%E5%9F%BA%E4%BA%8Emodel%E5%AE%9A%E5%88%B6%E7%9A%84%E8%A1%A8%E5%8D%95">8.2.2 基于Model定制的表单</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%9A%84modelform">简单的ModelForm</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84meta%E9%80%89%E9%A1%B9">常用的Meta选项</a></li></ul></li></ul></li></ul><hr><ul><li>表单系统的核心：Form对象，它将表单中的字段封装成一系列Field和验证规则，以此来自动地生成HTML表单标签</li></ul><h2 id="_8-2-1-使用form对象定义表单" tabindex="-1"><a class="header-anchor" href="#_8-2-1-使用form对象定义表单"><span>8.2.1 使用Form对象定义表单</span></a></h2><ul><li><p>Django的建议将它们定义在应用下的：forms.py文件中</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># forms.py</span></span>
<span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">Form 表单对象</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms</span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TopicSearchForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>Form<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    title <span class="token operator">=</span> forms<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">&#39;Topic title&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Django规定，所有的Form对象都必须继承自django.forms.Form，所以这里的TopicSearchForm符合条件。</p></li><li><p>定义了一个title属性，它是forms.CharField类型的Field，根据名称可以猜测此处将title指定为字符类型。</p></li><li><p>label标签显式地指定了这个字段的名称，且Field有一个默认属性required为True，代表这个字段是必填的。</p></li></ul><h3 id="forms对象的特性" tabindex="-1"><a class="header-anchor" href="#forms对象的特性"><span>Forms对象的特性</span></a></h3><ul><li>实现对所有字段的验证</li><li>根据字段定义生成HTML <ul><li>表单实例可以自动生成HTML表单元素，且默认输出使用HTML表格，但是并不提供<code>&lt;table&gt;</code>起始和结束标签。</li><li>同时，也可以使用实例的as_ul方法获取列表形式的表单或使用as_p方法获取段落形式的表单</li></ul></li></ul><h2 id="_8-2-2-基于model定制的表单" tabindex="-1"><a class="header-anchor" href="#_8-2-2-基于model定制的表单"><span>8.2.2 基于Model定制的表单</span></a></h2><ul><li>Django表单系统考虑到了这个问题，提供了ModelForm，可以基于Model的定义自动生成表单，很大程度上简化了Model翻译成表单的过程</li><li>不会翻译所有的字段，editable=False的模型字段都不会出现在ModelForm中，如自增主键、自动添加的时间字段等</li><li>ModelForm的使用方法与Form类似，同样可以使用<code>is_valid</code>方法校验字段值的合法性和通过<code>cleaned_data</code>属性获取清理后的字段值</li><li>另外，ModelForm也会校验模型字段中设置的限制条件。如Topic中的title字段存在唯一性限制，那么，当表单对象执行is_valid方法时，不仅会校验title的字面值，同时还会查询数据库确认不存在重复的记录</li></ul><h3 id="简单的modelform" tabindex="-1"><a class="header-anchor" href="#简单的modelform"><span>简单的ModelForm</span></a></h3><ul><li><p><strong>定义一个TopicModelForm表单类</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># forms.py</span></span>
<span class="line"><span class="token comment">## 基于Model复制表单</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TopicModelForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>   <span class="token comment"># 使用Meta设置必要的元信息</span></span>
<span class="line">        model <span class="token operator">=</span> Topic        <span class="token comment"># 指定需要生成表单的模型（model）</span></span>
<span class="line">        exclude <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;is_online&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 排除不需要在表单中显示的字段</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>应用到html视图中</strong></p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token comment">&lt;!-- topic_model_form.html --&gt;</span></span>
<span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Topic Model Form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        {{ form }}</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    {% csrf_token %}</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>action 没有设定URL的意思是：将表单提交到与当前页面相同的URL</p></li><li><p><strong>视图函数编写</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">topic_model_form</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">:</span></span>
<span class="line">        topic <span class="token operator">=</span> TopicModelForm<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> topic<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            topic <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>title<span class="token operator">=</span>topic<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> content<span class="token operator">=</span>topic<span class="token punctuation">.</span>cleaned_data<span class="token punctuation">[</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                                        user<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> topic_detail_view<span class="token punctuation">(</span>request<span class="token punctuation">,</span> topic<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">&#39;post/topic_model_form.html&#39;</span><span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;form&#39;</span><span class="token punctuation">:</span> topic<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">&#39;post/topic_model_form.html&#39;</span><span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;form&#39;</span><span class="token punctuation">:</span> TopicModelForm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="常用的meta选项" tabindex="-1"><a class="header-anchor" href="#常用的meta选项"><span>常用的Meta选项</span></a></h3><ul><li><p>fields：列表或元组类型，与exclude相反，指定当前表单应该包含那些字段</p><ul><li>要所有Model字段都包含在表单中，可以设定为：<code>fields=&#39;__all__&#39;</code></li></ul><blockquote><p>ModelForm的定义必须要包含fields或exclude选项</p></blockquote></li><li><p>labels：字典类型，用于定义表单字段的名称（输入框左边显示的名称）</p><ul><li><p>表单字段的名称首先会使用Model字段设置的<code>verbose_name</code>，没有设置则直接使用字段名</p></li><li><p>当没有设置verbose_name是，就可以使用labels选项指定字段名</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">labels <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;标题&#39;</span><span class="token punctuation">,</span></span>
<span class="line"> <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;内容&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>help_texts：字典类型，用于给表单字段添加帮助信息（输入框下方显示的内容）来自Model字段的help_texts定义。help_texts与labels选项类似</p></li><li><p>widgets：字典类型，用于定义表单字段选用的控件。ModelForm会根据Model字段的类型映射表单Field类，因此会应用Field类中默认定义的widgets。</p></li><li><p>field_classes：字典类型，指定表单字段使用的Field类型，默认情况下，对于title字段，ModelForm会将它映射为fields.CharField类型。可以根据需要改变这种默认行为，例如，将title设置为form s.EmailField类型</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">field_classes <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> forms<span class="token punctuation">.</span>EmailField</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,14)]))}const c=n(p,[["render",l],["__file","02：使用表单系统实现表单.html.vue"]]),u=JSON.parse('{"path":"/fpython/htmlsystem/Django/chapter-08%EF%BC%9A%E8%A1%A8%E5%8D%95%E7%B3%BB%E7%BB%9F/02%EF%BC%9A%E4%BD%BF%E7%94%A8%E8%A1%A8%E5%8D%95%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95.html","title":"8.2 使用表单系统实现表单: ModelForm","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"8.2.1 使用Form对象定义表单","slug":"_8-2-1-使用form对象定义表单","link":"#_8-2-1-使用form对象定义表单","children":[{"level":3,"title":"Forms对象的特性","slug":"forms对象的特性","link":"#forms对象的特性","children":[]}]},{"level":2,"title":"8.2.2 基于Model定制的表单","slug":"_8-2-2-基于model定制的表单","link":"#_8-2-2-基于model定制的表单","children":[{"level":3,"title":"简单的ModelForm","slug":"简单的modelform","link":"#简单的modelform","children":[]},{"level":3,"title":"常用的Meta选项","slug":"常用的meta选项","link":"#常用的meta选项","children":[]}]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/htmlsystem/Django/chapter-08：表单系统/02：使用表单系统实现表单.md"}');export{c as comp,u as data};
