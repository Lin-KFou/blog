import{_ as o,c,a as n,d as e,e as l,f as r,b as a,r as i,o as u}from"./app-BCC5ysrj.js";const d={},k={class:"vuepress-toc"},v={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},q={class:"vuepress-toc-item"},x={class:"vuepress-toc-item"},w={class:"vuepress-toc-item"},z={class:"vuepress-toc-item"},E={class:"vuepress-toc-item"};function B(C,s){const t=i("router-link"),p=i("RouteLink");return u(),c("div",null,[s[15]||(s[15]=n("h1",{id:"_14-最长公共前缀",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_14-最长公共前缀"},[n("span",null,"14：最长公共前缀")])],-1)),n("nav",k,[n("ul",null,[n("li",v,[e(t,{to:"#题目描述"},{default:l(()=>s[0]||(s[0]=[a("题目描述")])),_:1}),n("ul",null,[n("li",m,[e(t,{to:"#示例"},{default:l(()=>s[1]||(s[1]=[a("示例")])),_:1})]),n("li",h,[e(t,{to:"#提示"},{default:l(()=>s[2]||(s[2]=[a("提示")])),_:1})])])]),n("li",b,[e(t,{to:"#解题思路"},{default:l(()=>s[3]||(s[3]=[a("解题思路")])),_:1}),n("ul",null,[n("li",g,[e(t,{to:"#_1-水平扫描法"},{default:l(()=>s[4]||(s[4]=[a("1. 水平扫描法")])),_:1})]),n("li",f,[e(t,{to:"#_2-垂直扫描法"},{default:l(()=>s[5]||(s[5]=[a("2. 垂直扫描法")])),_:1})]),n("li",_,[e(t,{to:"#_3-分治法"},{default:l(()=>s[6]||(s[6]=[a("3. 分治法")])),_:1})]),n("li",y,[e(t,{to:"#_4-二分查找法"},{default:l(()=>s[7]||(s[7]=[a("4. 二分查找法")])),_:1})])])]),n("li",q,[e(t,{to:"#代码实现"},{default:l(()=>s[8]||(s[8]=[a("代码实现")])),_:1}),n("ul",null,[n("li",x,[e(t,{to:"#垂直扫描法"},{default:l(()=>s[9]||(s[9]=[a("垂直扫描法")])),_:1})]),n("li",w,[e(t,{to:"#zip-方法"},{default:l(()=>s[10]||(s[10]=[a("zip 方法")])),_:1})]),n("li",z,[e(t,{to:"#复杂度分析"},{default:l(()=>s[11]||(s[11]=[a("复杂度分析")])),_:1})])])]),n("li",E,[e(t,{to:"#方法比较"},{default:l(()=>s[12]||(s[12]=[a("方法比较")])),_:1})])])]),s[16]||(s[16]=r(`<hr><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p><strong>题目：</strong></p><ul><li>编写一个函数来查找字符串数组中的最长公共前缀。</li><li>如果不存在公共前缀，返回空字符串 &quot;&quot;。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>示例 1：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span>
<span class="line">输出：&quot;fl&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span>
<span class="line">输出：&quot;&quot;</span>
<span class="line">解释：输入不存在公共前缀。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提示" tabindex="-1"><a class="header-anchor" href="#提示"><span>提示</span></a></h3><ul><li><code>1 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 仅由小写英文字母组成</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h2><p>有多种方法可以解决此问题，每种方法都有其特点：</p><h3 id="_1-水平扫描法" tabindex="-1"><a class="header-anchor" href="#_1-水平扫描法"><span>1. 水平扫描法</span></a></h3><p>从前往后扫描每个字符串：</p><ol><li>将第一个字符串假设为最长公共前缀。</li><li>遍历其余字符串，比较每个字符串与当前最长公共前缀，一旦发现不匹配的字符，立即减少公共前缀的长度。</li><li>继续此过程直到遍历完所有字符串。</li></ol><h3 id="_2-垂直扫描法" tabindex="-1"><a class="header-anchor" href="#_2-垂直扫描法"><span>2. 垂直扫描法</span></a></h3><p>按列比较所有字符串的字符：</p><ol><li>查看所有字符串的第一个字符，如果它们相同，继续到下一列；如果不同，算法结束。</li><li>重复此过程，直到字符串的末尾或者找到一个不匹配的字符。</li></ol><h3 id="_3-分治法" tabindex="-1"><a class="header-anchor" href="#_3-分治法"><span>3. 分治法</span></a></h3><p>将问题分解为更小的子问题：</p><ol><li>将字符串列表分成两半，分别找到每一半的最长公共前缀。</li><li>然后，将这两个前缀的公共部分作为结果。</li></ol><h3 id="_4-二分查找法" tabindex="-1"><a class="header-anchor" href="#_4-二分查找法"><span>4. 二分查找法</span></a></h3><p>利用二分查找优化查找过程：</p><ol><li>找到所有字符串中长度的最小值。</li><li>使用二分法在此范围内查找最长公共前缀。</li><li>检查每个字符串在这个中间长度上的前缀是否相同。</li></ol><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><h3 id="垂直扫描法" tabindex="-1"><a class="header-anchor" href="#垂直扫描法"><span>垂直扫描法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    查找字符串数组中的最长公共前缀</span>
<span class="line">    </span>
<span class="line">    Args:</span>
<span class="line">        strs: 字符串数组</span>
<span class="line">        </span>
<span class="line">    Returns:</span>
<span class="line">        str: 最长公共前缀</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> strs<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 找到最短字符串的长度</span></span>
<span class="line">    min_length <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> strs<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 逐列比较字符</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>min_length<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        char <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token builtin">any</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> char <span class="token keyword">for</span> s <span class="token keyword">in</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span>min_length<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="zip-方法" tabindex="-1"><a class="header-anchor" href="#zip-方法"><span>zip 方法</span></a></h3><p>使用 Python 的 zip 函数进行字符比较：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    使用 zip 函数查找最长公共前缀</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">for</span> chars <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">            res <span class="token operator">+=</span> chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">return</span> res</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析"><span>复杂度分析</span></a></h3><ul><li>时间复杂度：O(S)，其中 S 是所有字符串中字符数量的总和</li><li>空间复杂度：O(1)，只需要常数级别的额外空间</li></ul><h2 id="方法比较" tabindex="-1"><a class="header-anchor" href="#方法比较"><span>方法比较</span></a></h2><ol><li><p><strong>垂直扫描法</strong></p><ul><li>优点：实现简单，直观</li><li>缺点：需要遍历所有字符</li></ul></li><li><p><strong>zip 方法</strong></p><ul><li>优点：代码简洁，利用 Python 内置函数</li><li>缺点：可能消耗更多内存</li></ul></li></ol><blockquote><p><strong>注意：</strong></p><ul><li>处理空字符串数组</li><li>考虑字符串长度不一的情况</li><li>注意内存使用效率</li></ul></blockquote>`,36)),n("p",null,[s[14]||(s[14]=a("函数 reversed：")),e(p,{to:"/fpython/library/reversed%E5%87%BD%E6%95%B0.html"},{default:l(()=>s[13]||(s[13]=[a("reversed()指南")])),_:1})])])}const P=o(d,[["render",B],["__file","14.最长公共前缀.html.vue"]]),j=JSON.parse('{"path":"/fpython/example/algorithm/14.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80.html","title":"14：最长公共前缀","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"提示","slug":"提示","link":"#提示","children":[]}]},{"level":2,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[{"level":3,"title":"1. 水平扫描法","slug":"_1-水平扫描法","link":"#_1-水平扫描法","children":[]},{"level":3,"title":"2. 垂直扫描法","slug":"_2-垂直扫描法","link":"#_2-垂直扫描法","children":[]},{"level":3,"title":"3. 分治法","slug":"_3-分治法","link":"#_3-分治法","children":[]},{"level":3,"title":"4. 二分查找法","slug":"_4-二分查找法","link":"#_4-二分查找法","children":[]}]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[{"level":3,"title":"垂直扫描法","slug":"垂直扫描法","link":"#垂直扫描法","children":[]},{"level":3,"title":"zip 方法","slug":"zip-方法","link":"#zip-方法","children":[]},{"level":3,"title":"复杂度分析","slug":"复杂度分析","link":"#复杂度分析","children":[]}]},{"level":2,"title":"方法比较","slug":"方法比较","link":"#方法比较","children":[]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/example/algorithm/14.最长公共前缀.md"}');export{P as comp,j as data};
