import{_ as i,c as p,a as n,d as e,e as l,f as o,r as c,o as r,b as t}from"./app-BCC5ysrj.js";const u={},d={class:"vuepress-toc"},k={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"};function f(x,s){const a=c("router-link");return r(),p("div",null,[s[7]||(s[7]=n("h1",{id:"将链表转换为字符串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#将链表转换为字符串"},[n("span",null,"将链表转换为字符串")])],-1)),n("nav",d,[n("ul",null,[n("li",k,[e(a,{to:"#链表转字符串实现"},{default:l(()=>s[0]||(s[0]=[t("链表转字符串实现")])),_:1}),n("ul",null,[n("li",m,[e(a,{to:"#基本实现"},{default:l(()=>s[1]||(s[1]=[t("基本实现")])),_:1})])])]),n("li",v,[e(a,{to:"#工作原理"},{default:l(()=>s[2]||(s[2]=[t("工作原理")])),_:1}),n("ul",null,[n("li",h,[e(a,{to:"#数据结构"},{default:l(()=>s[3]||(s[3]=[t("数据结构")])),_:1})]),n("li",b,[e(a,{to:"#转换过程"},{default:l(()=>s[4]||(s[4]=[t("转换过程")])),_:1})])])]),n("li",g,[e(a,{to:"#使用示例"},{default:l(()=>s[5]||(s[5]=[t("使用示例")])),_:1})]),n("li",_,[e(a,{to:"#注意事项"},{default:l(()=>s[6]||(s[6]=[t("注意事项")])),_:1})])])]),s[8]||(s[8]=o(`<hr><h2 id="链表转字符串实现" tabindex="-1"><a class="header-anchor" href="#链表转字符串实现"><span>链表转字符串实现</span></a></h2><h3 id="基本实现" tabindex="-1"><a class="header-anchor" href="#基本实现"><span>基本实现</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">to_str</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;将链表转换为字符串</span>
<span class="line">    </span>
<span class="line">    Args:</span>
<span class="line">        node: 链表头节点</span>
<span class="line">        </span>
<span class="line">    Returns:</span>
<span class="line">        str: 转换后的字符串</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    num_str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token keyword">while</span> node<span class="token punctuation">:</span></span>
<span class="line">        num_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> num_str</span>
<span class="line">        node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">    <span class="token keyword">return</span> num_str</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h2><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val     <span class="token comment"># 节点值</span></span>
<span class="line">        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>   <span class="token comment"># 指向下一个节点的指针</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转换过程" tabindex="-1"><a class="header-anchor" href="#转换过程"><span>转换过程</span></a></h3><ol><li><p><strong>初始化</strong></p><ul><li>创建空字符串 <code>num_str</code></li><li>获取链表头节点</li></ul></li><li><p><strong>遍历链表</strong></p><ul><li>使用 while 循环遍历</li><li>每次获取当前节点值</li><li>移动到下一个节点</li></ul></li><li><p><strong>字符串构建</strong></p><ul><li>将节点值转为字符串</li><li>添加到结果字符串前面</li><li>保持正确的数字顺序</li></ul></li><li><p><strong>移动到下一个节点</strong></p></li><li><p><strong>返回结果字符串</strong></p></li></ol><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 创建链表: 7 -&gt; 0 -&gt; 8</span></span>
<span class="line">node <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line">node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">node<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 转换为字符串</span></span>
<span class="line">result <span class="token operator">=</span> to_str<span class="token punctuation">(</span>node<span class="token punctuation">)</span>  <span class="token comment"># 结果: &quot;807&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><blockquote><p><strong>注意：</strong></p><ul><li>处理空链表情况</li><li>注意数字顺序</li><li>考虑节点值类型</li></ul></blockquote>`,13))])}const w=i(u,[["render",f],["__file","Python-将链表转换为字符串.html.vue"]]),q=JSON.parse('{"path":"/fpython/example/Python-%E5%B0%86%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2.html","title":"将链表转换为字符串","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"链表转字符串实现","slug":"链表转字符串实现","link":"#链表转字符串实现","children":[{"level":3,"title":"基本实现","slug":"基本实现","link":"#基本实现","children":[]}]},{"level":2,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[{"level":3,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":3,"title":"转换过程","slug":"转换过程","link":"#转换过程","children":[]}]},{"level":2,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/example/Python-将链表转换为字符串.md"}');export{w as comp,q as data};
