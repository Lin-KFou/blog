import{_ as l,c as i,a as s,d as p,e,f as c,r as o,o as u,b as t}from"./app-BCC5ysrj.js";const r={},d={class:"vuepress-toc"},k={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"},w={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},x={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"},q={class:"vuepress-toc-item"},T={class:"vuepress-toc-item"},j={class:"vuepress-toc-item"},N={class:"vuepress-toc-item"};function I(E,n){const a=o("router-link");return u(),i("div",null,[n[15]||(n[15]=s("h1",{id:"io-输入与输出",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#io-输入与输出"},[s("span",null,"IO: 输入与输出")])],-1)),s("nav",d,[s("ul",null,[s("li",k,[p(a,{to:"#读写文件"},{default:e(()=>n[0]||(n[0]=[t("读写文件")])),_:1})]),s("li",m,[p(a,{to:"#设置字符串格式"},{default:e(()=>n[1]||(n[1]=[t("设置字符串格式")])),_:1}),s("ul",null,[s("li",v,[p(a,{to:"#字符串插入"},{default:e(()=>n[2]||(n[2]=[t("字符串插入")])),_:1})]),s("li",b,[p(a,{to:"#转换说明符"},{default:e(()=>n[3]||(n[3]=[t("转换说明符")])),_:1})]),s("li",h,[p(a,{to:"#格式字符串"},{default:e(()=>n[4]||(n[4]=[t("格式字符串")])),_:1})]),s("li",y,[p(a,{to:"#读写文件-1"},{default:e(()=>n[5]||(n[5]=[t("读写文件")])),_:1})]),s("li",f,[p(a,{to:"#检查文件和文件夹"},{default:e(()=>n[6]||(n[6]=[t("检查文件和文件夹")])),_:1})]),s("li",w,[p(a,{to:"#处理文本文件"},{default:e(()=>n[7]||(n[7]=[t("处理文本文件")])),_:1})]),s("li",g,[p(a,{to:"#处理二进制文件"},{default:e(()=>n[8]||(n[8]=[t("处理二进制文件")])),_:1})])])]),s("li",x,[p(a,{to:"#pickle"},{default:e(()=>n[9]||(n[9]=[t("pickle")])),_:1})]),s("li",_,[p(a,{to:"#shelve-模块"},{default:e(()=>n[10]||(n[10]=[t("shelve 模块")])),_:1})]),s("li",q,[p(a,{to:"#sqlite3-模块"},{default:e(()=>n[11]||(n[11]=[t("sqlite3 模块")])),_:1})]),s("li",T,[p(a,{to:"#读取网页"},{default:e(()=>n[12]||(n[12]=[t("读取网页")])),_:1}),s("ul",null,[s("li",j,[p(a,{to:"#urllib模块"},{default:e(()=>n[13]||(n[13]=[t("urllib模块")])),_:1})]),s("li",N,[p(a,{to:"#webbrowser模块"},{default:e(()=>n[14]||(n[14]=[t("webbrowser模块")])),_:1})])])])])]),n[16]||(n[16]=c(`<hr><ul><li>程序要能够运行，需要与外界进行通信，需要与用户交互，读写文件，访问网页等。这些，我们通常称之为输入和输出（简称 I/O）</li><li>基本的控制台I/O，包括打印消息，使用函数input读取用户输入的字符串</li><li>主要介绍一些设置字符串格式的方法，能够通过控制台I/O输出美观的字符串</li></ul><h2 id="读写文件" tabindex="-1"><a class="header-anchor" href="#读写文件"><span>读写文件</span></a></h2><ul><li>文件I/O，即读写文件</li><li>主要介绍使用文本文件，二进制文件以及功能强大的pickle模块</li></ul><h2 id="设置字符串格式" tabindex="-1"><a class="header-anchor" href="#设置字符串格式"><span>设置字符串格式</span></a></h2><ul><li>主要有 较老的字符串插入</li><li>新的格式字符串</li></ul><h3 id="字符串插入" tabindex="-1"><a class="header-anchor" href="#字符串插入"><span>字符串插入</span></a></h3><ul><li><strong>字符串</strong> 插入是一种设置字符串格式的简单方法</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 案例：如何控制小数位数 用 f 表示浮点数 前面加上数字表示的是： 留小数点后的几位数</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">81</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;value: %.2f&#39;</span> <span class="token operator">%</span> x<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;value: %.5f&#39;</span> <span class="token operator">%</span> x<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转换说明符" tabindex="-1"><a class="header-anchor" href="#转换说明符"><span>转换说明符</span></a></h3><table><thead><tr><th>说明符</th><th>含义</th></tr></thead><tbody><tr><td>d</td><td>整数</td></tr><tr><td>o</td><td>八进制（基数为8的）值</td></tr><tr><td>x</td><td>小写十六进制（基数为16的）数</td></tr><tr><td>X</td><td>大写十六进制（基数为16的）数</td></tr><tr><td>e</td><td>小写科学记数法表示的浮点数</td></tr><tr><td>E</td><td>大写科学记数法表示的浮点数</td></tr><tr><td>F</td><td>浮点数</td></tr><tr><td>s</td><td>字符串</td></tr><tr><td>%</td><td>%字符</td></tr></tbody></table><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">x</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;x = %f&#39;</span> <span class="token operator">%</span> x<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;x = %e&#39;</span> <span class="token operator">%</span> x<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;x = %E&#39;</span> <span class="token operator">%</span> x<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">a <span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">6</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token string">&#39;There\\&#39;s %d %ss older than %.2f years&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="格式字符串" tabindex="-1"><a class="header-anchor" href="#格式字符串"><span>格式字符串</span></a></h3><ul><li><p>创建美观字符串的方式是结合使用格式字符串和字符串函数 <strong>format(value,format_spec)</strong></p></li><li><p>模块包</p></li><li><p>在字符串插入和格式字符串都不够强大或灵活时，可能需要使用模块包</p></li><li><p>如：Cheetah 或 Django 提供的模块包</p></li><li><p>在需要创建大量动态生成的网页是，上面的模块包很有用</p></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># format 案例</span></span>
<span class="line">ss <span class="token operator">=</span> <span class="token string">&#39;My {pet} has {prob}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pet <span class="token operator">=</span> <span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span>prob <span class="token operator">=</span> <span class="token string">&#39;fleas&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 按位置替换值</span></span>
<span class="line">sss <span class="token operator">=</span> <span class="token string">&#39;My {0} has {1}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;fleas&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 像字符串插入 转换说明符</span></span>
<span class="line">a1 <span class="token operator">=</span> <span class="token string">&#39;1/18 = {x}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">18</span><span class="token punctuation">)</span></span>
<span class="line">a2 <span class="token operator">=</span> <span class="token string">&#39;1/18 = {x:f}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">18</span><span class="token punctuation">)</span></span>
<span class="line">a3 <span class="token operator">=</span> <span class="token string">&#39;1/18 = {x:.3f}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">18</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 指定格式设置参数</span></span>
<span class="line">a4 <span class="token operator">=</span> <span class="token string">&#39;num = {x:.{d}f}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">81</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">a5 <span class="token operator">=</span> <span class="token string">&#39;num = {x:.{d}f}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">80</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="读写文件-1" tabindex="-1"><a class="header-anchor" href="#读写文件-1"><span>读写文件</span></a></h3><ul><li><p>文件是一个命令的比特集合，存储在硬盘，U盘,闪存条等辅助存储设备中</p></li><li><p>文件有： 二进制文件 文本文件</p></li><li><p>本质上是 存储在磁盘中的字符串</p></li><li><p>文本文件具有如下特点：</p><ul><li>基本上是磁盘中的字符串。python源代码文件和HTML文件都属于文本文件</li><li>可使用任何文本编辑器进行编辑</li><li>每种文本文件都需要使用相应的分析程序（parser）来阅读。</li><li>通常比等价的二进制文件大。需要通过网络发送大型文本文件时，这是一个问题</li></ul></li><li><p>二进制文件具有如下特点</p><ul><li>通常是人类无法阅读，使用常规文本编辑器无法查看，需要使用特殊查看器显示其内容</li><li>占据的空间比等价的文本文件小</li></ul></li><li><p>如果要在python字符串中包含&#39;&#39; 必须使用&#39;\\&#39; 才可以</p><ul><li>&#39;c:\\home\\tjd\\Desktop\\python&#39;</li><li>想避免使用两个放斜杠，可以使用原始字符串</li><li>r&#39;c:\\home\\tjd\\Desktop\\python&#39;</li></ul></li></ul><h3 id="检查文件和文件夹" tabindex="-1"><a class="header-anchor" href="#检查文件和文件夹"><span>检查文件和文件夹</span></a></h3><ul><li>使用os.listdir(os.getcwd())查看当前的工作目录或者文件夹</li></ul><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>os.getcwd()</td><td>返回当前工作目录的名称</td></tr><tr><td>os.listdir(p)</td><td>返回一个字符串列表，其中包含路径P指定的文件夹和所有文件和文件夹的名称</td></tr><tr><td>os.chdir(p)</td><td>将当前工作目录设置为路径p</td></tr><tr><td>os.path.isfile(p)</td><td>当路径p指定的是一个文件的名称时，返回True，否则返回False # 布尔值判断</td></tr><tr><td>os.path.isdir(p)</td><td>当路径p制定的是一个文件夹的名称是，返回True， 否则返回False # 布尔值判断</td></tr><tr><td>os.stat(fname)</td><td>返回有关fname的信息。如大小 和 最后一次修改的时间</td></tr></tbody></table><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 获取当前目录路径</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">list_cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 下面的两个相关的辅助函数，使用列表解析分别返回当前工作目录中的文件</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">files_cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> list_cwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">folders_cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> list_cwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 只想获取当前工作目录中的.py文件</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">list_py</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> path <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span></span>
<span class="line">        path <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span>fname <span class="token keyword">for</span> fname <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>fname<span class="token punctuation">)</span> <span class="token keyword">if</span> fname<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">cwd_size_in_bytes2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>size_in_bytes<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> files_cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 返回当前工作目录中所有文件的大小总和</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">size_in_bytes</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> os<span class="token punctuation">.</span>stat<span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">.</span>st_size</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">cwd_size_in_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    total <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">for</span> name <span class="token keyword">in</span> files_cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        total <span class="token operator">+=</span> size_in_bytes<span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> total</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理文本文件" tabindex="-1"><a class="header-anchor" href="#处理文本文件"><span>处理文本文件</span></a></h3><ul><li>在python中处理文本文件相对容易</li><li>打开文件 ----&gt; 处理文件 ------&gt; 关闭文件</li></ul><h4 id="逐行读取文本文件" tabindex="-1"><a class="header-anchor" href="#逐行读取文本文件"><span>逐行读取文本文件</span></a></h4><ul><li><p>读取文本文件的最常见方式可能是每次读取一行。</p></li><li><p>python文件打开模式</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>&#39;r&#39;</td><td>只读模式（默认）</td></tr><tr><td>&#39;w&#39;</td><td>写入模式</td></tr><tr><td>&#39;a&#39;</td><td>在文件末尾附加</td></tr><tr><td>&#39;b&#39;</td><td>二进制模式</td></tr><tr><td>&#39;t&#39;</td><td>文本模式（默认模式）</td></tr><tr><td>&#39;+&#39;</td><td>为读写打开文件</td></tr></tbody></table></li><li><p>如果只想读取文本文件，可在调用函数open时值只传递文件名： 比如： f = open(filename)</p></li><li><p>如果为指定模式，python默认为只读模式</p></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 逐行读取文件</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_file</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment"># 使用with语句自动关闭文件</span></span>
<span class="line">        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 设置end=&#39;&#39;以避免额外的空行</span></span>
<span class="line">    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="将整个文本文件作为一个字符串进行获取" tabindex="-1"><a class="header-anchor" href="#将整个文本文件作为一个字符串进行获取"><span>将整个文本文件作为一个字符串进行获取</span></a></h4><ul><li>另一种读取文本文件的最常见方式是： 将其作为一个大型字符串进行读取</li><li>下面的案例中，函数比 print_file 短小，简单。</li><li>但如果文件很大，将占用大量内存。导致 降低计算机的运行速度</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 案例</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_file2</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line"><span class="token comment"># 改进</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_file2</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="写入文本文件" tabindex="-1"><a class="header-anchor" href="#写入文本文件"><span>写入文本文件</span></a></h4><ul><li>写入文本文件只比读取文本文件复杂一些</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 案例</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">make_story1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;story.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;Marh hand a little lamb,\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;and then she some more,\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 将文本写入文件需要调用 f.write()，并将要写入的字符串传递给它。字符串将以指定的顺序写入文件</span></span>
<span class="line"><span class="token comment"># 当story.txt 存在，调用open(&#39;story.txt&#39;,&#39;w&#39;) 将删除原有文件</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 案例改进</span></span>
<span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">make_story2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">&#39;story.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;story.txt already exists&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;story.txt&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;Many had a little lamb,\\n and then she had some more.\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="附加到文件文件末尾" tabindex="-1"><a class="header-anchor" href="#附加到文件文件末尾"><span>附加到文件文件末尾</span></a></h4><ul><li>附加的这种模式是不会删除文件既有的内容，也就是不会删除文件</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 案例</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add_to_story</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span>fname <span class="token operator">=</span> <span class="token string">&#39;story.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 使用 &#39;a&#39; 模式打开文件，准备在文件末尾追加内容</span></span>
<span class="line">    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 将内容追加到文件末尾</span></span>
<span class="line">        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="将字符串插入到文件开头" tabindex="-1"><a class="header-anchor" href="#将字符串插入到文件开头"><span>将字符串插入到文件开头</span></a></h4><ul><li>将字符串插入到文件的开头，由于操作系统没有为这样提供直接支持，要将文本插入到文件开头，最简单的额方式是：</li><li>将文件读取到一个字符串中，将新文本插入到该字符串，再将这个字符串写入原来的文件</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 案例</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">insert_title</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>fname <span class="token operator">=</span> <span class="token string">&#39;story.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 使用 &#39;r+&#39; 模式打开文件，准备读取和写入文件</span></span>
<span class="line">    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token string">&#39;r+&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 读取整个文件到字符串变量 temp 中</span></span>
<span class="line">        temp <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 在字符串变量 temp 的开头插入标题（title）</span></span>
<span class="line">        temp <span class="token operator">=</span> title <span class="token operator">+</span> <span class="token string">&#39;\\n\\n&#39;</span> <span class="token operator">+</span> temp</span>
<span class="line">        <span class="token comment"># 将文件指针重新指向开头</span></span>
<span class="line">        f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 将修改后的字符串写入文件</span></span>
<span class="line">        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理二进制文件" tabindex="-1"><a class="header-anchor" href="#处理二进制文件"><span>处理二进制文件</span></a></h3><ul><li><p>如果文件不是文本文件，将被视为二进制文件</p></li><li><p>二进制文件是以模式&#39;b&#39;打开，可访问其各个字节</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">is_gif</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 使用 &#39;br&#39; 模式打开文件，准备读取二进制数据</span></span>
<span class="line">    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token string">&#39;br&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 读取文件的前4个字节</span></span>
<span class="line">        first4 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 检查是否为GIF图像文件的标志</span></span>
<span class="line">        <span class="token keyword">return</span> first4 <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>上面的函数是检查fname是不是GIF图像文件。</p></li><li><p>方法是检查其前4个字节是不是（0x47, 0x49, 0x46, 0x38）</p></li><li><p>所有GIF图像文件都以这4个字节开头</p></li><li><p>在python，类似与0x47是十六进制数，十六进制适合用于处理字节，每个十六进制位对应4个比特，两个十六进制位(0x47)可描述一个字节</p></li><li><p>文件的模式是以&#39;br&#39;打开，表示二进制读取模式</p></li><li><p>调用f.read(n) 来读取接下来的n个字节。</p></li><li><p>与文本文件对象一样，二进制文件对象也使用文件指针来记录接下来应读取的那个字节</p></li></ul><h2 id="pickle" tabindex="-1"><a class="header-anchor" href="#pickle"><span>pickle</span></a></h2><ul><li>Python模块pickle执行的操作通常被称为对象串行化（简称串行化），其基本思想是将复杂的数据结构转换为字节流，即创建数据结构的串行化表示。</li><li>在处理二进制文件方面，通常会使用pickle这个模块，除了数据结构外，还可以用它来存储函数。</li><li>重要注意：pickle不能用于读写特殊格式的二进制文件，如GIF文件，这种文件只能逐字节处理。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># pickle 模块案例</span></span>
<span class="line"><span class="token keyword">import</span> pickle</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">make_pickled_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 定义一个字典，用于存储姓名和分数</span></span>
<span class="line">    grade <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;alan&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;tom&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;dan&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;may&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment"># 使用 &#39;wb&#39; 模式打开文件，准备写入二进制数据</span></span>
<span class="line">    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;grades.date&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> outfile<span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 使用 pickle.dump() 将数据结构存储到磁盘</span></span>
<span class="line">        pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>grade<span class="token punctuation">,</span> outfile<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">get_pickles_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 使用 &#39;rb&#39; 模式打开文件，准备读取二进制数据</span></span>
<span class="line">    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;grades.date&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> infile<span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 使用 pickle.load() 从磁盘获取数据结构</span></span>
<span class="line">        grades <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>infile<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> grades</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shelve-模块" tabindex="-1"><a class="header-anchor" href="#shelve-模块"><span>shelve 模块</span></a></h2><ul><li>提供了一个简单的持久化存储方式，可以将Python对象存储到一个文件中，并在需要时从文件中读取出来。</li><li>shelve 模块使用了dbm模块来存储数据，dbm模块提供了一个简单的键值对存储方式。</li><li>shelve 模块的优点是可以直接存储Python对象，不需要进行序列化和反序列化操作，非常方便。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> shelve</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建一个shelve对象</span></span>
<span class="line"><span class="token keyword">with</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;example.shelve&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> shelf<span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 存储数据</span></span>
<span class="line">    shelf<span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;example&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;version&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1.0&#39;</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment"># 检索数据</span></span>
<span class="line">    data <span class="token operator">=</span> shelf<span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sqlite3-模块" tabindex="-1"><a class="header-anchor" href="#sqlite3-模块"><span>sqlite3 模块</span></a></h2><ul><li>sqlite3 模块提供了一个轻量级的数据库引擎，可以直接访问SQLite数据库。</li><li>它允许你编写SQL命令来查询和检索数据，还可以执行事务和管理数据库连接。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> sqlite3</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 连接到数据库，如果数据库不存在，则会创建一个新的数据库</span></span>
<span class="line">conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;example.db&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建一个游标对象</span></span>
<span class="line">cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建表</span></span>
<span class="line">cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS users</span>
<span class="line">               (id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE NOT NULL)&#39;&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 插入数据</span></span>
<span class="line">cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO users (name,email) VALUES (&#39;John Doe&#39;,&#39;john.doe@example.com&#39;)&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 保存更改</span></span>
<span class="line">conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查询数据</span></span>
<span class="line">cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM users&quot;</span><span class="token punctuation">)</span></span>
<span class="line">rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 关闭连接</span></span>
<span class="line">conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读取网页" tabindex="-1"><a class="header-anchor" href="#读取网页"><span>读取网页</span></a></h2><ul><li>Python访问网络的常见任务是自动读取网页内容</li><li>可以使用urllib模块或webbrowser模块</li></ul><h3 id="urllib模块" tabindex="-1"><a class="header-anchor" href="#urllib模块"><span>urllib模块</span></a></h3><ul><li>使用urllib.request.urlopen()打开网页</li><li>使用read()方法读取网页内容</li><li>打印网页内容的前25个字符</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 读取 www.example.tk 网页案例</span></span>
<span class="line"><span class="token keyword">with</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">&#39;https://www.example.tk&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> page<span class="token punctuation">:</span></span>
<span class="line">    html <span class="token operator">=</span> page<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webbrowser模块" tabindex="-1"><a class="header-anchor" href="#webbrowser模块"><span>webbrowser模块</span></a></h3><ul><li>使用webbrowser.open()函数直接在浏览器中显示网页</li><li>注意：webbrowser.open()函数会直接打开浏览器显示网页，而不是返回网页内容</li><li>如果需要读取网页内容，需要使用urllib.request.urlopen()或其他方法</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> webbrowser</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用webbrowser模块打开网页</span></span>
<span class="line">webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.yahoo.com&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 注意：webbrowser.open()函数会直接打开浏览器显示网页，而不是返回网页内容</span></span>
<span class="line"><span class="token comment"># 如果需要读取网页内容，需要使用urllib.request.urlopen()或其他方法</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57))])}const L=l(r,[["render",I],["__file","concept-io.html.vue"]]),F=JSON.parse('{"path":"/fpython/library/concept/concept-io.html","title":"IO: 输入与输出","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"读写文件","slug":"读写文件","link":"#读写文件","children":[]},{"level":2,"title":"设置字符串格式","slug":"设置字符串格式","link":"#设置字符串格式","children":[{"level":3,"title":"字符串插入","slug":"字符串插入","link":"#字符串插入","children":[]},{"level":3,"title":"转换说明符","slug":"转换说明符","link":"#转换说明符","children":[]},{"level":3,"title":"格式字符串","slug":"格式字符串","link":"#格式字符串","children":[]},{"level":3,"title":"读写文件","slug":"读写文件-1","link":"#读写文件-1","children":[]},{"level":3,"title":"检查文件和文件夹","slug":"检查文件和文件夹","link":"#检查文件和文件夹","children":[]},{"level":3,"title":"处理文本文件","slug":"处理文本文件","link":"#处理文本文件","children":[]},{"level":3,"title":"处理二进制文件","slug":"处理二进制文件","link":"#处理二进制文件","children":[]}]},{"level":2,"title":"pickle","slug":"pickle","link":"#pickle","children":[]},{"level":2,"title":"shelve 模块","slug":"shelve-模块","link":"#shelve-模块","children":[]},{"level":2,"title":"sqlite3 模块","slug":"sqlite3-模块","link":"#sqlite3-模块","children":[]},{"level":2,"title":"读取网页","slug":"读取网页","link":"#读取网页","children":[{"level":3,"title":"urllib模块","slug":"urllib模块","link":"#urllib模块","children":[]},{"level":3,"title":"webbrowser模块","slug":"webbrowser模块","link":"#webbrowser模块","children":[]}]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":2}]},"filePathRelative":"fpython/library/concept/concept-io.md"}');export{L as comp,F as data};
