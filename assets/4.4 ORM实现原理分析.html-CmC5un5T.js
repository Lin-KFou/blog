import{_ as s,c as a,f as e,o as t}from"./app-BCC5ysrj.js";const p={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_4-4-orm实现原理" tabindex="-1"><a class="header-anchor" href="#_4-4-orm实现原理"><span>4.4 ORM实现原理</span></a></h1><ul><li><a href="#44-orm%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">4.4 ORM实现原理</a><ul><li><a href="#441-python%E5%85%83%E7%B1%BB">4.4.1 Python元类</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E7%94%A8type%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E7%B1%BB">如何用type动态创建类</a></li></ul></li><li><a href="#442-python%E6%8F%8F%E8%BF%B0%E7%AC%A6">4.4.2 Python描述符</a></li></ul></li></ul><hr><ul><li>ORM是Django框架的核心模块 想精进，思考下：使用ORM提供的接口，在下面方面</li><li>为什么创建的Model会自动拥有名称为id的主键</li><li>查询管理器是什么，又是怎么添加到Model中的</li><li>QuerySet是什么样的结构</li></ul><h2 id="_4-4-1-python元类" tabindex="-1"><a class="header-anchor" href="#_4-4-1-python元类"><span>4.4.1 Python元类</span></a></h2><p>类的类型是：type<br> Python中使用type确定对象的类型是比较常见的<br> type的一个重要功能：创建类</p><h3 id="如何用type动态创建类" tabindex="-1"><a class="header-anchor" href="#如何用type动态创建类"><span>如何用type动态创建类</span></a></h3><ul><li>type创建类需要接收三个参数 <ul><li>类的名称</li><li>父类的元组</li><li>属性字典</li></ul></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">A <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>例子</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    hello <span class="token operator">=</span> <span class="token string">&#39;World&#39;</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Hello&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过type来实现，如下</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;Hello&quot;</span></span>
<span class="line">A <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;fun&#39;</span><span class="token punctuation">:</span>fun<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过type继承</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">B <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">b<span class="token punctuation">.</span>fun<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python在创建类对象（不是类实例对象）的时候，首先会从当前的类定义中查询是否指定了元类，如果没有，则继续在父类中寻找指定的元类。如果在任何父类中都找不到元类的声明，就会上升到模块层次去查询。最终，如果还没有找到元类的声明，Python就会使用内置的type来创建这个类</p><blockquote><p>在Python中 <code>__new__()</code>方法用来创建实例 <code>__init__()</code>负责初始化实例</p></blockquote><ul><li>需要修改类的属性，就需要重写元类的<code>__new__()</code>方法</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">BBSMeta</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>   </span>
<span class="line">        attrs<span class="token punctuation">[</span><span class="token string">&#39;desc&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">lambda</span> self<span class="token punctuation">:</span> <span class="token string">&#39;django bbs&#39;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>BBSMeta<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line">a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>desc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先需要知道，在Python中，__new__方法用来创建实例，__init__负责初始化实例。所以，如果要修改类的属性，就需要重写元类的__new__方法。它接收四个参数：需要实例化的类对象、类的名字、类继承的父类集合、类的属性字典。</p><p>可以看到，BBSMeta类继承自type，它可以作为一个元类使用，且它实现了__new__方法，并给类添加了desc方法。之后，类A指定元类为BBSMeta，所以，A的实例就有了desc方法。</p><h2 id="_4-4-2-python描述符" tabindex="-1"><a class="header-anchor" href="#_4-4-2-python描述符"><span>4.4.2 Python描述符</span></a></h2><p>描述符就是实现了描述符协议的对象，描述符协议包含三个方法：</p><ul><li><code>__get__</code></li><li><code>__set__</code></li><li><code>__delete__</code> 只要实现了这三个方法中的任意一个，这个类对象就被称作描述符，且这个类对象的实例就有了一些特殊的特性</li></ul><p><strong>如何声明</strong><code>__get__(self, instance, owner)：</code>用于访问属性，返回属性的值 <code>__set__(self, instance, owner)：</code>设置属性的值，不返回任何内容 <code>__delete__(self, instance)：</code>用于删除属性，不返回任何内容</p><p>只实现了__get__方法的对象成为<strong>非数据描述符</strong>，这类描述符只能读取对象属性<br> 同时实现了__get__和__set__方法的对象是数据描述符，可以实现对属性的读写</p><p>参考文档：微信读书: <a href="https://weread.qq.com/web/reader/6e4329007193f1e66e43129k37632cd021737693cfc7149" target="_blank" rel="noopener noreferrer">https://weread.qq.com/web/reader/6e4329007193f1e66e43129k37632cd021737693cfc7149</a></p>`,27)]))}const i=s(p,[["render",l],["__file","4.4 ORM实现原理分析.html.vue"]]),u=JSON.parse('{"path":"/fpython/htmlsystem/Django/chapter-04%EF%BC%9AORM%E5%BA%94%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/4.4%20ORM%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.html","title":"4.4 ORM实现原理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"4.4.1 Python元类","slug":"_4-4-1-python元类","link":"#_4-4-1-python元类","children":[{"level":3,"title":"如何用type动态创建类","slug":"如何用type动态创建类","link":"#如何用type动态创建类","children":[]}]},{"level":2,"title":"4.4.2 Python描述符","slug":"_4-4-2-python描述符","link":"#_4-4-2-python描述符","children":[]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/htmlsystem/Django/chapter-04：ORM应用与原理剖析/4.4 ORM实现原理分析.md"}');export{i as comp,u as data};
