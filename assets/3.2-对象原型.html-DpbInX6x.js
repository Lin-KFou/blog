import{_ as l,c as o,a as s,d as t,e,f as c,r as i,o as u,b as p}from"./app-BCC5ysrj.js";const r={},d={class:"vuepress-toc"},k={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"},j={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"};function w(x,n){const a=i("router-link");return u(),o("div",null,[n[10]||(n[10]=s("h1",{id:"对象原型",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#对象原型"},[s("span",null,"对象原型")])],-1)),s("nav",d,[s("ul",null,[s("li",k,[t(a,{to:"#原型链"},{default:e(()=>n[0]||(n[0]=[p("原型链")])),_:1}),s("ul",null,[s("li",v,[t(a,{to:"#原型的概念"},{default:e(()=>n[1]||(n[1]=[p("原型的概念")])),_:1})]),s("li",m,[t(a,{to:"#示例"},{default:e(()=>n[2]||(n[2]=[p("示例")])),_:1})])])]),s("li",b,[t(a,{to:"#属性遮蔽"},{default:e(()=>n[3]||(n[3]=[p("属性遮蔽")])),_:1}),s("ul",null,[s("li",h,[t(a,{to:"#概念"},{default:e(()=>n[4]||(n[4]=[p("概念")])),_:1})]),s("li",g,[t(a,{to:"#示例-1"},{default:e(()=>n[5]||(n[5]=[p("示例")])),_:1})])])]),s("li",f,[t(a,{to:"#设置原型"},{default:e(()=>n[6]||(n[6]=[p("设置原型")])),_:1}),s("ul",null,[s("li",j,[t(a,{to:"#object-create-设置原型"},{default:e(()=>n[7]||(n[7]=[p("Object.create()设置原型")])),_:1})]),s("li",y,[t(a,{to:"#构造函数设置原型"},{default:e(()=>n[8]||(n[8]=[p("构造函数设置原型")])),_:1})]),s("li",_,[t(a,{to:"#自由属性"},{default:e(()=>n[9]||(n[9]=[p("自由属性")])),_:1})])])])])]),n[11]||(n[11]=c(`<hr><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链"><span>原型链</span></a></h2><h3 id="原型的概念" tabindex="-1"><a class="header-anchor" href="#原型的概念"><span>原型的概念</span></a></h3><p>JavaScript 中的每个对象都有一个内置的 <code>prototype</code> 属性，它指向该对象的原型对象。原型链是 JavaScript 实现继承的主要方式。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 创建一个简单对象</span></span>
<span class="line"><span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">city</span><span class="token operator">:</span> <span class="token string">&quot;ShenZhen&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;Hello Welcome to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>city<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">myObject<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>提示：</strong> 在浏览器控制台中输入对象名称后跟随一个点（如：<code>myObject.</code>），会显示该对象所有可用的属性和方法。</p></blockquote><h2 id="属性遮蔽" tabindex="-1"><a class="header-anchor" href="#属性遮蔽"><span>属性遮蔽</span></a></h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h3><p>当一个对象的属性与其原型对象的属性同名时，对象自身的属性会&quot;遮蔽&quot;原型对象的同名属性。</p><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;动物发出声音&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> dog <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">dog<span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;汪汪汪&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">dog<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: &quot;汪汪汪&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置原型" tabindex="-1"><a class="header-anchor" href="#设置原型"><span>设置原型</span></a></h2><p>JavaScript 提供了两种设置对象原型的方法：</p><ol><li>Object.create()</li><li>构造函数</li></ol><h3 id="object-create-设置原型" tabindex="-1"><a class="header-anchor" href="#object-create-设置原型"><span>Object.create()设置原型</span></a></h3><p>Object.create() 方法创建一个新对象，使用现有对象作为新对象的原型：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> personPrototype <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> carl <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>personPrototype<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">carl<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数设置原型" tabindex="-1"><a class="header-anchor" href="#构造函数设置原型"><span>构造函数设置原型</span></a></h3><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>prototype 属性</td><td>所有函数都有的属性，指向原型对象</td></tr><tr><td><strong>proto</strong></td><td>对象实例指向其构造函数原型的内部链接</td></tr><tr><td>原型继承</td><td>通过原型链实现的对象继承机制</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 创建对象，有一个 greet() 方法</span></span>
<span class="line"><span class="token keyword">const</span> personPrototype <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 构造函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 Object.assign 将 personPrototype 中定义的方法绑定到 Person 函数的 prototype 属性上</span></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> personPrototype<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建实例</span></span>
<span class="line"><span class="token keyword">const</span> shenzhen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;ShenZhen&#39;</span><span class="token punctuation">)</span></span>
<span class="line">shenzhen<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自由属性" tabindex="-1"><a class="header-anchor" href="#自由属性"><span>自由属性</span></a></h3><p>自由属性（Own Properties）是直接定义在对象上的属性，而不是从原型链继承的属性。</p><h4 id="检查自由属性" tabindex="-1"><a class="header-anchor" href="#检查自由属性"><span>检查自由属性</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> irma <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Irma&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查属性是否是自由属性</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>irma<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>irma<span class="token punctuation">,</span> <span class="token string">&#39;greet&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>参考：</strong> <a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes" target="_blank" rel="noopener noreferrer">MDN-对象原型</a></p></blockquote>`,26))])}const q=l(r,[["render",w],["__file","3.2-对象原型.html.vue"]]),P=JSON.parse('{"path":"/fhtml/JavaScript/03%EF%BC%9AJS%E5%AF%B9%E8%B1%A1/3.2-%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%9E%8B.html","title":"对象原型","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"原型链","slug":"原型链","link":"#原型链","children":[{"level":3,"title":"原型的概念","slug":"原型的概念","link":"#原型的概念","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"属性遮蔽","slug":"属性遮蔽","link":"#属性遮蔽","children":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"设置原型","slug":"设置原型","link":"#设置原型","children":[{"level":3,"title":"Object.create()设置原型","slug":"object-create-设置原型","link":"#object-create-设置原型","children":[]},{"level":3,"title":"构造函数设置原型","slug":"构造函数设置原型","link":"#构造函数设置原型","children":[]},{"level":3,"title":"自由属性","slug":"自由属性","link":"#自由属性","children":[]}]}],"git":{},"filePathRelative":"fhtml/JavaScript/03：JS对象/3.2-对象原型.md"}');export{q as comp,P as data};
