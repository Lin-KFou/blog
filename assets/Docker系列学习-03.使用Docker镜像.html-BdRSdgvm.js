import{_ as t,c,a as e,d as a,e as l,f as o,r as d,o as p,b as i}from"./app-BCC5ysrj.js";const r={},u={class:"vuepress-toc"},m={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},k={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"},D={class:"vuepress-toc-item"},x={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},E={class:"vuepress-toc-item"},I={class:"vuepress-toc-item"},j={class:"vuepress-toc-item"},B={class:"vuepress-toc-item"};function A(q,s){const n=d("router-link");return p(),c("div",null,[s[15]||(s[15]=e("h1",{id:"_03-使用docker镜像",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_03-使用docker镜像"},[e("span",null,"03. 使用Docker镜像")])],-1)),e("nav",u,[e("ul",null,[e("li",m,[a(n,{to:"#简介"},{default:l(()=>s[0]||(s[0]=[i("简介")])),_:1})]),e("li",v,[a(n,{to:"#_1-获取和使用镜像"},{default:l(()=>s[1]||(s[1]=[i("1. 获取和使用镜像")])),_:1}),e("ul",null,[e("li",k,[a(n,{to:"#_1-2-运行镜像"},{default:l(()=>s[2]||(s[2]=[i("1.2 运行镜像")])),_:1})]),e("li",b,[a(n,{to:"#_1-3-运行镜像"},{default:l(()=>s[3]||(s[3]=[i("1.3 运行镜像")])),_:1})])])]),e("li",h,[a(n,{to:"#_2-管理本地镜像"},{default:l(()=>s[4]||(s[4]=[i("2. 管理本地镜像")])),_:1}),e("ul",null,[e("li",g,[a(n,{to:"#_2-1-查看镜像列表"},{default:l(()=>s[5]||(s[5]=[i("2.1 查看镜像列表")])),_:1})]),e("li",f,[a(n,{to:"#_2-2-镜像体积"},{default:l(()=>s[6]||(s[6]=[i("2.2 镜像体积")])),_:1})]),e("li",_,[a(n,{to:"#虚悬镜像"},{default:l(()=>s[7]||(s[7]=[i("虚悬镜像")])),_:1})]),e("li",D,[a(n,{to:"#中间层镜像"},{default:l(()=>s[8]||(s[8]=[i("中间层镜像")])),_:1})]),e("li",x,[a(n,{to:"#列出部分镜像"},{default:l(()=>s[9]||(s[9]=[i("列出部分镜像")])),_:1})]),e("li",y,[a(n,{to:"#以特定格式显示"},{default:l(()=>s[10]||(s[10]=[i("以特定格式显示")])),_:1})])])]),e("li",E,[a(n,{to:"#删除本地镜像"},{default:l(()=>s[11]||(s[11]=[i("删除本地镜像")])),_:1}),e("ul",null,[e("li",I,[a(n,{to:"#用id、镜像名、摘要删除镜像"},{default:l(()=>s[12]||(s[12]=[i("用ID、镜像名、摘要删除镜像")])),_:1})]),e("li",j,[a(n,{to:"#untagged和deleted"},{default:l(()=>s[13]||(s[13]=[i("Untagged和Deleted")])),_:1})]),e("li",B,[a(n,{to:"#用docker-image-ls命令进行配合"},{default:l(()=>s[14]||(s[14]=[i("用docker image ls命令进行配合")])),_:1})])])])])]),s[16]||(s[16]=o(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Docker 镜像是容器运行的基础。当需要运行容器时，Docker 会检查本地是否存在所需的镜像，如果不存在则会从镜像仓库下载。本文将介绍：</p><ul><li>如何获取和使用镜像</li><li>管理本地镜像</li><li>理解镜像的基本原理</li></ul><h2 id="_1-获取和使用镜像" tabindex="-1"><a class="header-anchor" href="#_1-获取和使用镜像"><span>1. 获取和使用镜像</span></a></h2><p>Docker Hub上存在大量的镜像，如何获取？<br> 获取Docker镜像仓库中的镜像命令： <code>docker pull</code>。格式：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 拉取镜像的命令格式</span></span>
<span class="line"><span class="token function">docker</span> pull <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>registry地址<span class="token punctuation">[</span>:端口号<span class="token punctuation">]</span>/<span class="token punctuation">]</span>仓库名<span class="token punctuation">[</span>:标签<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 示例：拉取 Ubuntu 18.04 镜像</span></span>
<span class="line"><span class="token function">docker</span> pull ubuntu:18.04</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令说明：</p><ul><li>registry地址：镜像仓库地址，默认为 Docker Hub</li><li>仓库名：<code>&lt;用户名&gt;/&lt;镜像名&gt;</code>，官方镜像省略用户名</li><li>标签：指定版本，默认为 latest</li></ul><h3 id="_1-2-运行镜像" tabindex="-1"><a class="header-anchor" href="#_1-2-运行镜像"><span>1.2 运行镜像</span></a></h3><p>获取镜像后，可以基于该镜像启动容器：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 启动交互式容器</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> ubuntu:18.04 <span class="token function">bash</span></span>
<span class="line"><span class="token comment"># 查看系统信息</span></span>
<span class="line"><span class="token function">cat</span> /etc/os-release</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>-i</code>：保持标准输入打开</li><li><code>-t</code>：分配伪终端</li><li><code>--rm</code>：容器退出后自动删除</li></ul><h3 id="_1-3-运行镜像" tabindex="-1"><a class="header-anchor" href="#_1-3-运行镜像"><span>1.3 运行镜像</span></a></h3><p>当存在镜像后，就能够以这个镜像为基础启动并运行一个容器。 当打算启动镜像里面的bash并且进行交互式操作的话，可以执行下面的命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> ubuntu:18.04 <span class="token function">bash</span></span>
<span class="line"><span class="token function">cat</span> /etc/os-release </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># docker run  运行容器的命令</span>
<span class="line"># -it     两个参数 -i：交互操作  -t 终端。因为进入bash执行一些命令并查看返回结果，需要交互式终端。</span>
<span class="line"># --rm    表示的是：容器退出后随之将其删除。默认情况下，为了保障需求，退出的容器并不会立即删除，除非手动 docker rm。</span>
<span class="line"># cat /etc/os-release  是我进入容器后，查看当前版本信息</span>
<span class="line"># exit  表示的是退出容器</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-管理本地镜像" tabindex="-1"><a class="header-anchor" href="#_2-管理本地镜像"><span>2. 管理本地镜像</span></a></h2><h3 id="_2-1-查看镜像列表" tabindex="-1"><a class="header-anchor" href="#_2-1-查看镜像列表"><span>2.1 查看镜像列表</span></a></h3><p>使用 <code>docker images ls</code> 命令查看本地镜像：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> images <span class="token function">ls</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>显示信息包括：</p><ul><li>仓库名</li><li>标签</li><li>镜像ID（唯一标识）</li><li>创建时间</li><li>占用空间</li></ul><h3 id="_2-2-镜像体积" tabindex="-1"><a class="header-anchor" href="#_2-2-镜像体积"><span>2.2 镜像体积</span></a></h3><p>如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。 Docker Hub中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是保持压缩状态的，因此Docker Hub所显示的大小是网络传输中更关心的流量大小。</p><p>而<code>docker image ls</code>显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占用空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。</p><p>另外一个需要注意的问题是，<code>docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是<code>多层存储结构</code>，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用<code>Union FS</code>，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多</p><p>可以通过下面的命令查看镜像 容器 数据卷所占用的空间</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> system <span class="token function">df</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="虚悬镜像" tabindex="-1"><a class="header-anchor" href="#虚悬镜像"><span>虚悬镜像</span></a></h3><p>但给一个镜像没有仓库名，也没有标签，均为<code>&lt;none&gt;</code>.导致这种的情况的原因：<br> 由于进行维护，发布新的版本，当<code>docker pull</code>是就会出现这种情况。<code>docker build</code>也同样可以导致这种现象。<br> 由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为<code>&lt;none&gt;</code>的镜像。这类无标签镜像也成为虚悬镜像.<br> 可用下面的命令显示这类镜像</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">dangling</span><span class="token operator">=</span>true</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 一般，虚悬镜像都是去了存在的价值，可以所以删除</span></span>
<span class="line"><span class="token function">docker</span> image prune  <span class="token comment">#删除虚悬镜像</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="中间层镜像" tabindex="-1"><a class="header-anchor" href="#中间层镜像"><span>中间层镜像</span></a></h3><p>为了加速镜像构建、重复利用资源，Docker会利用中间层镜像。so：在使用一段时间后，可能会看到一些依赖的中间层镜像。默认的<code>docker image ls</code>列表只会显示顶层镜像。需要查看中间层镜像 用</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-a</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除</p><h3 id="列出部分镜像" tabindex="-1"><a class="header-anchor" href="#列出部分镜像"><span>列出部分镜像</span></a></h3><p>不加任何参数的情况下，docker image ls会列出所有顶级镜像，但只希望列出部分镜像。 <code>docker image ls</code> 有好几个参数可以选择<br> 1.根据仓库名列出镜像</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> image <span class="token function">ls</span> ubuntu</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.列出特定的某个镜像，</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> iamge <span class="token function">ls</span> ubuntu:18.04</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>除此，docker image ls 还支持强大的过滤参数 --filter 或者简写 -f</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 比如希望看到在mongo:3.2之后建立的镜像</span></span>
<span class="line"><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">since</span><span class="token operator">=</span>mongo:3.2</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 看某个位置之前的镜像 把since换成before</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 当镜像构建时，定义了LABEL，还可以通过LABEL来过滤</span></span>
<span class="line"><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">label</span><span class="token operator">=</span>com.example.version<span class="token operator">=</span><span class="token number">0.1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="以特定格式显示" tabindex="-1"><a class="header-anchor" href="#以特定格式显示"><span>以特定格式显示</span></a></h3><p><code>docker image ls</code> #输出一个完整的表格<br><code>docker image ls -q</code> 把所有镜像ID输出出来<br><code>--filter</code>配合<code>-q</code>产生出指定范围ID列表，然后送给另一个docker命令作为参数，从而针对这组实体成批的进行某种操作。<br> 当只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其他程序解析结果等，就用到Go的模块语法</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 直接输出只包含镜像ID和仓库名：</span></span>
<span class="line"><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;{{:ID}}:{{:Repository}}&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 以表格等距显示，并有标题行，自己定义列</span></span>
<span class="line"><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;table{{.ID}}<span class="token entity" title="\\t">\\t</span>{{.Repository}}<span class="token entity" title="\\t">\\t</span>{{.Tag}}&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="删除本地镜像" tabindex="-1"><a class="header-anchor" href="#删除本地镜像"><span>删除本地镜像</span></a></h2><ul><li>用ID、镜像名、摘要删除镜像</li><li>Untagged和Deleted</li><li>用docker image ls进行配合</li><li>Centos/RHEL需要注意的问题</li></ul><p>删除镜像的格式：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> image <span class="token function">rm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>镜像<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>镜像<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="用id、镜像名、摘要删除镜像" tabindex="-1"><a class="header-anchor" href="#用id、镜像名、摘要删除镜像"><span>用ID、镜像名、摘要删除镜像</span></a></h3><p>&lt;镜像&gt;可以是<code>镜像短ID</code>、<code>镜像长ID</code>、 <code>镜像名</code> 或者<code>镜像摘要</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> image <span class="token function">ls</span></span>
<span class="line"><span class="token function">docker</span> iamge <span class="token function">rm</span> 镜像ID</span>
<span class="line"><span class="token function">docker</span> image <span class="token function">rm</span> 镜像名</span>
<span class="line"><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">--digests</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">REPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE</span>
<span class="line">node                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        3 weeks ago         214 MB</span>
<span class="line">docker image rm node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="untagged和deleted" tabindex="-1"><a class="header-anchor" href="#untagged和deleted"><span>Untagged和Deleted</span></a></h3><p>镜像的删除行为分为两类：</p><ul><li><code>Untagged</code></li><li><code>Deleted</code><br> 镜像的唯一标识是<code>其ID</code>和<code>摘要</code>，而一个镜像可以有多个标签<br> 因此当我们使用<code>docker image rm</code>命令删除镜像的时候，实际上是在要求删除某个标签的镜像。<br> 所以首先需要做的是将满足我们要求的所有镜像标签都取消，这就是我们看到的 <code>Untagged</code> 的信息。<br> 因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 Delete 行为就不会发生。<br> 所以并非所有的 <code>docker image rm</code> 都会产生删除镜像的行为，有可能仅仅是取消了某个标签而已.<br> 当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为 。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。镜像的多层结构让镜像复用变动非常容易，因此很有可能某个其它镜像正依赖于当前镜像的某一层。这种情况，依旧不会触发删除该层的行为。直到没有任何层依赖当前层时，才会真实的删除当前层。这就是为什么，有时候会奇怪，为什么明明没有别的标签指向这个镜像，但是它还是存在的原因，也是为什么有时候会发现所删除的层数和自己 <code>docker pull</code> 看到的层数不一样的源。</li></ul><p>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。之前讲过，容器是以镜像为基础，再加一层容器存储层，组成这样的多层存储结构去运行的。因此该镜像如果被这个容器所依赖的，那么删除必然会导致故障。如果这些容器是不需要的，应该先将它们删除，然后再来删除镜像。</p><h3 id="用docker-image-ls命令进行配合" tabindex="-1"><a class="header-anchor" href="#用docker-image-ls命令进行配合"><span>用docker image ls命令进行配合</span></a></h3><p>像其他可以承接多个实体的命令一样，可以使用 <code>docker image ls -q</code>来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 如：我们需要删除所有仓库名为redis的镜像：  </span></span>
<span class="line"><span class="token function">docker</span> image <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token function">ls</span> <span class="token parameter variable">-q</span> redis<span class="token variable">)</span></span></span>
<span class="line"><span class="token comment"># 或者删除所有在mongo:3.2之前的镜像</span></span>
<span class="line"><span class="token function">docker</span> image <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> image <span class="token function">ls</span> <span class="token parameter variable">-q</span> <span class="token parameter variable">-f</span> <span class="token assign-left variable">before</span><span class="token operator">=</span>mongo:3.2<span class="token variable">)</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,62))])}const w=t(r,[["render",A],["__file","Docker系列学习-03.使用Docker镜像.html.vue"]]),L=JSON.parse('{"path":"/flinux/Kubernetes/Docker%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0/Docker%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0-03.%E4%BD%BF%E7%94%A8Docker%E9%95%9C%E5%83%8F.html","title":"03. 使用Docker镜像","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"1. 获取和使用镜像","slug":"_1-获取和使用镜像","link":"#_1-获取和使用镜像","children":[{"level":3,"title":"1.2 运行镜像","slug":"_1-2-运行镜像","link":"#_1-2-运行镜像","children":[]},{"level":3,"title":"1.3 运行镜像","slug":"_1-3-运行镜像","link":"#_1-3-运行镜像","children":[]}]},{"level":2,"title":"2. 管理本地镜像","slug":"_2-管理本地镜像","link":"#_2-管理本地镜像","children":[{"level":3,"title":"2.1 查看镜像列表","slug":"_2-1-查看镜像列表","link":"#_2-1-查看镜像列表","children":[]},{"level":3,"title":"2.2 镜像体积","slug":"_2-2-镜像体积","link":"#_2-2-镜像体积","children":[]},{"level":3,"title":"虚悬镜像","slug":"虚悬镜像","link":"#虚悬镜像","children":[]},{"level":3,"title":"中间层镜像","slug":"中间层镜像","link":"#中间层镜像","children":[]},{"level":3,"title":"列出部分镜像","slug":"列出部分镜像","link":"#列出部分镜像","children":[]},{"level":3,"title":"以特定格式显示","slug":"以特定格式显示","link":"#以特定格式显示","children":[]}]},{"level":2,"title":"删除本地镜像","slug":"删除本地镜像","link":"#删除本地镜像","children":[{"level":3,"title":"用ID、镜像名、摘要删除镜像","slug":"用id、镜像名、摘要删除镜像","link":"#用id、镜像名、摘要删除镜像","children":[]},{"level":3,"title":"Untagged和Deleted","slug":"untagged和deleted","link":"#untagged和deleted","children":[]},{"level":3,"title":"用docker image ls命令进行配合","slug":"用docker-image-ls命令进行配合","link":"#用docker-image-ls命令进行配合","children":[]}]}],"git":{"updatedTime":1709276200000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":2}]},"filePathRelative":"flinux/Kubernetes/Docker系列学习/Docker系列学习-03.使用Docker镜像.md"}');export{w as comp,L as data};
