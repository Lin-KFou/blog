import{_ as t,c as o,a as n,d as a,e as l,f as c,r as p,o as r,b as i}from"./app-BCC5ysrj.js";const d={},m={class:"vuepress-toc"},u={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},k={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"},x={class:"vuepress-toc-item"},E={class:"vuepress-toc-item"},D={class:"vuepress-toc-item"};function w(A,s){const e=p("router-link");return r(),o("div",null,[s[11]||(s[11]=n("h1",{id:"_04-利用commit理解镜像构成",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_04-利用commit理解镜像构成"},[n("span",null,"04. 利用commit理解镜像构成")])],-1)),n("nav",m,[n("ul",null,[n("li",u,[a(e,{to:"#简介"},{default:l(()=>s[0]||(s[0]=[i("简介")])),_:1})]),n("li",h,[a(e,{to:"#镜像构成"},{default:l(()=>s[1]||(s[1]=[i("镜像构成")])),_:1}),n("ul",null,[n("li",v,[a(e,{to:"#修改容器内容"},{default:l(()=>s[2]||(s[2]=[i("修改容器内容")])),_:1})]),n("li",k,[a(e,{to:"#保存为新镜像"},{default:l(()=>s[3]||(s[3]=[i("保存为新镜像")])),_:1})]),n("li",b,[a(e,{to:"#使用新镜像"},{default:l(()=>s[4]||(s[4]=[i("使用新镜像")])),_:1})])])]),n("li",g,[a(e,{to:"#commit-命令的局限性"},{default:l(()=>s[5]||(s[5]=[i("commit 命令的局限性")])),_:1}),n("ul",null,[n("li",f,[a(e,{to:"#_1-黑箱操作"},{default:l(()=>s[6]||(s[6]=[i("1. 黑箱操作")])),_:1})]),n("li",_,[a(e,{to:"#_2-镜像臃肿"},{default:l(()=>s[7]||(s[7]=[i("2. 镜像臃肿")])),_:1})])])]),n("li",x,[a(e,{to:"#最佳实践"},{default:l(()=>s[8]||(s[8]=[i("最佳实践")])),_:1}),n("ul",null,[n("li",E,[a(e,{to:"#使用-dockerfile"},{default:l(()=>s[9]||(s[9]=[i("使用 Dockerfile")])),_:1})]),n("li",D,[a(e,{to:"#commit-的适用场景"},{default:l(()=>s[10]||(s[10]=[i("commit 的适用场景")])),_:1})])])])])]),s[12]||(s[12]=c(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Docker 镜像采用分层存储架构,每一层都基于前一层进行增量修改。通过 <code>docker commit</code> 命令,我们可以:</p><ul><li>理解镜像的分层结构</li><li>将容器的修改保存为新镜像</li><li>了解镜像构建的基本原理</li></ul><blockquote><p><strong>注意:</strong> 实际环境中应该使用 Dockerfile 来构建镜像,而不是 commit 命令。</p></blockquote><h2 id="镜像构成" tabindex="-1"><a class="header-anchor" href="#镜像构成"><span>镜像构成</span></a></h2><p>Docker 镜像和容器都采用分层存储结构:</p><ul><li>镜像层: 只读层,用于存储应用程序和依赖</li><li>容器层: 可写层,运行时的文件变更都记录在这里</li></ul><p>下面通过定制一个 Web 服务器镜像来理解这个过程:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> webserver <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx</span>
<span class="line"><span class="token comment"># 启动 Nginx 容器</span></span>
<span class="line"><span class="token function">docker</span> container <span class="token function">ls</span>     <span class="token comment">#查看正在运行的容器</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>访问说明:</strong></p><ul><li>本机运行: 访问 <a href="http://localhost" target="_blank" rel="noopener noreferrer">http://localhost</a></li><li>虚拟机/云服务器: 使用对应的 IP 地址</li></ul><h3 id="修改容器内容" tabindex="-1"><a class="header-anchor" href="#修改容器内容"><span>修改容器内容</span></a></h3><p>使用 <code>docker exec</code> 命令进入容器并修改内容:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> webserver <span class="token function">bash</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;&lt;h1&gt;Welcome you come in my wanglh&lt;/h1&gt;&#39;</span> <span class="token operator">&gt;</span> /usr/share/nginx/html/index.html            <span class="token comment">#修改主页内容</span></span>
<span class="line"><span class="token builtin class-name">exit</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看修改内容</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">diff</span> webserver</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>命令说明:</strong></p><ul><li><code>-i</code>: 保持标准输入打开</li><li><code>-t</code>: 分配伪终端</li><li><code>bash</code>: 指定要运行的命令</li></ul><p><strong>文件变更:</strong></p><ul><li><code>C</code>: 表示文件被修改</li><li><code>A</code>: 表示新增文件</li><li><code>D</code>: 表示删除文件</li></ul><h3 id="保存为新镜像" tabindex="-1"><a class="header-anchor" href="#保存为新镜像"><span>保存为新镜像</span></a></h3><p>使用 <code>docker commit</code> 命令将修改后的容器保存为新镜像:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> commit <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>容器ID或容器名<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>仓库名<span class="token operator">&gt;</span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>标签<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> commit <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--author</span> <span class="token string">&quot;To wanglh &lt;wlh_richard@163.com&gt;&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line"><span class="token parameter variable">--message</span> <span class="token string">&quot;修改默认主页内容&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">webserver <span class="token punctuation">\\</span></span>
<span class="line">nginx:v2  <span class="token comment">#回车</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看新镜像</span></span>
<span class="line"><span class="token function">docker</span> image <span class="token function">ls</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看镜像历史</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">history</span> nginx:v2</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数说明:</strong></p><ul><li><code>--author</code>: 指定作者信息</li><li><code>--message</code>: 记录修改说明</li><li><code>webserver</code>: 容器名</li><li><code>nginx:v2</code>: 新镜像的名称和标签</li></ul><h3 id="使用新镜像" tabindex="-1"><a class="header-anchor" href="#使用新镜像"><span>使用新镜像</span></a></h3><p>基于新镜像启动容器:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> web2 <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">81</span>:80 nginx:v2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="commit-命令的局限性" tabindex="-1"><a class="header-anchor" href="#commit-命令的局限性"><span>commit 命令的局限性</span></a></h2><h3 id="_1-黑箱操作" tabindex="-1"><a class="header-anchor" href="#_1-黑箱操作"><span>1. 黑箱操作</span></a></h3><p>使用 commit 方式构建镜像的问题:</p><ul><li>操作过程不透明</li><li>无法重现完整的构建过程</li><li>维护困难,容易导致镜像不一致</li></ul><h3 id="_2-镜像臃肿" tabindex="-1"><a class="header-anchor" href="#_2-镜像臃肿"><span>2. 镜像臃肿</span></a></h3><p>容易导致镜像臃肿的原因:</p><ul><li>所有操作都会产生新的层</li><li>即使删除文件也会增加层大小</li><li>临时文件和缓存也会被保存</li></ul><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><h3 id="使用-dockerfile" tabindex="-1"><a class="header-anchor" href="#使用-dockerfile"><span>使用 Dockerfile</span></a></h3><ul><li>使用 Dockerfile 构建镜像</li><li>保证构建过程可重复</li><li>便于版本控制和维护</li></ul><h3 id="commit-的适用场景" tabindex="-1"><a class="header-anchor" href="#commit-的适用场景"><span>commit 的适用场景</span></a></h3><ul><li>调试环境保存</li><li>事故现场保存</li><li>临时测试用途</li></ul>`,39))])}const y=t(d,[["render",w],["__file","Docker系列学习-04.利用commit理解镜像构成.html.vue"]]),N=JSON.parse('{"path":"/flinux/Kubernetes/Docker%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0/Docker%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0-04.%E5%88%A9%E7%94%A8commit%E7%90%86%E8%A7%A3%E9%95%9C%E5%83%8F%E6%9E%84%E6%88%90.html","title":"04. 利用commit理解镜像构成","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"镜像构成","slug":"镜像构成","link":"#镜像构成","children":[{"level":3,"title":"修改容器内容","slug":"修改容器内容","link":"#修改容器内容","children":[]},{"level":3,"title":"保存为新镜像","slug":"保存为新镜像","link":"#保存为新镜像","children":[]},{"level":3,"title":"使用新镜像","slug":"使用新镜像","link":"#使用新镜像","children":[]}]},{"level":2,"title":"commit 命令的局限性","slug":"commit-命令的局限性","link":"#commit-命令的局限性","children":[{"level":3,"title":"1. 黑箱操作","slug":"_1-黑箱操作","link":"#_1-黑箱操作","children":[]},{"level":3,"title":"2. 镜像臃肿","slug":"_2-镜像臃肿","link":"#_2-镜像臃肿","children":[]}]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[{"level":3,"title":"使用 Dockerfile","slug":"使用-dockerfile","link":"#使用-dockerfile","children":[]},{"level":3,"title":"commit 的适用场景","slug":"commit-的适用场景","link":"#commit-的适用场景","children":[]}]}],"git":{"updatedTime":1709276200000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":2}]},"filePathRelative":"flinux/Kubernetes/Docker系列学习/Docker系列学习-04.利用commit理解镜像构成.md"}');export{y as comp,N as data};
