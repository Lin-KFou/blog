import{_ as l,c as i,a as s,d as e,e as p,f as o,r as c,o as r,b as t}from"./app-BCC5ysrj.js";const d={},u={class:"vuepress-toc"},k={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"};function g(y,n){const a=c("router-link");return r(),i("div",null,[n[5]||(n[5]=s("h1",{id:"_2-flask程序基本结构",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-flask程序基本结构"},[s("span",null,"2. Flask程序基本结构")])],-1)),s("nav",u,[s("ul",null,[s("li",k,[e(a,{to:"#初始化"},{default:p(()=>n[0]||(n[0]=[t("初始化")])),_:1})]),s("li",m,[e(a,{to:"#路由和视图函数"},{default:p(()=>n[1]||(n[1]=[t("路由和视图函数")])),_:1}),s("ul",null,[s("li",v,[e(a,{to:"#启动服务器"},{default:p(()=>n[2]||(n[2]=[t("启动服务器")])),_:1})]),s("li",b,[e(a,{to:"#完成的程序"},{default:p(()=>n[3]||(n[3]=[t("完成的程序")])),_:1})]),s("li",h,[e(a,{to:"#程序和请求上下文"},{default:p(()=>n[4]||(n[4]=[t("程序和请求上下文")])),_:1})])])])])]),n[6]||(n[6]=o(`<hr><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p>所有的flask程序都必须创建一个程序实例。程序实例是Flask类的对象，经常使用下面代码创建：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask</span>
<span class="line">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Flask类的构造函数只有一个必须指定的参数，即程序主模块或包的名称。大多数程序中。python的__name__变量就是所需要的值</p><blockquote><p>将构造函数的 name 参数传给 Flask 程序，这一点可能会让 Flask 开发新手心生迷惑。Flask用这个参数决定程序的根目录，以便稍后够找到相对于程序根目录的资源文件位置 简单的程序，上面的代码足够了</p></blockquote><h2 id="路由和视图函数" tabindex="-1"><a class="header-anchor" href="#路由和视图函数"><span>路由和视图函数</span></a></h2><p>客户端（web浏览器） --》 web服务器 --》 Flask程序实例。 这是一个流程，程序实例需要知道每个URL请求运行哪些代码，所以保存了一个URL到Python函数的映射关系。<br> 处理URL和函数之间关系的程序就是<code>路由</code>.</p><p>定义路由：使用程序实例提供的<code>app.route</code>修饰器，把修饰的函数注册为理由。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;&lt;h1&gt;Hello Worls&lt;/h1&gt;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>修饰器是 Python语言的标准特性，可以使用不同的方式修改函数的行为。惯常用法是使用修饰器把函数注册为事件的处理程序。</p></blockquote><p>前例把 <code>index()</code>函数注册为：程序<code>根地址</code>的处理程序。如果部署程序的服务器域名为www.example.com，在浏览器中访问<a href="http://www.example.com" target="_blank" rel="noopener noreferrer">http://www.example.com</a> 后，会<code>触发</code>服务器执行 <code>index()函数</code>。这个函数的<code>返回值</code>称为<code>响应</code>，是<code>客户端接收到</code>的内容。如果客户端是Web浏览器，<code>响应</code>就是<code>显示</code>给用户查看的文档。<br><strong>index() 这样的函数称为视图函数（view function）</strong><br> 视图函数返回的响应可以是包含HTML的简单字符串，也可以是复杂的表单.</p><p>Flask支持动态的URL，只需要在route修饰器中使用特殊的语法即可，定义动态route方法：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/user/&lt;name&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">user</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;&lt;h1&gt;Hello,%s!&lt;/h1&gt;&#39;</span> <span class="token operator">%</span>name</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 尖括号中的内容就是动态部分，任何能匹配静态部分的URL都会映射到这个路由上。</span></span>
<span class="line"><span class="token comment"># user(name):就是视图函数</span></span>
<span class="line"><span class="token comment"># Flask会将动态部分作为参数传入函数。</span></span>
<span class="line"><span class="token comment"># 路由中的动态部分默认使用字符串，不过也可以使用类型定义</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 比如：</span></span>
<span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">路由：/user/&lt;int:id&gt;</span>
<span class="line">只会匹配动态片段id为整数的URL。</span>
<span class="line">Flask支持在路由中使用int，float和path类型</span>
<span class="line">path类型也是：字符串，但不把斜线分隔符，而将其当做动态片段的一部分</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动服务器" tabindex="-1"><a class="header-anchor" href="#启动服务器"><span>启动服务器</span></a></h3><p>程序实例用run方法启动flask集成的web开发服务器</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># __name__== &#39;__main__&#39;是Python的惯常用法，在这里确保直接执行这个脚本时才启动开发Web服务器。如果这个脚本由其他脚本引入，程序假定父级脚本会启动不同的服务器，因此不会执行 app.run()</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器启动后，会进入轮询，等待并处理请求，直到程序停止。</p><p>有一些选项参数可被 app.run()函数接受用于设置web服务器的操作模式。<br> 比如激活调试器和重载程序，要启用调试模式，我们需要将debug设置为True</p><blockquote><p>Flask 提供的 Web 服务器不适合在生产环境中使用</p></blockquote><h3 id="完成的程序" tabindex="-1"><a class="header-anchor" href="#完成的程序"><span>完成的程序</span></a></h3><p>示例：2-01：<br><strong>hello.py</strong> 完整的Flask程序</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> FLask</span>
<span class="line">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;&lt;h1&gt;Hello World!&lt;/h1&gt;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：2-02<br><strong>hello.py</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask</span>
<span class="line">app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;&lt;h1&gt;Hello World!&lt;/h1&gt;&#39;</span></span>
<span class="line">    </span>
<span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/user/&lt;name&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">user</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment"># 这个函数名可随便，但需要便于维护</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;&lt;h1&gt;Hello %s&lt;/h1&gt;&#39;</span> <span class="token operator">%</span> name</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="程序和请求上下文" tabindex="-1"><a class="header-anchor" href="#程序和请求上下文"><span>程序和请求上下文</span></a></h3><p>Flask从客户端收到请求，让视图函数能访问一些对象，这样才能处理请求。<br> 请求对象，他封装了客户端发送的HTTP请求 要让视图函数能够访问请求对象，方法是：将其作为参数传入视图函数，不过将导致程序中的每个视图函数都增加一个参数。除了访问请求对象，如果试图函数在处理请求时还要访问其他对象，对程序而言，太过杂乱。</p><p>为避免大量可有可无的参数把视图函数弄乱，Flask使用<code>上下文</code>临时把某些对象变为全局可访问。有可上下文，既可以写出下面的视图函数：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> request</span>
<span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    user_agent <span class="token operator">=</span> request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;&lt;p&gt; You brwser is %s&lt;/p&gt;&#39;</span> <span class="token operator">%</span> user_agent</span>
<span class="line">    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flask中有两种上下文，程序上下文，请求上下文</p><table><thead><tr><th>变量名</th><th>上下文</th><th>说 明</th></tr></thead><tbody><tr><td>current_app</td><td>程序上下文</td><td>当前激活程序的程序实例</td></tr><tr><td>g</td><td>程序上下文</td><td>处理请求时用作临时存储的对象，每次请求都会重设这个变量</td></tr><tr><td>request</td><td>请求上下文</td><td>请求对象，封装了客户端发出的HTTP请求中的内容</td></tr><tr><td>session</td><td>请求上下文</td><td>用户会话，用于存储请求之间“记住”的值的词典</td></tr></tbody></table><h4 id="请求调度" tabindex="-1"><a class="header-anchor" href="#请求调度"><span>请求调度</span></a></h4><p>程序收到客户端发来的请求时，要找到处理该请求的视图函数。为了完成这个任务，Flask会在程序的URL映射中查找请求的URL。URL映射是URL和视图函数之间的对应关系。Flask使用<code>app.route</code>修饰器或者非修饰器形式的<code>app.add_url_rule()</code> 生成映射</p><h4 id="响应" tabindex="-1"><a class="header-anchor" href="#响应"><span>响应</span></a></h4><p>Flask调用视图函数，会将其返回值作为相应的内容。<br> 响应就是一个简单的字符串，作为HTML页面回送到浏览器<br> HTTP响应中一个很重要的就是：状态码<br> Flask默认设为：200， 这个代码表明请求被成功处理</p><p>当需要视图函数返回的不同的状态码，可以把数字代码作为第二个返回值，添加到响应文本之后。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 当需要视图函数返回一个400状态码，表示请求无效：</span></span>
<span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;&lt;h1&gt;Bad Request&lt;/h1&gt;&#39;</span><span class="token punctuation">,</span><span class="token number">400</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图函数返回的相应可接受第三个参数，是一个由首部（header）组成的字典，可以添加到HTTP响应中。</p><p>当不想返回由1个，2个或3个值组成的元组，Flask视图函数还可以返回Response对象。<br><code>make_response()</code>可接受1个，2个或3个参数（和视图函数的返回值一样），并返回一个Response对象。 有时需要在视图函数中进行对象的转换，然后再相应对象上调用各种方法，进一步设置相应。<br> 有一种名为<code>重定向</code>的特殊响应类型。这种响应没有相关页面文档，只会向告诉浏览器一个新地址用以加载新页面，重定向经常在web表单中使用。<br> 重定向经常使用302状态码表示， 指向的地址有location首都提供。重定向响应可以使用3个值形式的返回值生成，可在Response对象中设定。</p><p>Flask提供了<code>redirect()</code>辅助函数，来生成这种响应：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> redirect</span>
<span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种特殊的相应有abort函数生成，用于处理错误。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">当URL中动态参数<span class="token builtin">id</span>对应的用户不存在，返回<span class="token number">404</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> flask <span class="token keyword">import</span> abort</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/user/&lt;id&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">get_user</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    user <span class="token operator">=</span> load_user<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> user<span class="token punctuation">:</span></span>
<span class="line">        abort<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&#39;&lt;h1&gt;Hello, %s&lt;/h1&gt;&#39;</span> <span class="token operator">%</span> user<span class="token punctuation">.</span>name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>abort 不会把控制权交还给调用它的函数，而是抛出异常把控制权交给 Web 服务器。</p></blockquote>`,44))])}const f=l(d,[["render",g],["__file","chapt-2.html.vue"]]),w=JSON.parse('{"path":"/fpython/htmlsystem/Flask/chapt-2.html","title":"2. Flask程序基本结构","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":2,"title":"路由和视图函数","slug":"路由和视图函数","link":"#路由和视图函数","children":[{"level":3,"title":"启动服务器","slug":"启动服务器","link":"#启动服务器","children":[]},{"level":3,"title":"完成的程序","slug":"完成的程序","link":"#完成的程序","children":[]},{"level":3,"title":"程序和请求上下文","slug":"程序和请求上下文","link":"#程序和请求上下文","children":[]}]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/htmlsystem/Flask/chapt-2.md"}');export{f as comp,w as data};
