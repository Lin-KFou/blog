import{_ as s,c as a,f as e,o as p}from"./app-BCC5ysrj.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_6-1-视图基础" tabindex="-1"><a class="header-anchor" href="#_6-1-视图基础"><span>6.1 视图基础</span></a></h1><ul><li><a href="#61-%E8%A7%86%E5%9B%BE%E5%9F%BA%E7%A1%80">6.1 视图基础</a><ul><li><a href="#611-%E7%90%86%E8%A7%A3urlpy%E6%96%87%E4%BB%B6%E7%9A%84%E6%B3%A8%E9%87%8A">6.1.1 理解<code>url.py</code>文件的注释</a><ul><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li><li><a href="#612-%E8%A7%86%E5%9B%BE%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8E%E7%9B%B8%E5%BA%94%E5%AF%B9%E8%B1%A1">6.1.2 视图的请求与相应对象</a><ul><li><a href="#httprequest">HttpRequest</a></li><li><a href="#httpresponse">HttpResponse</a></li></ul></li><li><a href="#613-%E5%9F%BA%E4%BA%8E%E7%B1%BB%E7%9A%84%E8%A7%86%E5%9B%BE">6.1.3 基于类的视图</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%9A%84%E7%B1%BB%E8%A7%86%E5%9B%BE%E5%AE%9A%E4%B9%89">简单的类视图定义</a><ul><li><a href="#%E5%85%B7%E4%BD%93%E4%BB%A3%E7%A0%81">具体代码</a></li></ul></li><li><a href="#%E8%AE%BE%E7%BD%AE%E7%B1%BB%E5%B1%9E%E6%80%A7">设置类属性</a></li><li><a href="#%E5%88%A9%E7%94%A8mixin%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8">利用Mixin实现代码复用</a><ul><li><a href="#%E6%80%BB%E7%BB%93-1">总结</a></li></ul></li></ul></li><li><a href="#614-%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1">6.1.4 动态路由</a><ul><li><a href="#%E4%BD%BF%E7%94%A8path%E9%85%8D%E7%BD%AE%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1">使用path配置动态路由</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E6%8D%A2%E5%99%A8">自定义转换器</a></li><li><a href="#%E5%B8%A6%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E7%9A%84%E8%A7%86%E5%9B%BE">带默认参数的视图</a></li><li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">正则表达式</a></li></ul></li><li><a href="#615-%E7%BB%99post%E5%BA%94%E7%94%A8%E6%B7%BB%E5%8A%A0%E8%A7%86%E5%9B%BE">6.1.5 给post应用添加视图</a><ul><li><a href="#%E5%AE%9E%E7%8E%B0topic%E5%88%97%E8%A1%A8%E8%A7%86%E5%9B%BE">实现Topic列表视图</a></li><li><a href="#%E5%AE%9E%E7%8E%B0topic%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E4%BF%A1%E6%81%AF%E8%A7%86%E5%9B%BE">实现Topic实例对象信息视图</a></li><li><a href="#%E7%BB%99topic%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%9A%84%E8%A7%86%E5%9B%BE">给Topic实例对象添加评论的视图</a></li></ul></li></ul></li></ul><hr><ul><li>一般视图都会放在view.py文件中</li><li>简单的例子</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">hello_django_bbs</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    html <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;hello django&lt;/h1&gt;&#39;</span></span>
<span class="line">    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>html<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">- 引用HttpResponse，作为视图的返回类型</span>
<span class="line">- 视图函数声明，当前的函数名为hello_django_bbs，仅仅描述自身的用途</span>
<span class="line">- 视图函数的第一个参数：是HttpRequest类型的对象，通常定义为request，Django没有要求，约定俗成</span>
<span class="line">- 函数内部定义业务处理逻辑</span>
<span class="line">- 视图最后返回一个HttpResponse对象，标记一次Web请求的结束</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在管理后台进行映射（my_bbs/my_bbs/urls.py）文件中配置URL到视图的映射</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin</span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path</span>
<span class="line"><span class="token keyword">from</span> post <span class="token keyword">import</span> views   <span class="token comment"># 导入post的views视图函数</span></span>
<span class="line"></span>
<span class="line">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    path<span class="token punctuation">(</span><span class="token string">&#39;admin/&#39;</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    path<span class="token punctuation">(</span><span class="token string">&#39;post/hello/&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>hello_django_bbs<span class="token punctuation">)</span> <span class="token comment"># 注册post应用的视图函数</span></span>
<span class="line"><span class="token punctuation">]</span>   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://oss.moniter.top/blog/202210/20220927111226.png" alt="hello_django_bbs"></p><h2 id="_6-1-1-理解url-py文件的注释" tabindex="-1"><a class="header-anchor" href="#_6-1-1-理解url-py文件的注释"><span>6.1.1 理解<code>url.py</code>文件的注释</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">my_bbs URL Configuration</span>
<span class="line"></span>
<span class="line">The \`urlpatterns\` list routes URLs to views. For more information please see:</span>
<span class="line">    https://docs.djangoproject.com/en/4.0/topics/http/urls/</span>
<span class="line">Examples:</span>
<span class="line">Function views  # 针对基于函数的视图</span>
<span class="line">    1. Add an import:  from my_app import views</span>
<span class="line">    2. Add a URL to urlpatterns:  path(&#39;&#39;, views.home, name=&#39;home&#39;)</span>
<span class="line">Class-based views  # 针对基于类的视图</span>
<span class="line">    1. Add an import:  from other_app.views import Home</span>
<span class="line">    2. Add a URL to urlpatterns:  path(&#39;&#39;, Home.as_view(), name=&#39;home&#39;)</span>
<span class="line">Including another URLconf  # 针对项目中存在多APP的场景</span>
<span class="line">    1. Import the include() function: from django.urls import include, path</span>
<span class="line">    2. Add a URL to urlpatterns:  path(&#39;blog/&#39;, include(&#39;blog.urls&#39;))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>针对基于函数的视图</p><ul><li>需要先将视图定义文件引入：import</li><li>利用path定义URL和视图的关系 <ul><li>path函数传递两个参数，第一个参数定义URL的匹配规则，第二个参数定义映射的视图函数，都是必填项</li></ul></li></ul></li><li><p>针对基于类的视图</p><ul><li>需要现将类对象引入</li><li>使用类似方法配置URL和视图类的关系</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> other_app<span class="token punctuation">.</span>views <span class="token keyword">import</span> Home</span>
<span class="line">path<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>Home<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;home&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>针对项目中存在多App的场景</p><ul><li>利用include实现App与项目的解耦</li><li>include将App的URL配置文件导入，就可以实现根据不同的App来分发请求，以实现每个App自己管理自己的视图与URL映射</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token punctuation">,</span> path</span>
<span class="line">path<span class="token punctuation">(</span><span class="token string">&#39;blog/&#39;</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">&#39;blog.urls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>上面的URL映射就可以改为</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># my_bbs/post/urls.py</span></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path</span>
<span class="line"><span class="token keyword">from</span> post <span class="token keyword">import</span> views</span>
<span class="line"></span>
<span class="line">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    path<span class="token punctuation">(</span><span class="token string">&#39;hello/&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>hello_django_bbs<span class="token punctuation">)</span> <span class="token comment"># 注册post应用的视图函数</span></span>
<span class="line"><span class="token punctuation">]</span>   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># my_bbs/my_bbs/urls.py</span></span>
<span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot;my_bbs URL Configuration</span>
<span class="line"></span>
<span class="line">The \`urlpatterns\` list routes URLs to views. For more information please see:</span>
<span class="line">    https://docs.djangoproject.com/en/4.0/topics/http/urls/</span>
<span class="line">Examples:</span>
<span class="line">Function views</span>
<span class="line">    1. Add an import:  from my_app import views</span>
<span class="line">    2. Add a URL to urlpatterns:  path(&#39;&#39;, views.home, name=&#39;home&#39;)</span>
<span class="line">Class-based views</span>
<span class="line">    1. Add an import:  from other_app.views import Home</span>
<span class="line">    2. Add a URL to urlpatterns:  path(&#39;&#39;, Home.as_view(), name=&#39;home&#39;)</span>
<span class="line">Including another URLconf</span>
<span class="line">    1. Import the include() function: from django.urls import include, path</span>
<span class="line">    2. Add a URL to urlpatterns:  path(&#39;blog/&#39;, include(&#39;blog.urls&#39;))</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin</span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token punctuation">,</span> path</span>
<span class="line"></span>
<span class="line">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    path<span class="token punctuation">(</span><span class="token string">&#39;post/&#39;</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span><span class="token string">&#39;post.urls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>得到的结果 <img src="https://oss.moniter.top/blog/202210/20220927111226.png" alt="hello_django_bbs"></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>在多应用App的项目中，在每个App下面创建urls.py文件，然后通过include注册到整个项目中，方便管理，而且结构清晰，便于维护</p><h2 id="_6-1-2-视图的请求与相应对象" tabindex="-1"><a class="header-anchor" href="#_6-1-2-视图的请求与相应对象"><span>6.1.2 视图的请求与相应对象</span></a></h2><ul><li>请求与返回涉及两个对象 <ul><li>HttpRequest：请求对象</li><li>HttpResponse：相应对象</li></ul></li></ul><h3 id="httprequest" tabindex="-1"><a class="header-anchor" href="#httprequest"><span>HttpRequest</span></a></h3><ul><li>此对象定义域：django/http/request.py文件中</li><li>请求的时候，Django会创建一个携带有请求元数据的HttpRequest对象，传递给视图函数的第一个参数</li><li>视图函数的处理逻辑：根据携带的元数据作出相应的动作</li><li>定义的属性 <ul><li>method：<code>字符串类型</code>的值，标识请求所使用的HTTP方法，如GET，POST，PUT等 <ul><li>对于同一个URL，不管使用的是GET还是POST都会路由到同一个视图函数去处理</li><li>装饰器：<code>@csrf_exempt</code>：POST方法和GET方法会获取相同的响应</li><li>指定请求方法需要使用：<code>@require_http_methods</code>装饰器指定视图可以接受的方法</li><li>简化：提供了几个简单的装饰器指定可以接受的请求方法 <ul><li>require_GET或require_POST等</li></ul></li></ul></li><li>scheme：被<code>@property</code>装饰的方法，返回<code>字符串类型</code>的值 <ul><li>可以被当做属性直接调用：<code>request.scheme</code>。标识请求的协议类型（http/https）</li></ul></li><li>path：<code>字符串类型</code>，返回当前请求页面的路径，但不包括协议类型或域名</li><li>GET：<code>类字典对象</code>，包括<strong>GET请求的所有参数</strong>，GET属性中的<strong>键和值</strong>都是字符串类型 <ul><li>获取参数的方法有两种 <ul><li><code>request.GET[&#39;a&#39;]</code></li><li><code>request.GET.get(&#39;b&#39;,0)</code></li></ul></li><li>GET的属性不是<strong>Python的字典类型</strong>，实际上是一个<strong>QuerySet(django.http.QueryDict)<strong>类型的实例，且是</strong>只读</strong>的，修改此数据，需要通过<code>copy</code>方法获取副本并在副本上进行修改</li></ul></li><li>POST：与GET类型 <blockquote><p>在POST方法上传文件时，文件相关的信息不会保存在POST中，而是保存在FILES属性中</p></blockquote></li><li>FILES</li><li>META</li><li>user</li></ul></li></ul><p>具体介绍查看文档：<a href="https://weread.qq.com/web/reader/6e4329007193f1e66e43129k341323f021e34173cb3824c" target="_blank" rel="noopener noreferrer">https://weread.qq.com/web/reader/6e4329007193f1e66e43129k341323f021e34173cb3824c</a></p><h3 id="httpresponse" tabindex="-1"><a class="header-anchor" href="#httpresponse"><span>HttpResponse</span></a></h3><p>具体介绍查看文档：<a href="https://weread.qq.com/web/reader/6e4329007193f1e66e43129k341323f021e34173cb3824c" target="_blank" rel="noopener noreferrer">https://weread.qq.com/web/reader/6e4329007193f1e66e43129k341323f021e34173cb3824c</a></p><ul><li>常用的HttpResponse子类对象 <ul><li>JsonResponse</li><li>HttpResponseRedirect</li><li>HttpResponseNotFound</li></ul></li></ul><h2 id="_6-1-3-基于类的视图" tabindex="-1"><a class="header-anchor" href="#_6-1-3-基于类的视图"><span>6.1.3 基于类的视图</span></a></h2><ul><li>类视图的特点：可以利用不同的实例方法相应不同的HTTP请求方法（GET，POST）</li><li>可以利用<strong>面向对象</strong>的技术将代码分解为可重用的组件</li></ul><h3 id="简单的类视图定义" tabindex="-1"><a class="header-anchor" href="#简单的类视图定义"><span>简单的类视图定义</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> method_decorator</span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views <span class="token keyword">import</span> View</span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>csrf <span class="token keyword">import</span> csrf_exempt</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">FirstView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    html <span class="token operator">=</span> <span class="token string">&#39;(%s) Hello Django BBS&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>html <span class="token operator">%</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>html <span class="token operator">%</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token decorator annotation punctuation">@method_decorator</span><span class="token punctuation">(</span>csrf_exempt<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span>FirstView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>FirstView 继承自 View，它是所有基于类视图的基类（View）</p></li><li><p>FirstView 定义了get和post方法</p></li><li><p>并且重写了父类的dispatch方法，dispatch根据HTTP类型实现请求分发：</p><ul><li>如果是<code>GET请求</code>，分发给<code>get</code></li><li>如果是<code>POST请求</code>，分发给<code>post</code></li></ul></li><li><p>如果View中没有实现对应请求类型的方法，则会返回 <code>HttpResponseNotAllowed</code></p></li><li><p>类对象中定义的方法与普通的函数并不相同，所以，应用于函数的装饰器不能直接应用到类方法上，需要将它转换为类方法的装饰器。</p><ul><li>在dispatch方法上添加了<code>@method_decorator</code></li><li>此装饰器可以将<strong>函数装饰器</strong>转换为<strong>类方法装饰器</strong>, <code>csrf_exempt</code>装饰器可以被用在<strong>类方法</strong>上</li></ul></li><li><p>基于类的视图，在<code>urls.py</code>中定义路由和视图的时候，需要用到<strong>View提供的<code>as_view()</code>方法完成URL的定义</strong></p></li></ul><h4 id="具体代码" tabindex="-1"><a class="header-anchor" href="#具体代码"><span>具体代码</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># my_bbs/post/views.py</span></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render</span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse</span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> method_decorator</span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views <span class="token keyword">import</span> View</span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>csrf <span class="token keyword">import</span> csrf_exempt</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">FirstView</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    html <span class="token operator">=</span> <span class="token string">&#39;(%s) Hello Django BBS&#39;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>html <span class="token operator">%</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>html <span class="token operator">%</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token decorator annotation punctuation">@method_decorator</span><span class="token punctuation">(</span>csrf_exempt<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span>FirstView<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># my_bbs/post/urls.py</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path</span>
<span class="line"><span class="token keyword">from</span> post<span class="token punctuation">.</span>views <span class="token keyword">import</span> FirstView</span>
<span class="line"></span>
<span class="line">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    path<span class="token punctuation">(</span><span class="token string">&#39;hello/&#39;</span><span class="token punctuation">,</span>FirstView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 注册post应用的视图函数</span></span>
<span class="line"><span class="token punctuation">]</span>   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># my_bbs/my_bbs/urls.py</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin</span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> include<span class="token punctuation">,</span> path</span>
<span class="line"></span>
<span class="line">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    path<span class="token punctuation">(</span><span class="token string">&#39;admin/&#39;</span><span class="token punctuation">,</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    path<span class="token punctuation">(</span><span class="token string">&#39;post/&#39;</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span><span class="token string">&#39;post.urls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 基于不同APP的urls</span></span>
<span class="line"><span class="token punctuation">]</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果</strong><img src="https://oss.moniter.top/blog/202210/20220927145153.png" alt="基于类的视图-简单案例"></p><h3 id="设置类属性" tabindex="-1"><a class="header-anchor" href="#设置类属性"><span>设置类属性</span></a></h3><ul><li>FirstView中定义了一个类属性：html <ul><li>常用的设计：将公用的部分放在类属性中，所有的方法都能看到</li></ul></li></ul><p>要修改类的属性由两种办法</p><ul><li>使用Python语言的特性，实现子类并覆盖父类中的属性</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SecondsView</span><span class="token punctuation">(</span>FirstView<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">  html <span class="token operator">=</span> <span class="token string">&quot;Seconds ....&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>直接在配置URL的时候在<code>as_view</code>方法中指定类属性，简单直接 <ul><li><code>as_view</code>中设置的类属性只在URL第一次导入时设置</li></ul></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">path<span class="token punctuation">(</span><span class="token string">&#39;second_hello_class/&#39;</span><span class="token punctuation">,</span> FirstView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span>html<span class="token operator">=</span><span class="token string">&quot;Seconds: (%s) Hello Django Seconds&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="利用mixin实现代码复用" tabindex="-1"><a class="header-anchor" href="#利用mixin实现代码复用"><span>利用Mixin实现代码复用</span></a></h3><ul><li>Mixin就是一个Python对象，但这个类不一定需要明确的语义，主要目的：实现代码的复用</li><li>一个视图类可以继承多个Mixin，但只能继承一个View，写法上通常会把Mixin写在View的前面</li><li>例子：将FirstView中重写的<code>dispatch</code>方法放到<code>Mixin</code>里，并加入<strong>计时装饰器</strong></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># post/views.py</span></span>
<span class="line"><span class="token keyword">import</span> time</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">exec_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        res <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%ss elapsed for %s&#39;</span> <span class="token operator">%</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> res</span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ExecTimeMixin</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token decorator annotation punctuation">@method_decorator</span><span class="token punctuation">(</span>csrf_exempt<span class="token punctuation">)</span></span>
<span class="line">  <span class="token decorator annotation punctuation">@method_decorator</span><span class="token punctuation">(</span>exec_time<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span>ExecTimeMixin<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">FirstView</span><span class="token punctuation">(</span>ExecTimeMixin<span class="token punctuation">,</span> View<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">  html <span class="token operator">=</span> <span class="token string">&#39;(%s) Hello Django BBS&#39;</span></span>
<span class="line">  <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>html <span class="token operator">%</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>html <span class="token operator">%</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用了ExecTimeMixin重写dispatch之后，在FirstView中不需要在进行重写dispatch</li><li>Django默认定义了一些Mixin简化开发： <ul><li>LoginRequiredMixin验证当前请求必须是登录用户，否则禁止访问或重定向到登录页</li></ul></li></ul><p><img src="https://oss.moniter.top/blog/202210/20220927152433.png" alt="Mixin实现代码复用"></p><h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h4><ul><li>基于函数的视图：FBV</li><li>基于类的视图：CBV</li></ul><h2 id="_6-1-4-动态路由" tabindex="-1"><a class="header-anchor" href="#_6-1-4-动态路由"><span>6.1.4 动态路由</span></a></h2><ul><li>视图函数也是普通的Python函数，所以可以定义额外的参数</li><li>对于视图函数中的额其他参数，如何传值</li><li>需要引入动态路由的概念（URL不是固定的，URL中包含了传递给视图的参数变量）</li><li>之前定义的视图映射的URL都可以被称作静态路由，即URL是固定的。</li><li>配置动态路由需要用到<code>path函数</code>，区别在于：URL配置的语法上</li></ul><h3 id="使用path配置动态路由" tabindex="-1"><a class="header-anchor" href="#使用path配置动态路由"><span>使用path配置动态路由</span></a></h3><ul><li>简单接受其他参数的视图示例</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">dynamic_hello</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">  html <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;(%s) Hello&lt;/h1&gt;&#39;</span></span>
<span class="line">  <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>html <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">&#39;%s-%s-%s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>为这些参数有具体的含义，所以，它们也应该有具体的类型</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># urls.py</span></span>
<span class="line">path<span class="token punctuation">(</span><span class="token string">&#39;dynamic/&lt;int:year&gt;/&lt;int:month&gt;/&lt;int:day&gt;/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>dynamic_hello<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://oss.moniter.top/blog/202210/20220927155502.png" alt="简单接收参数的视图"></p><ul><li><p>之所以需要定义转换器，有两个原因：</p><ul><li>第一是可以将捕获到的字符值转换为对应的类型</li><li>第二是对URL中传值的一种限制，避免视图处理出错</li></ul></li><li><p>Django还提供了其他的转换器：str, slug, uuid, path 具体文档信息：<a href="https://weread.qq.com/web/reader/6e4329007193f1e66e43129k341323f021e34173cb3824c" target="_blank" rel="noopener noreferrer">https://weread.qq.com/web/reader/6e4329007193f1e66e43129k341323f021e34173cb3824c</a></p></li></ul><h3 id="自定义转换器" tabindex="-1"><a class="header-anchor" href="#自定义转换器"><span>自定义转换器</span></a></h3><ul><li><p>内置的转换器都定义于：<code>django/urls/converters.py</code></p></li><li><p>它包含三个部分，也是每一个转换器都需要实现的三要素。</p><ul><li>（1）regex：字符串类型的类属性，根据属性名可以猜测，这是一个正则表达式，用于匹配URL对应位置的参数值。</li><li>（2）to_python：参数value是从URL中匹配到的参数值，通过强转成对应的类型传递给视图函数。需要注意，这里可能因为强转抛出ValueError。</li><li>（3）to_url：将一个Python类型的对象转换为字符串，to_python的反向操作</li></ul></li><li><p>之前的例子：dynamic_hello存在的不足，月份的区间参数</p></li><li><p>自定义一个转换器捕获一个正确的月份</p></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>converters <span class="token keyword">import</span> IntConverter</span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MonthConverter</span><span class="token punctuation">(</span>InConverter<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">  regex <span class="token operator">=</span> <span class="token string">&#39;0?[1-9]|1[0-2]&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>定义好转换器之后还需要注册才能使用, 在post应用的urls.py文件中注册</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># urls.py</span></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> register_converter</span>
<span class="line"><span class="token keyword">from</span> post<span class="token punctuation">.</span>views <span class="token keyword">import</span> MonthConverter</span>
<span class="line">register_converter<span class="token punctuation">(</span>MonthConverter<span class="token punctuation">,</span><span class="token string">&#39;mth&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 将转换器的类型名设定为mth，之后需要重新定义dynamic_hello视图的urls</span></span>
<span class="line">path<span class="token punctuation">(</span><span class="token string">&#39;dymmmic/&lt;int:year&gt;/&lt;mth:month&gt;/&lt;int:day&gt;/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>dynamic_hello<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://oss.moniter.top/blog/202210/20220927160919.png" alt="dymmmic_mth_404"><img src="https://oss.moniter.top/blog/202210/20220927160954.png" alt="dymmmic_mth_200"></p><h3 id="带默认参数的视图" tabindex="-1"><a class="header-anchor" href="#带默认参数的视图"><span>带默认参数的视图</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># views.py</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">dynamic_hello</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">  html <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;(%s) Hello&lt;/h1&gt;&#39;</span></span>
<span class="line">  <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>html <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">&#39;%s-%s-%s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># urls.py</span></span>
<span class="line">path<span class="token punctuation">(</span><span class="token string">&#39;dymmmic/&lt;int:year&gt;/&lt;mth:month&gt;/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>dynamic_hello<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">path<span class="token punctuation">(</span><span class="token string">&#39;dymmmic/&lt;int:year&gt;/&lt;mth:month&gt;/&lt;int:day&gt;/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>dynamic_hello<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://oss.moniter.top/blog/202210/20220927161329.png" alt="带默认参数"></p><h3 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h3><ul><li>正则表达式命名分组的语法：<code>(?P&lt;name&gt;pattern)</code><ul><li>name：分组名</li><li>pattern：匹配模式</li><li>引用分组可以使用分组名，也可以使用分组编号</li></ul></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> re</span>
<span class="line">r <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&#39;(?P&lt;year&gt;[0-9]{4})&#39;</span><span class="token punctuation">)</span></span>
<span class="line">s <span class="token operator">=</span> r<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;2022&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">&#39;year&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2022</span></span>
<span class="line"><span class="token comment"># 2022</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>path：定义于 django/urls/conf.py文件中</li><li>基于此，就可以通过re_path，使用命名分组来定义URL</li><li>使用re_path的理由是path方法和转换器都不能满足需求。其使用方法与path类似</li><li>例子: 将dynamic_hello的URL模式使用re_path重新定义</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># urls.py</span></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> re_path</span>
<span class="line">re_path<span class="token punctuation">(</span><span class="token string">&#39;re_dynamic/(?P&lt;year&gt;[0-9]{4})/(?P&lt;month&gt;0[1-9]|1[0-2])/(?P&lt;day&gt;[0-9]{2})&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>dynamic_hello<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：当使用re_path的时候，在实际应用中，path自定义选择器无法使用的问题</p></blockquote><h2 id="_6-1-5-给post应用添加视图" tabindex="-1"><a class="header-anchor" href="#_6-1-5-给post应用添加视图"><span>6.1.5 给post应用添加视图</span></a></h2><ul><li>查看当前站点中所有的Topic列表信息</li><li>查看单个Topic的详细信息</li><li>给某一个Topic添加评论等</li></ul><h3 id="实现topic列表视图" tabindex="-1"><a class="header-anchor" href="#实现topic列表视图"><span>实现Topic列表视图</span></a></h3><ul><li>这里不涉及渲染，而是直接返回json格式的数据（JsonResponse）</li></ul><ol><li><p>创建存储业务处理逻辑的文件post/post_service.py，并实现构造Topic实例对象基本信息的业务逻辑</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># post/post_service.py</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">build_topic_base_info</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    构造Topic基本信息</span>
<span class="line">    :param topic</span>
<span class="line">    :return </span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span>topic<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;title&#39;</span><span class="token punctuation">:</span> topic<span class="token punctuation">.</span>title<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> topic<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;created_time&#39;</span><span class="token punctuation">:</span> topic<span class="token punctuation">.</span>created_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在post/views.py文件中定义Topic列表信息的视图函数</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># post/views.py</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">topic_list_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    话题列表</span>
<span class="line">    :param: request:</span>
<span class="line">    :return:</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    topic_qs <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    result <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;count&quot;</span><span class="token punctuation">:</span> topic_qs<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;info&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>build_topic_base_info<span class="token punctuation">(</span>topic<span class="token punctuation">)</span> <span class="token keyword">for</span> topic <span class="token keyword">in</span> topic_qs<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>添加视图路由</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># post/urls.py</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> register_converter</span>
<span class="line"><span class="token keyword">from</span> post<span class="token punctuation">.</span>views <span class="token keyword">import</span> FirstView<span class="token punctuation">,</span> MonthConverter</span>
<span class="line"><span class="token keyword">from</span> post <span class="token keyword">import</span> views</span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> re_path</span>
<span class="line">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token comment"># path(&#39;hello/&#39;,FirstView.as_view()), # 注册post应用的视图函数</span></span>
<span class="line">    <span class="token comment"># path(&#39;dynamic/&lt;int:year&gt;/&lt;int:month&gt;/&lt;int:day&gt;/&#39;, views.dynamic_hello),</span></span>
<span class="line">    <span class="token comment"># path(&#39;dymmmic/&lt;int:year&gt;/&lt;mth:month&gt;/&#39;, views.dynamic_hello),</span></span>
<span class="line">    <span class="token comment"># path(&#39;dymmmic/&lt;int:year&gt;/&lt;mth:month&gt;/&lt;int:day&gt;/&#39;, views.dynamic_hello),</span></span>
<span class="line">    <span class="token comment"># re_path(&#39;re_dynamic/(?P&lt;year&gt;[0-9]{4})/(?P&lt;month&gt;0[1-9]|1[0-2])/(?P&lt;day&gt;[0-9]{2})/&#39;, views.dynamic_hello),</span></span>
<span class="line">    path<span class="token punctuation">(</span><span class="token string">&#39;topiclist/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>topic_list_view<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span>   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="实现topic实例对象信息视图" tabindex="-1"><a class="header-anchor" href="#实现topic实例对象信息视图"><span>实现Topic实例对象信息视图</span></a></h3><ul><li>有了Topic的列表信息，根据列表信息中提供的id（Topic主键字段）查看每一个Topic的详细信息</li><li>思考思路 <ul><li>每一个Topic都有可能会有多个Comment，展示一个Topic的详细信息，应该吧Comment也展示出来，所需需要构造一个Comment信息的方法</li></ul></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># post/post_service.py</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">build_comment_info</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    构造Comment信息</span>
<span class="line">    :param comment:</span>
<span class="line">    :return:</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span> comment<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;content&#39;</span><span class="token punctuation">:</span> comment<span class="token punctuation">.</span>content<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;up&#39;</span><span class="token punctuation">:</span> comment<span class="token punctuation">.</span>up<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;down&#39;</span><span class="token punctuation">:</span> comment<span class="token punctuation">.</span>down<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;created_time&#39;</span><span class="token punctuation">:</span> comment<span class="token punctuation">.</span>created_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;last_modified&#39;</span><span class="token punctuation">:</span> comment<span class="token punctuation">.</span>last_modified<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">from</span> post<span class="token punctuation">.</span>models <span class="token keyword">import</span> Comment</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">build_topic_detail_info</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    构造Topic详细信息</span>
<span class="line">    :oaram topic:</span>
<span class="line">    :return:</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    comment_qs <span class="token operator">=</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>topic<span class="token operator">=</span>topic<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> topic<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> topic<span class="token punctuation">.</span>title<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;content&quot;</span><span class="token punctuation">:</span> topic<span class="token punctuation">.</span>content<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;user&quot;</span><span class="token punctuation">:</span> topic<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;create_time&quot;</span><span class="token punctuation">:</span> topic<span class="token punctuation">.</span>created_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;last_modified&#39;</span><span class="token punctuation">:</span> topic<span class="token punctuation">.</span>last_modified<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;comments&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>build_comment_info<span class="token punctuation">(</span>comment<span class="token punctuation">)</span> <span class="token keyword">for</span> comment <span class="token keyword">in</span> comment_qs<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># post/views.py</span></span>
<span class="line"><span class="token comment"># comment详细信息</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">topic_detail_view</span><span class="token punctuation">(</span>reqeust<span class="token punctuation">,</span> topic_id<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    话题详细信息</span>
<span class="line"></span>
<span class="line">    :param request:</span>
<span class="line">    :param topic_id:</span>
<span class="line">    :return:</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">        result <span class="token operator">=</span> build_topic_detail_info<span class="token punctuation">(</span>Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>topic_id<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">except</span> Topic<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">pass</span></span>
<span class="line">    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># post/urls.py</span></span>
<span class="line">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  path<span class="token punctuation">(</span><span class="token string">&#39;topic/&lt;int:topic_id&gt;/&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>topic_detail_view<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="给topic实例对象添加评论的视图" tabindex="-1"><a class="header-anchor" href="#给topic实例对象添加评论的视图"><span>给Topic实例对象添加评论的视图</span></a></h3><ul><li>先写添加评论的业务逻辑</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># post/post_service.py</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add_comment_to_topic</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    给话题添加评论</span>
<span class="line"></span>
<span class="line">    :param topic:</span>
<span class="line">    :param content:</span>
<span class="line">    :return:</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token comment"># 这里简单地根据传递的Topic实例对象和评论内容（content）创建了Comment实例对象。注意，up和down可以使用默认值，不需要指定</span></span>
<span class="line">    <span class="token keyword">return</span> Comment<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>topic<span class="token operator">=</span>topic<span class="token punctuation">,</span> content<span class="token operator">=</span>content<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>视图函数</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> post<span class="token punctuation">.</span>post_service <span class="token keyword">import</span> add_comment_to_topic</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add_comment_to_topic_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    给话题添加评论</span>
<span class="line"></span>
<span class="line">    :param request:</span>
<span class="line">    :return:</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    topic_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    content <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    topic <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">        topic <span class="token operator">=</span> Topic<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>topic_id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">except</span> Topic<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">pass</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> topic <span class="token keyword">and</span> content<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">:</span>add_comment_to_topic<span class="token punctuation">(</span>topic<span class="token punctuation">,</span>content<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>路由函数</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    path<span class="token punctuation">(</span><span class="token string">&#39;topic_comment/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>add_comment_to_topic_view<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89)]))}const c=s(t,[["render",l],["__file","6.1：视图基础.html.vue"]]),u=JSON.parse('{"path":"/fpython/htmlsystem/Django/chapter-06%EF%BC%9A%E8%A7%86%E5%9B%BE/6.1%EF%BC%9A%E8%A7%86%E5%9B%BE%E5%9F%BA%E7%A1%80.html","title":"6.1 视图基础","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"6.1.1 理解url.py文件的注释","slug":"_6-1-1-理解url-py文件的注释","link":"#_6-1-1-理解url-py文件的注释","children":[{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"6.1.2 视图的请求与相应对象","slug":"_6-1-2-视图的请求与相应对象","link":"#_6-1-2-视图的请求与相应对象","children":[{"level":3,"title":"HttpRequest","slug":"httprequest","link":"#httprequest","children":[]},{"level":3,"title":"HttpResponse","slug":"httpresponse","link":"#httpresponse","children":[]}]},{"level":2,"title":"6.1.3 基于类的视图","slug":"_6-1-3-基于类的视图","link":"#_6-1-3-基于类的视图","children":[{"level":3,"title":"简单的类视图定义","slug":"简单的类视图定义","link":"#简单的类视图定义","children":[]},{"level":3,"title":"设置类属性","slug":"设置类属性","link":"#设置类属性","children":[]},{"level":3,"title":"利用Mixin实现代码复用","slug":"利用mixin实现代码复用","link":"#利用mixin实现代码复用","children":[]}]},{"level":2,"title":"6.1.4 动态路由","slug":"_6-1-4-动态路由","link":"#_6-1-4-动态路由","children":[{"level":3,"title":"使用path配置动态路由","slug":"使用path配置动态路由","link":"#使用path配置动态路由","children":[]},{"level":3,"title":"自定义转换器","slug":"自定义转换器","link":"#自定义转换器","children":[]},{"level":3,"title":"带默认参数的视图","slug":"带默认参数的视图","link":"#带默认参数的视图","children":[]},{"level":3,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[]}]},{"level":2,"title":"6.1.5 给post应用添加视图","slug":"_6-1-5-给post应用添加视图","link":"#_6-1-5-给post应用添加视图","children":[{"level":3,"title":"实现Topic列表视图","slug":"实现topic列表视图","link":"#实现topic列表视图","children":[]},{"level":3,"title":"实现Topic实例对象信息视图","slug":"实现topic实例对象信息视图","link":"#实现topic实例对象信息视图","children":[]},{"level":3,"title":"给Topic实例对象添加评论的视图","slug":"给topic实例对象添加评论的视图","link":"#给topic实例对象添加评论的视图","children":[]}]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/htmlsystem/Django/chapter-06：视图/6.1：视图基础.md"}');export{c as comp,u as data};
