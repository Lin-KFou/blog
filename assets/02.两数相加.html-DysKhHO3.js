import{_ as p,c as o,a as s,d as e,e as t,f as i,r as c,o as u,b as l}from"./app-BCC5ysrj.js";const r={},d={class:"vuepress-toc"},k={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},x={class:"vuepress-toc-item"},N={class:"vuepress-toc-item"},w={class:"vuepress-toc-item"},L={class:"vuepress-toc-item"},q={class:"vuepress-toc-item"},O={class:"vuepress-toc-item"},B={class:"vuepress-toc-item"};function E(P,n){const a=c("router-link");return u(),o("div",null,[n[16]||(n[16]=s("h1",{id:"_02-两数相加",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_02-两数相加"},[s("span",null,"02：两数相加")])],-1)),s("nav",d,[s("ul",null,[s("li",k,[e(a,{to:"#题目描述"},{default:t(()=>n[0]||(n[0]=[l("题目描述")])),_:1}),s("ul",null,[s("li",v,[e(a,{to:"#示例"},{default:t(()=>n[1]||(n[1]=[l("示例")])),_:1})]),s("li",m,[e(a,{to:"#提示"},{default:t(()=>n[2]||(n[2]=[l("提示")])),_:1})])])]),s("li",h,[e(a,{to:"#导入和定义"},{default:t(()=>n[3]||(n[3]=[l("导入和定义")])),_:1}),s("ul",null,[s("li",b,[e(a,{to:"#导入-optional和定义-nodelist"},{default:t(()=>n[4]||(n[4]=[l("导入 Optional和定义 NodeList")])),_:1})])])]),s("li",_,[e(a,{to:"#数据结构说明"},{default:t(()=>n[5]||(n[5]=[l("数据结构说明")])),_:1}),s("ul",null,[s("li",g,[e(a,{to:"#optional-类型"},{default:t(()=>n[6]||(n[6]=[l("Optional 类型")])),_:1})]),s("li",f,[e(a,{to:"#listnode-类"},{default:t(()=>n[7]||(n[7]=[l("ListNode 类")])),_:1})])])]),s("li",y,[e(a,{to:"#解题思路"},{default:t(()=>n[8]||(n[8]=[l("解题思路")])),_:1})]),s("li",x,[e(a,{to:"#代码实现"},{default:t(()=>n[9]||(n[9]=[l("代码实现")])),_:1})]),s("li",N,[e(a,{to:"#复杂度分析"},{default:t(()=>n[10]||(n[10]=[l("复杂度分析")])),_:1})]),s("li",w,[e(a,{to:"#代码说明"},{default:t(()=>n[11]||(n[11]=[l("代码说明")])),_:1}),s("ul",null,[s("li",L,[e(a,{to:"#to-str-函数解释"},{default:t(()=>n[12]||(n[12]=[l("to_str()函数解释")])),_:1})]),s("li",q,[e(a,{to:"#函数实现细节"},{default:t(()=>n[13]||(n[13]=[l("函数实现细节")])),_:1})]),s("li",O,[e(a,{to:"#工作流程"},{default:t(()=>n[14]||(n[14]=[l("工作流程")])),_:1})]),s("li",B,[e(a,{to:"#示例说明"},{default:t(()=>n[15]||(n[15]=[l("示例说明")])),_:1})])])])])]),n[17]||(n[17]=i(`<hr><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p><strong>题目</strong> 给你两个<strong>非空</strong>的链表，表示两个非负的整数。它们每位数字都是按照<strong>逆序</strong>的方式存储的，并且每个节点只能存储<strong>一位</strong>数字。 请你将两个数相加，并以相同形式返回一个表示和的链表。 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p><img src="https://oss.moniter.top/uPic/2024-01-08/YrzPix.png" alt="YrzPix"></p><h3 id="提示" tabindex="-1"><a class="header-anchor" href="#提示"><span>提示</span></a></h3><ul><li>每个链表中的节点数在范围 [1, 100] 内</li><li>0 ≤ Node.val ≤ 9</li><li>题目数据保证列表表示的数字不含前导零</li></ul><h2 id="导入和定义" tabindex="-1"><a class="header-anchor" href="#导入和定义"><span>导入和定义</span></a></h2><h3 id="导入-optional和定义-nodelist" tabindex="-1"><a class="header-anchor" href="#导入-optional和定义-nodelist"><span>导入 Optional和定义 NodeList</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val</span>
<span class="line">        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据结构说明" tabindex="-1"><a class="header-anchor" href="#数据结构说明"><span>数据结构说明</span></a></h2><h3 id="optional-类型" tabindex="-1"><a class="header-anchor" href="#optional-类型"><span>Optional 类型</span></a></h3><p><code>Optional</code> 是 Python 类型提示中的一个泛型类型，用于表示一个值可能为 None。在本题中，它用于表示链表节点可能不存在的情况。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># Optional[ListNode] 表示参数可能是 ListNode 类型，也可能是 None</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">some_function</span><span class="token punctuation">(</span>node<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="listnode-类" tabindex="-1"><a class="header-anchor" href="#listnode-类"><span>ListNode 类</span></a></h3><p><code>ListNode</code> 是一个自定义的链表节点类，用于构建单向链表数据结构：</p><ul><li>val: 存储节点的值(0-9)</li><li>next: 指向下一个节点的指针</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h2><ol><li>同时遍历两个链表，对应位置数字相加</li><li>处理进位情况</li><li>注意链表长度不同的情况</li><li>最后的进位需要新建节点</li></ol><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val</span>
<span class="line">        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">                      l2<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">def</span> <span class="token function">to_str</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">            将一个链表转换成字符串</span>
<span class="line">            &quot;&quot;&quot;</span></span>
<span class="line">            num_str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">            <span class="token keyword">while</span> node<span class="token punctuation">:</span></span>
<span class="line">                num_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> num_str</span>
<span class="line">                node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">            <span class="token keyword">return</span> num_str</span>
<span class="line">        </span>
<span class="line">        l1str <span class="token operator">=</span> to_str<span class="token punctuation">(</span>l1<span class="token punctuation">)</span></span>
<span class="line">        l2str <span class="token operator">=</span> to_str<span class="token punctuation">(</span>l2<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        result_sum <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>l1str<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>l2str<span class="token punctuation">)</span></span>
<span class="line">        prev_node <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> digit <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>result_sum<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            node <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">,</span> prev_node<span class="token punctuation">)</span></span>
<span class="line">            prev_node <span class="token operator">=</span> node</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> prev_node <span class="token keyword">if</span> prev_node <span class="token keyword">else</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">l1 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">l2 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">res <span class="token operator">=</span> Solution<span class="token punctuation">.</span>addTwoNumbers<span class="token punctuation">(</span>Solution<span class="token punctuation">,</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">print_list</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">while</span> node<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line">        node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">print_list<span class="token punctuation">(</span>res<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析"><span>复杂度分析</span></a></h2><ul><li>时间复杂度：O(max(N,M))，其中 N 和 M 分别为两个链表的长度</li><li>空间复杂度：O(max(N,M))，需要存储新链表</li></ul><h2 id="代码说明" tabindex="-1"><a class="header-anchor" href="#代码说明"><span>代码说明</span></a></h2><h3 id="to-str-函数解释" tabindex="-1"><a class="header-anchor" href="#to-str-函数解释"><span>to_str()函数解释</span></a></h3><p><code>to_str</code> 函数的目的是<strong>将一个链表转换成字符串</strong>。 在链表中，每个节点包含一个数字和一个指向下一个节点的指针（或链接）。 这种数据结构不像数组那样可以直接通过索引访问每个元素，而是需要从头节点开始，通过节点之间的链接逐个遍历。</p><p>假设有一个链表，代表数字 807，但是它的表示形式是 7 -&gt; 0 -&gt; 8（头节点是 7，它是数字的最低位）。</p><h3 id="函数实现细节" tabindex="-1"><a class="header-anchor" href="#函数实现细节"><span>函数实现细节</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">to_str</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    num_str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token keyword">while</span> node<span class="token punctuation">:</span></span>
<span class="line">        num_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">+</span> num_str</span>
<span class="line">        node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token builtin">next</span></span>
<span class="line">    <span class="token keyword">return</span> num_str</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程"><span>工作流程</span></a></h3><ol><li><p><strong>初始化一个空字符串</strong> <code>num_str</code>：这将用来构建链表代表的数字的字符串表示。</p></li><li><p><strong>遍历链表</strong>：使用 <code>while node:</code> 循环遍历链表。在每次迭代中，<code>node</code> 是当前的链表节点。</p></li><li><p><strong>构建字符串</strong>：在每次迭代中，我们取出当前节点的值 <code>node.val</code>（一个数字），将其转换为字符串，然后将其添加到 <code>num_str</code> 的前面。这是因为我们是从链表的头部开始遍历的，头部是数字的最低位。</p></li><li><p><strong>移动到下一个节点</strong>：通过 <code>node = node.next</code> 移动到链表的下一个节点。</p></li><li><p><strong>返回结果字符串</strong>：一旦遍历完整个链表，<code>num_str</code> 就包含了链表表示的完整数字的字符串形式。这时函数返回 <code>num_str</code>。</p></li></ol><h3 id="示例说明" tabindex="-1"><a class="header-anchor" href="#示例说明"><span>示例说明</span></a></h3><p>对于链表 7 -&gt; 0 -&gt; 8：</p><ol><li>初始: num_str = &quot;&quot;</li><li>第一次迭代: num_str = &quot;7&quot;</li><li>第二次迭代: num_str = &quot;07&quot;</li><li>第三次迭代: num_str = &quot;807&quot;</li></ol><p>最终返回字符串 &quot;807&quot;，实现了链表到数字的正确转换。</p>`,35))])}const j=p(r,[["render",E],["__file","02.两数相加.html.vue"]]),T=JSON.parse('{"path":"/fpython/example/algorithm/02.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0.html","title":"02：两数相加","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"提示","slug":"提示","link":"#提示","children":[]}]},{"level":2,"title":"导入和定义","slug":"导入和定义","link":"#导入和定义","children":[{"level":3,"title":"导入 Optional和定义 NodeList","slug":"导入-optional和定义-nodelist","link":"#导入-optional和定义-nodelist","children":[]}]},{"level":2,"title":"数据结构说明","slug":"数据结构说明","link":"#数据结构说明","children":[{"level":3,"title":"Optional 类型","slug":"optional-类型","link":"#optional-类型","children":[]},{"level":3,"title":"ListNode 类","slug":"listnode-类","link":"#listnode-类","children":[]}]},{"level":2,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[]},{"level":2,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]},{"level":2,"title":"复杂度分析","slug":"复杂度分析","link":"#复杂度分析","children":[]},{"level":2,"title":"代码说明","slug":"代码说明","link":"#代码说明","children":[{"level":3,"title":"to_str()函数解释","slug":"to-str-函数解释","link":"#to-str-函数解释","children":[]},{"level":3,"title":"函数实现细节","slug":"函数实现细节","link":"#函数实现细节","children":[]},{"level":3,"title":"工作流程","slug":"工作流程","link":"#工作流程","children":[]},{"level":3,"title":"示例说明","slug":"示例说明","link":"#示例说明","children":[]}]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/example/algorithm/02.两数相加.md"}');export{j as comp,T as data};
