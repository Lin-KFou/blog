import{_ as l,c as o,a as n,d as p,e,f as i,r as c,o as u,b as t}from"./app-BCC5ysrj.js";const r={},d={class:"vuepress-toc"},k={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"};function w(f,s){const a=c("router-link");return u(),o("div",null,[s[8]||(s[8]=n("h1",{id:"python-linux的shell命令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python-linux的shell命令"},[n("span",null,"Python: Linux的Shell命令")])],-1)),n("nav",d,[n("ul",null,[n("li",k,[p(a,{to:"#简介"},{default:e(()=>s[0]||(s[0]=[t("简介")])),_:1})]),n("li",m,[p(a,{to:"#执行方法"},{default:e(()=>s[1]||(s[1]=[t("执行方法")])),_:1}),n("ul",null,[n("li",v,[p(a,{to:"#_1-os-system"},{default:e(()=>s[2]||(s[2]=[t("1. os.system")])),_:1})]),n("li",b,[p(a,{to:"#_2-os-popen"},{default:e(()=>s[3]||(s[3]=[t("2. os.popen")])),_:1})]),n("li",h,[p(a,{to:"#_3-commands-模块"},{default:e(()=>s[4]||(s[4]=[t("3. commands 模块")])),_:1})]),n("li",y,[p(a,{to:"#_4-subprocess-模块"},{default:e(()=>s[5]||(s[5]=[t("4. subprocess 模块")])),_:1})]),n("li",g,[p(a,{to:"#_5-异步执行"},{default:e(()=>s[6]||(s[6]=[t("5. 异步执行")])),_:1})])])]),n("li",_,[p(a,{to:"#最佳实践"},{default:e(()=>s[7]||(s[7]=[t("最佳实践")])),_:1})])])]),s[9]||(s[9]=i(`<hr><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Python 提供了多种方式来执行 Linux Shell 命令。每种方法都有其特点和适用场景。</p><h2 id="执行方法" tabindex="-1"><a class="header-anchor" href="#执行方法"><span>执行方法</span></a></h2><h3 id="_1-os-system" tabindex="-1"><a class="header-anchor" href="#_1-os-system"><span>1. os.system</span></a></h3><p>最简单的方式，但功能有限：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> os</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 执行命令</span></span>
<span class="line">exit_code <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;echo &quot;Hello World&quot;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 检查返回值</span></span>
<span class="line"><span class="token keyword">if</span> exit_code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;命令执行成功&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;命令执行失败: </span><span class="token interpolation"><span class="token punctuation">{</span>exit_code<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-os-popen" tabindex="-1"><a class="header-anchor" href="#_2-os-popen"><span>2. os.popen</span></a></h3><p>可以获取命令输出：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> os</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 执行命令并获取输出</span></span>
<span class="line"><span class="token keyword">with</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">&#39;ls -l&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span></span>
<span class="line">    output <span class="token operator">=</span> p<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 逐行读取输出</span></span>
<span class="line"><span class="token keyword">with</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">&#39;ls -l&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">for</span> line <span class="token keyword">in</span> p<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-commands-模块" tabindex="-1"><a class="header-anchor" href="#_3-commands-模块"><span>3. commands 模块</span></a></h3><p>提供了更简单的命令执行接口：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> commands</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 获取状态和输出</span></span>
<span class="line">status<span class="token punctuation">,</span> output <span class="token operator">=</span> commands<span class="token punctuation">.</span>getstatusoutput<span class="token punctuation">(</span><span class="token string">&#39;ls -l&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;状态: </span><span class="token interpolation"><span class="token punctuation">{</span>status<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;输出: </span><span class="token interpolation"><span class="token punctuation">{</span>output<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 只获取输出</span></span>
<span class="line">output <span class="token operator">=</span> commands<span class="token punctuation">.</span>getoutput<span class="token punctuation">(</span><span class="token string">&#39;ls -l&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 获取命令状态</span></span>
<span class="line">status <span class="token operator">=</span> commands<span class="token punctuation">.</span>getstatus<span class="token punctuation">(</span><span class="token string">&#39;ls -l&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-subprocess-模块" tabindex="-1"><a class="header-anchor" href="#_4-subprocess-模块"><span>4. subprocess 模块</span></a></h3><p>推荐使用的现代方法：</p><h4 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> subprocess</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用 call</span></span>
<span class="line">exit_code <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-l&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;退出码: </span><span class="token interpolation"><span class="token punctuation">{</span>exit_code<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用 run (推荐)</span></span>
<span class="line">result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-l&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">                       capture_output<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">                       text<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 检查结果</span></span>
<span class="line"><span class="token keyword">if</span> result<span class="token punctuation">.</span>returncode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;输出:&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;错误:&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="popen-类" tabindex="-1"><a class="header-anchor" href="#popen-类"><span>Popen 类</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 实时获取输出</span></span>
<span class="line">process <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;tail -f /var/log/syslog&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span></span>
<span class="line">    stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span></span>
<span class="line">    universal_newlines<span class="token operator">=</span><span class="token boolean">True</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 读取输出</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">    output <span class="token operator">=</span> process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> output <span class="token operator">==</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">and</span> process<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">if</span> output<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 等待进程结束</span></span>
<span class="line">rc <span class="token operator">=</span> process<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-异步执行" tabindex="-1"><a class="header-anchor" href="#_5-异步执行"><span>5. 异步执行</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> asyncio</span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">run_command</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    proc <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>create_subprocess_shell<span class="token punctuation">(</span></span>
<span class="line">        cmd<span class="token punctuation">,</span></span>
<span class="line">        stdout<span class="token operator">=</span>asyncio<span class="token punctuation">.</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span></span>
<span class="line">        stderr<span class="token operator">=</span>asyncio<span class="token punctuation">.</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> <span class="token keyword">await</span> proc<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> stdout<span class="token punctuation">,</span> stderr</span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> <span class="token keyword">await</span> run_command<span class="token punctuation">(</span><span class="token string">&#39;ls -l&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h2><ol><li><p><strong>选择合适的方法</strong></p><ul><li>简单命令用 os.system</li><li>需要输出用 subprocess.run</li><li>需要实时输出用 Popen</li><li>异步场景用 asyncio</li></ul></li><li><p><strong>安全考虑</strong></p><ul><li>避免直接拼接命令</li><li>使用参数列表</li><li>注意权限控制</li></ul></li><li><p><strong>错误处理</strong></p><ul><li>检查返回码</li><li>捕获异常</li><li>设置超时</li></ul></li></ol><blockquote><p><strong>注意：</strong></p><ul><li>处理命令输出编码</li><li>注意错误处理</li><li>避免命令注入</li><li>subprocess 是推荐的现代方法</li></ul></blockquote>`,24))])}const P=l(r,[["render",w],["__file","Python-Linux的Shell命令.html.vue"]]),q=JSON.parse('{"path":"/fpython/example/Python-Linux%E7%9A%84Shell%E5%91%BD%E4%BB%A4.html","title":"Python: Linux的Shell命令","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"执行方法","slug":"执行方法","link":"#执行方法","children":[{"level":3,"title":"1. os.system","slug":"_1-os-system","link":"#_1-os-system","children":[]},{"level":3,"title":"2. os.popen","slug":"_2-os-popen","link":"#_2-os-popen","children":[]},{"level":3,"title":"3. commands 模块","slug":"_3-commands-模块","link":"#_3-commands-模块","children":[]},{"level":3,"title":"4. subprocess 模块","slug":"_4-subprocess-模块","link":"#_4-subprocess-模块","children":[]},{"level":3,"title":"5. 异步执行","slug":"_5-异步执行","link":"#_5-异步执行","children":[]}]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":4}]},"filePathRelative":"fpython/example/Python-Linux的Shell命令.md"}');export{P as comp,q as data};
