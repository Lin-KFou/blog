import{_ as o,c as l,a as s,d as p,e as t,f as i,r as c,o as u,b as e}from"./app-BCC5ysrj.js";const r={},d={class:"vuepress-toc"},k={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"};function P(g,n){const a=c("router-link");return u(),l("div",null,[n[6]||(n[6]=s("h1",{id:"python-list深入概述",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#python-list深入概述"},[s("span",null,"Python: List深入概述")])],-1)),s("nav",d,[s("ul",null,[s("li",k,[p(a,{to:"#python-中列表的内存管理"},{default:t(()=>n[0]||(n[0]=[e("Python 中列表的内存管理")])),_:1})]),s("li",m,[p(a,{to:"#python-列表是如何在内部实现的"},{default:t(()=>n[1]||(n[1]=[e("Python 列表是如何在内部实现的")])),_:1})]),s("li",h,[p(a,{to:"#python-列表操作及其复杂性"},{default:t(()=>n[2]||(n[2]=[e("Python 列表操作及其复杂性")])),_:1})]),s("li",v,[p(a,{to:"#python-列表替代方案和高效列表操作"},{default:t(()=>n[3]||(n[3]=[e("Python 列表替代方案和高效列表操作")])),_:1})]),s("li",y,[p(a,{to:"#如何使用-python-列表-代码示例"},{default:t(()=>n[4]||(n[4]=[e("如何使用 Python 列表（代码示例）")])),_:1})]),s("li",b,[p(a,{to:"#python-中的列表推导式是什么"},{default:t(()=>n[5]||(n[5]=[e("Python 中的列表推导式是什么？")])),_:1})])])]),n[7]||(n[7]=i(`<hr><p>Python 列表是一种用途极其广泛且使用广泛的数据结构。它可以存储不同的项目集合，无论其类型或类型组合如何。本文旨在深入探讨 Python 列表、内存管理和列表理解。</p><h2 id="python-中列表的内存管理" tabindex="-1"><a class="header-anchor" href="#python-中列表的内存管理"><span>Python 中列表的内存管理</span></a></h2><p>Python 列表如此强大的原因之一是它们是动态的。这意味着列表大小可以在执行期间改变。创建列表时，Python 会分配比容纳未来项目所需的更多内存。因此，当您追加新元素时，Python 不需要分配更多内存，从而提高了程序的效率。列表中的每一项都引用存储在内存中的实际对象。例如，当您创建一个包含整数的列表时，该列表并不直接保存整数值。相反，它存储对存储实际整数的内存位置的引用（或指针）。此功能允许 Python 列表是异构的，即它们可以存储不同类型的项目。</p><h2 id="python-列表是如何在内部实现的" tabindex="-1"><a class="header-anchor" href="#python-列表是如何在内部实现的"><span>Python 列表是如何在内部实现的</span></a></h2><p>Python 列表被实现为动态数组。当您将一个项目追加到列表中时，Python 将其添加到数组的末尾。如果数组已满，Python 会分配一个更大的新数组，并将所有旧元素复制到新数组中。</p><p>这个过程通过过度分配来优化。当需要新数组时，Python 不仅为当前数量的元素分配足够的空间，还会为未来的元素分配额外的空间。虽然这种过度分配看起来很浪费，但它提高了附加元素时的性能，因为每个附加操作都可以选择新数组。</p><p>Python 中的列表类似于 Java 中的 <code>ArrayLists</code> 和 C++ 中的 <code>Vectors</code> 。</p><h2 id="python-列表操作及其复杂性" tabindex="-1"><a class="header-anchor" href="#python-列表操作及其复杂性"><span>Python 列表操作及其复杂性</span></a></h2><p>Python 列表提供了几种用于操作列表的内置方法。让我们讨论一些最常见的操作：</p><ol><li><p>访问元素 ( <code>list[index]</code> )：访问列表中的元素是一个常数时间操作，即 O(1)，无论列表的大小如何。</p></li><li><p>追加元素 ( <code>list.append(item)</code> )：正如我们之前讨论的，由于过度分配，向列表追加一个项目通常是一个常数时间操作，即 O(1)。但是，当需要分配新数组时，操作将变为线性时间，即 O(n)，因为列表项将被复制到新的更大列表。</p></li><li><p>插入元素（ <code>list.insert(index, item)</code> ）：插入一项需要将所有后续元素移动一位，因此这是一个线性时间操作，即 O(n)。</p></li><li><p>删除元素（ <code>list.remove(item)</code> ）：Python 需要搜索列表中的项目并移动所有后续元素，因此这也是一个线性时间操作，即 O(n)。</p></li><li><p>搜索元素（ <code>item in list</code> ）：Python 需要检查每个项目直到找到该项目，因此这是一个线性时间操作，即 O(n)。</p></li></ol><h2 id="python-列表替代方案和高效列表操作" tabindex="-1"><a class="header-anchor" href="#python-列表替代方案和高效列表操作"><span>Python 列表替代方案和高效列表操作</span></a></h2><p>Python 列表是我们可用的令人惊奇的数据结构。它们非常强大且用途广泛，您可以看到它们如何存储多种数据类型。这告诉我们在哪里可以使用 Python 列表以及在哪里应该考虑替代方案。</p><p>首先我们来说说高效的列表操作：</p><ol><li><p>预分配列表空间：如果您知道列表将容纳多少项，请使用 <code>[None] * n</code> 语法为其预分配空间。这使得 Python 无需在添加元素时分配空间。如果您正在解决任何面试问题，并且确定存储元素需要恒定的内存。然后您可以执行以下操作：</p></li><li><p>使用列表推导式：列表推导式比使用 for 循环创建列表更具可读性且速度更快。</p></li><li><p>避免使用 <code>insert(0, item)</code> 和 <code>del list[0]</code> ：这些操作很慢，因为它们需要移动所有其他元素。相反，如果您需要从列表两端快速追加或弹出，请考虑使用 <code>collections.deque</code> 。</p></li></ol><p><strong>Python 列表替代方案：</strong></p><ol><li>如果您需要从列表两端快速追加或弹出。考虑使用 Python 集合框架中提供的 <code>collections.deque</code> 。</li><li>如果您需要频繁搜索列表，请考虑使用 <code>set</code> 或 <code>dict</code> ，它们提供恒定时间搜索操作。</li><li>如果您的列表不会更改或仅用于查找。那么元组也是一个不错的选择。</li></ol><p>请记住，Python 列表是可变的、有序的项目集合，并且具有多种强大的内置方法来操作这些项目。了解如何正确使用列表是 Python 编程的基础。</p><h2 id="如何使用-python-列表-代码示例" tabindex="-1"><a class="header-anchor" href="#如何使用-python-列表-代码示例"><span>如何使用 Python 列表（代码示例）</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># Creating a List</span></span>
<span class="line">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># Output: [1, 2, 3, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Accessing Elements</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Output: 1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># Output: 5</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Modifying an Item</span></span>
<span class="line">my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># Output: [10, 2, 3, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Appending Elements</span></span>
<span class="line">my_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># Output: [10, 2, 3, 4, 5, 6]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Removing Elements</span></span>
<span class="line">my_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># Output: [2, 3, 4, 5, 6]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Inserting Elements</span></span>
<span class="line">my_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># Output: [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Checking if an Item Exists</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> my_list<span class="token punctuation">)</span>  <span class="token comment"># Output: True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token keyword">in</span> my_list<span class="token punctuation">)</span>  <span class="token comment"># Output: False</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Finding the Length of the List</span></span>
<span class="line"><span class="token comment"># Note: len() is a built-in function.</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Output: 6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="python-中的列表推导式是什么" tabindex="-1"><a class="header-anchor" href="#python-中的列表推导式是什么"><span>Python 中的列表推导式是什么？</span></a></h2><p>假设你想在Python中遍历一个列表。然后执行某些操作，例如检查列表中的偶数。您通常会这样做：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">number_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> number <span class="token keyword">in</span> number_list<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># ---</span></span>
<span class="line"><span class="token comment"># Output:</span></span>
<span class="line"><span class="token comment"># 2</span></span>
<span class="line"><span class="token comment"># 4</span></span>
<span class="line"><span class="token comment"># 6</span></span>
<span class="line"><span class="token comment"># 8</span></span>
<span class="line"><span class="token comment"># 10</span></span>
<span class="line"><span class="token comment"># 12</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表推导式是一种单行代码，可以提高 Python 中列表循环的性能，并允许生成更优化、更简洁的代码。使用列表推导式可以轻松编写相同的 for 循环。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">number_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> number_list <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>列表推导式遵循简单的结构 <code>[expression for item in iterable]</code> 。我们使用 <code>print(x)</code> 作为表达式，后跟 for 循环和条件。条件是可选的，但也经常使用。 <code>[expression for item in iterable if condition]</code> 。</p><p>使用列表推导式将小写字符字符串列表转换为大写字符的一个示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">word_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;zen&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">]</span></span>
<span class="line">upper_words <span class="token operator">=</span> <span class="token punctuation">[</span>word<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> word <span class="token keyword">in</span> word_list<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>upper_words<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token comment"># Output: [&#39;HELLO&#39;, &#39;WORLD&#39;, &#39;ZEN&#39;, &#39;PYTHON&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嵌套列表理解也是可能的。例如，要展平矩阵（列表的列表）：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">flat <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> sublist <span class="token keyword">in</span> matrix <span class="token keyword">for</span> num <span class="token keyword">in</span> sublist<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>flat<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token comment"># Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，嵌套列表推导式中 for 子句的顺序与您用于嵌套 for 循环的顺序相匹配。</p><p>列表推导式是强大的工具，可以使您的 Python 代码更加高效和可读。然而，当过度使用或用于复杂任务时，它们可能会变得难以理解，因此明智地使用它们通常是个好主意。</p><p>通过掌握 Python 列表的概念及其特性，可以提高您的 Python 编程技能并编写更清晰、更高效的代码。考虑操作的计算复杂性并根据您的特定需求选择适当的数据结构非常重要。</p>`,33))])}const f=o(r,[["render",P],["__file","Python-List深入概述.html.vue"]]),w=JSON.parse('{"path":"/fpython/quickstart/Python-List%E6%B7%B1%E5%85%A5%E6%A6%82%E8%BF%B0.html","title":"Python: List深入概述","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Python 中列表的内存管理","slug":"python-中列表的内存管理","link":"#python-中列表的内存管理","children":[]},{"level":2,"title":"Python 列表是如何在内部实现的","slug":"python-列表是如何在内部实现的","link":"#python-列表是如何在内部实现的","children":[]},{"level":2,"title":"Python 列表操作及其复杂性","slug":"python-列表操作及其复杂性","link":"#python-列表操作及其复杂性","children":[]},{"level":2,"title":"Python 列表替代方案和高效列表操作","slug":"python-列表替代方案和高效列表操作","link":"#python-列表替代方案和高效列表操作","children":[]},{"level":2,"title":"如何使用 Python 列表（代码示例）","slug":"如何使用-python-列表-代码示例","link":"#如何使用-python-列表-代码示例","children":[]},{"level":2,"title":"Python 中的列表推导式是什么？","slug":"python-中的列表推导式是什么","link":"#python-中的列表推导式是什么","children":[]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":7}]},"filePathRelative":"fpython/quickstart/Python-List深入概述.md"}');export{f as comp,w as data};
