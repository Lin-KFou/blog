import{_ as n,c as a,f as e,o as p}from"./app-BCC5ysrj.js";const t={};function l(i,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_9-1-用户与身份认证" tabindex="-1"><a class="header-anchor" href="#_9-1-用户与身份认证"><span>9.1 用户与身份认证</span></a></h1><ul><li><a href="#91-%E7%94%A8%E6%88%B7%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81">9.1 用户与身份认证</a><ul><li><a href="#911-%E7%94%A8%E6%88%B7%E4%B8%8E%E7%94%A8%E6%88%B7%E7%BB%84">9.1.1 用户与用户组</a></li><li><a href="#912-%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81">9.1.2 用户身份认证</a></li></ul></li></ul><p>创建项目时使用createsuperuser命令创建了超级用户、视图函数中通过HttpRequest的user属性获取了当前的登录用户等。这里的用户其实就是Django框架中内置的User Model</p><hr><h2 id="_9-1-1-用户与用户组" tabindex="-1"><a class="header-anchor" href="#_9-1-1-用户与用户组"><span>9.1.1 用户与用户组</span></a></h2><p>用户认证系统定义个三个Model用来表示用户与用户关系</p><ul><li><p>User：用户</p></li><li><p>AnonymousUser：匿名用户</p></li><li><p>Group：用户组</p></li><li><p>is_staff属性：定义用户能否登录管理后台（True/False）</p></li><li><p>is_active属性：定义用户是否属于激活状态（True/False）</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 创建用户</span></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User</span>
<span class="line">user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create_user<span class="token punctuation">(</span><span class="token string">&#39;bbs&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;bbs@django.com&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;django_bbs&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span><span class="token string">&#39;bbs_django&#39;</span><span class="token punctuation">)</span></span>
<span class="line">user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Group只定义了一个基础属性字段name，用于标识组名。要求唯一性，对字符内容没有做要求</p></li><li><p>用户组的概念主要有两个作用。</p><ul><li><p>（1）将一类用户加入一个用户组中，方便对这一类用户的统一操作，如发送邮件可以指定用户组而不需要逐个添加用户。</p></li><li><p>（2）加入某一个用户组的用户自动获得当前用户组所拥有的权限</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 例子：创建一个用户组，并将之前的bbs添加到组</span></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> Group</span>
<span class="line">group <span class="token operator">=</span> Group<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;bbs&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;bbs&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 获取user</span></span>
<span class="line">user<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>add<span class="token punctuation">(</span>group<span class="token punctuation">)</span>  <span class="token comment"># 添加到组</span></span>
<span class="line">user<span class="token punctuation">.</span>groups<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="_9-1-2-用户身份认证" tabindex="-1"><a class="header-anchor" href="#_9-1-2-用户身份认证"><span>9.1.2 用户身份认证</span></a></h2><p>根据给定的条件或属性尝试获取用户对象的行为被称为用户认证，是<strong>非常常见的功能</strong></p><ul><li>提供了<code>authenticate方法</code>用于对用户身份进行认证</li><li>authenticate接受：username和password作为参数 <ul><li>通过认证：返回User对象</li><li>失败：返回None</li></ul></li></ul>`,10)]))}const c=n(t,[["render",l],["__file","01：用户与身份认证.html.vue"]]),u=JSON.parse('{"path":"/fpython/htmlsystem/Django/chapter-09%EF%BC%9A%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9F/01%EF%BC%9A%E7%94%A8%E6%88%B7%E4%B8%8E%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81.html","title":"9.1 用户与身份认证","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"9.1.1 用户与用户组","slug":"_9-1-1-用户与用户组","link":"#_9-1-1-用户与用户组","children":[]},{"level":2,"title":"9.1.2 用户身份认证","slug":"_9-1-2-用户身份认证","link":"#_9-1-2-用户身份认证","children":[]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/htmlsystem/Django/chapter-09：用户认证系统/01：用户与身份认证.md"}');export{c as comp,u as data};
