import{_ as l,c as n,f as o,o as e}from"./app-BCC5ysrj.js";const i={};function t(h,a){return e(),n("div",null,a[0]||(a[0]=[o('<h1 id="_1-1-django的产生背景" tabindex="-1"><a class="header-anchor" href="#_1-1-django的产生背景"><span>1.1 Django的产生背景</span></a></h1><ul><li><a href="#11-django%E7%9A%84%E4%BA%A7%E7%94%9F%E8%83%8C%E6%99%AF">1.1 Django的产生背景</a><ul><li><a href="#111-django%E7%9A%84%E5%88%9B%E5%BB%BA%E8%83%8C%E6%99%AF">1.1.1 Django的创建背景</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li></ul><hr><h2 id="_1-1-1-django的创建背景" tabindex="-1"><a class="header-anchor" href="#_1-1-1-django的创建背景"><span>1.1.1 Django的创建背景</span></a></h2><p>开发一个web站点，需要做的工作，以及写那些组件呢：</p><ol><li>构建用户账户关系，实现web站点的登录与注册功能</li><li>定义数据表模型及实现访问功能</li><li>编写业务逻辑实现站点功能</li><li>实现后台管理功能</li><li>路由模型实现功能请求映射</li></ol><p>通常，不同的站点知识步骤3的业务逻辑不同, 其他的功能需求是类似的，甚至是完全一样的</p><p>如何把通用的组件或者模块组合在一起呢？</p><p>出现 web框架的概念，也是Django产生的背景</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ol><li>主要内容</li><li>结论： <ul><li>Django:&quot;完美主义者的最终框架&quot;</li><li>Django：允许开发人员编写数据库驱动的web应用程序，而不需要从头开始编码</li><li>尽可能提供简单，易用且功能强大的功能模块</li><li>优点：快速高效，不需要使用者设计用户系统，搭建权限验证，不需要构建缓存体系，不需要编写大量重复的代码去完成后台管理的功能</li><li>使用Django框架从零搭建一个简单可运行的Web程序很快速</li></ul></li></ol>',11)]))}const g=l(i,[["render",t],["__file","1.1 Django背景.html.vue"]]),s=JSON.parse('{"path":"/fpython/htmlsystem/Django/chapter-01%EF%BC%9ADjango%E6%A1%86%E6%9E%B6%E8%AE%A4%E8%AF%86/1.1%20Django%E8%83%8C%E6%99%AF.html","title":"1.1 Django的产生背景","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.1.1 Django的创建背景","slug":"_1-1-1-django的创建背景","link":"#_1-1-1-django的创建背景","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1735019797000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":2}]},"filePathRelative":"fpython/htmlsystem/Django/chapter-01：Django框架认识/1.1 Django背景.md"}');export{g as comp,s as data};
