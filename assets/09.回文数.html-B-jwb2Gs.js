import{_ as t,c as o,a as n,d as e,e as l,f as i,r as c,o as r,b as p}from"./app-BCC5ysrj.js";const u={},d={class:"vuepress-toc"},k={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},x={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"};function y(_,s){const a=c("router-link");return r(),o("div",null,[s[8]||(s[8]=n("h1",{id:"_09-回文数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_09-回文数"},[n("span",null,"09：回文数")])],-1)),n("nav",d,[n("ul",null,[n("li",k,[e(a,{to:"#题目描述"},{default:l(()=>s[0]||(s[0]=[p("题目描述")])),_:1}),n("ul",null,[n("li",m,[e(a,{to:"#示例"},{default:l(()=>s[1]||(s[1]=[p("示例")])),_:1})]),n("li",v,[e(a,{to:"#提示"},{default:l(()=>s[2]||(s[2]=[p("提示")])),_:1})])])]),n("li",h,[e(a,{to:"#解题思路"},{default:l(()=>s[3]||(s[3]=[p("解题思路")])),_:1}),n("ul",null,[n("li",b,[e(a,{to:"#方法一-字符串转换法"},{default:l(()=>s[4]||(s[4]=[p("方法一：字符串转换法")])),_:1})]),n("li",g,[e(a,{to:"#方法二-数字反转法"},{default:l(()=>s[5]||(s[5]=[p("方法二：数字反转法")])),_:1})])])]),n("li",x,[e(a,{to:"#代码说明"},{default:l(()=>s[6]||(s[6]=[p("代码说明")])),_:1}),n("ul",null,[n("li",f,[e(a,{to:"#方法二详细说明"},{default:l(()=>s[7]||(s[7]=[p("方法二详细说明")])),_:1})])])])])]),s[9]||(s[9]=i(`<hr><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p><strong>题目：</strong></p><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>示例 1：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">输入：x = 121</span>
<span class="line">输出：true</span>
<span class="line">解释：121 从左向右读是 121，从右向左读是 121。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">输入：x = -121</span>
<span class="line">输出：false</span>
<span class="line">解释：从左向右读是 -121，从右向左读是 121-。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提示" tabindex="-1"><a class="header-anchor" href="#提示"><span>提示</span></a></h3><ul><li>-2³¹ &lt;= x &lt;= 2³¹ - 1</li></ul><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h2><h3 id="方法一-字符串转换法" tabindex="-1"><a class="header-anchor" href="#方法一-字符串转换法"><span>方法一：字符串转换法</span></a></h3><p>将整数转换为字符串，然后判断该字符串是否与其反转后的字符串相同。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;使用字符串来判断整数回文数&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">False</span></span>
<span class="line">        reversed_str_num <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">return</span> x <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">(</span>reversed_str_num<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析"><span>复杂度分析</span></a></h4><ul><li>时间复杂度：O(log₁₀n)，需要将整数转换为字符串</li><li>空间复杂度：O(log₁₀n)，需要存储字符串</li></ul><h4 id="示例运行" tabindex="-1"><a class="header-anchor" href="#示例运行"><span>示例运行</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 实例用法</span></span>
<span class="line">sol <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>isPalindrome<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>isPalindrome<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>isPalindrome<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 输出 False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法二-数字反转法" tabindex="-1"><a class="header-anchor" href="#方法二-数字反转法"><span>方法二：数字反转法</span></a></h3><p>通过反转整数的后半部分来判断是否为回文数。这种方法不需要额外的字符串转换，可以减少空间使用。</p><h4 id="算法步骤" tabindex="-1"><a class="header-anchor" href="#算法步骤"><span>算法步骤</span></a></h4><ol><li>特殊情况处理：负数和以0结尾的数（除了0本身）</li><li>反转后半部分数字</li><li>与前半部分比较</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 负数不是回文数，以及如果最后一位是 0，那么只有 0 本身才是回文数</span></span>
<span class="line">        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">False</span></span>
<span class="line"></span>
<span class="line">        reversed_half <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">while</span> x <span class="token operator">&gt;</span> reversed_half<span class="token punctuation">:</span></span>
<span class="line">            reversed_half <span class="token operator">=</span> reversed_half <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span></span>
<span class="line">            x <span class="token operator">//=</span> <span class="token number">10</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 当原始数字等于反转后的数字，或者原始数字是反转数字的一半（对于奇数位数字）</span></span>
<span class="line">        <span class="token keyword">return</span> x <span class="token operator">==</span> reversed_half <span class="token keyword">or</span> x <span class="token operator">==</span> reversed_half <span class="token operator">//</span> <span class="token number">10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="复杂度分析-1" tabindex="-1"><a class="header-anchor" href="#复杂度分析-1"><span>复杂度分析</span></a></h4><ul><li>时间复杂度：O(log₁₀n)，需要处理大约一半数字的位数</li><li>空间复杂度：O(1)，只需要常数级别的额外空间</li></ul><h4 id="示例运行-1" tabindex="-1"><a class="header-anchor" href="#示例运行-1"><span>示例运行</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 示例用法</span></span>
<span class="line">sol <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>isPalindrome<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>isPalindrome<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出 False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sol<span class="token punctuation">.</span>isPalindrome<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 输出 False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码说明" tabindex="-1"><a class="header-anchor" href="#代码说明"><span>代码说明</span></a></h2><h3 id="方法二详细说明" tabindex="-1"><a class="header-anchor" href="#方法二详细说明"><span>方法二详细说明</span></a></h3><ol><li><p><strong>特殊情况处理</strong></p><ul><li>负数一定不是回文数</li><li>以0结尾的数（除了0本身）不可能是回文数</li></ul></li><li><p><strong>反转过程</strong></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">reversed_half <span class="token operator">=</span> reversed_half <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span>  <span class="token comment"># 构建反转数</span></span>
<span class="line">x <span class="token operator">//=</span> <span class="token number">10</span>                                     <span class="token comment"># 去除末位数字</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>判断条件</strong></p><ul><li>偶数位数：x == reversed_half</li><li>奇数位数：x == reversed_half // 10</li></ul></li></ol><blockquote><p><strong>注意：</strong></p><ul><li>此方法不需要将整个数字反转</li><li>只需要反转一半数字即可判断</li><li>对于大数处理更有效率</li></ul></blockquote>`,33))])}const q=t(u,[["render",y],["__file","09.回文数.html.vue"]]),P=JSON.parse('{"path":"/fpython/example/algorithm/09.%E5%9B%9E%E6%96%87%E6%95%B0.html","title":"09：回文数","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"提示","slug":"提示","link":"#提示","children":[]}]},{"level":2,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[{"level":3,"title":"方法一：字符串转换法","slug":"方法一-字符串转换法","link":"#方法一-字符串转换法","children":[]},{"level":3,"title":"方法二：数字反转法","slug":"方法二-数字反转法","link":"#方法二-数字反转法","children":[]}]},{"level":2,"title":"代码说明","slug":"代码说明","link":"#代码说明","children":[{"level":3,"title":"方法二详细说明","slug":"方法二详细说明","link":"#方法二详细说明","children":[]}]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/example/algorithm/09.回文数.md"}');export{q as comp,P as data};
