import{_ as l,c as o,a as s,b as a,d as p,e as t,f as c,r as i,o as u}from"./app-BCC5ysrj.js";const d={},r={class:"vuepress-toc"},k={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},x={class:"vuepress-toc-item"};function _(w,n){const e=i("router-link");return u(),o("div",null,[n[9]||(n[9]=s("h1",{id:"lambda-和-map-函数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#lambda-和-map-函数"},[s("span",null,[s("code",null,"lambda"),a(" 和 "),s("code",null,"map"),a(" 函数")])])],-1)),s("nav",r,[s("ul",null,[s("li",k,[p(e,{to:"#lambda-表达式"},{default:t(()=>n[0]||(n[0]=[a("lambda 表达式")])),_:1}),s("ul",null,[s("li",m,[p(e,{to:"#用法"},{default:t(()=>n[1]||(n[1]=[a("用法")])),_:1})]),s("li",b,[p(e,{to:"#特点"},{default:t(()=>n[2]||(n[2]=[a("特点")])),_:1})]),s("li",v,[p(e,{to:"#示例"},{default:t(()=>n[3]||(n[3]=[a("示例")])),_:1})])])]),s("li",h,[p(e,{to:"#map-函数"},{default:t(()=>n[4]||(n[4]=[a("map 函数")])),_:1}),s("ul",null,[s("li",y,[p(e,{to:"#用法-1"},{default:t(()=>n[5]||(n[5]=[a("用法")])),_:1})]),s("li",f,[p(e,{to:"#特点-1"},{default:t(()=>n[6]||(n[6]=[a("特点")])),_:1})]),s("li",g,[p(e,{to:"#示例-1"},{default:t(()=>n[7]||(n[7]=[a("示例")])),_:1})])])]),s("li",x,[p(e,{to:"#综合示例"},{default:t(()=>n[8]||(n[8]=[a("综合示例")])),_:1})])])]),n[10]||(n[10]=c(`<p>Python 提供了许多强大的内置函数和特性，使得数据处理和函数式编程变得简单而高效。本文将详细介绍 <code>lambda</code> 和 <code>map</code> 函数的用法及其应用场景。</p><h2 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式"><span><code>lambda</code> 表达式</span></a></h2><p><code>lambda</code> 表达式用于创建匿名函数。它是一种简洁的函数定义方式，适用于需要一个简单函数而不想正式定义的场合。</p><h3 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 传统函数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">+</span> y</span>
<span class="line"></span>
<span class="line"><span class="token comment"># lambda 表达式</span></span>
<span class="line">add_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add_lambda<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li><code>lambda</code> 函数可以有多个参数，但只能有一个表达式。</li><li>适用于简单的计算或作为高阶函数的参数。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 使用 lambda 表达式进行排序</span></span>
<span class="line">pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">pairs<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> pair<span class="token punctuation">:</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>pairs<span class="token punctuation">)</span>  <span class="token comment"># 输出: [(3, &#39;three&#39;), (1, &#39;one&#39;), (2, &#39;two&#39;)]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="map-函数" tabindex="-1"><a class="header-anchor" href="#map-函数"><span><code>map</code> 函数</span></a></h2><p><code>map</code> 函数用于将一个函数应用到一个或多个可迭代对象的每个元素上，返回一个迭代器。</p><h3 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1"><span>用法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> x <span class="token operator">*</span> x</span>
<span class="line"></span>
<span class="line">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">squared <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>squared<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: [1, 4, 9, 16]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点</span></a></h3><ul><li><code>map</code> 可以接受多个可迭代对象作为参数。</li><li>返回一个迭代器，需要用 <code>list()</code> 或 <code>tuple()</code> 转换为列表或元组。</li></ul><h3 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 使用 lambda 和 map 结合</span></span>
<span class="line">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">squared <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> numbers<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>squared<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: [1, 4, 9, 16]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="综合示例" tabindex="-1"><a class="header-anchor" href="#综合示例"><span>综合示例</span></a></h2><p>以下是一个综合示例，展示如何结合使用 <code>zip</code>、<code>lambda</code> 和 <code>map</code>：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 两个列表的元素相加</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></span>
<span class="line">summed <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>summed<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: [5, 7, 9]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用 zip 和 map 计算两个列表的点积</span></span>
<span class="line">dot_product <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>dot_product<span class="token punctuation">)</span>  <span class="token comment"># 输出: 32</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20))])}const N=l(d,[["render",_],["__file","function-lambda_map.html.vue"]]),j=JSON.parse('{"path":"/fpython/library/function/function-lambda_map.html","title":"lambda 和 map 函数","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"lambda 表达式","slug":"lambda-表达式","link":"#lambda-表达式","children":[{"level":3,"title":"用法","slug":"用法","link":"#用法","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"map 函数","slug":"map-函数","link":"#map-函数","children":[{"level":3,"title":"用法","slug":"用法-1","link":"#用法-1","children":[]},{"level":3,"title":"特点","slug":"特点-1","link":"#特点-1","children":[]},{"level":3,"title":"示例","slug":"示例-1","link":"#示例-1","children":[]}]},{"level":2,"title":"综合示例","slug":"综合示例","link":"#综合示例","children":[]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":2}]},"filePathRelative":"fpython/library/function/function-lambda_map.md"}');export{N as comp,j as data};
