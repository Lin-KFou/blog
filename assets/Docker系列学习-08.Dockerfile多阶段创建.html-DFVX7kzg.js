import{_ as p,c as t,a as n,d as e,e as l,f as c,r as o,o as r,b as i}from"./app-BCC5ysrj.js";const d={},u={class:"vuepress-toc"},m={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},k={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"},D={class:"vuepress-toc-item"};function x(y,s){const a=o("router-link");return r(),t("div",null,[s[9]||(s[9]=n("h1",{id:"_08-dockerfile多阶段创建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_08-dockerfile多阶段创建"},[n("span",null,"08. Dockerfile多阶段创建")])],-1)),n("nav",u,[n("ul",null,[n("li",m,[e(a,{to:"#简介"},{default:l(()=>s[0]||(s[0]=[i("简介")])),_:1})]),n("li",v,[e(a,{to:"#_1-传统构建方式的问题"},{default:l(()=>s[1]||(s[1]=[i("1. 传统构建方式的问题")])),_:1}),n("ul",null,[n("li",k,[e(a,{to:"#_1-1-单一-dockerfile-方式"},{default:l(()=>s[2]||(s[2]=[i("1.1 单一 Dockerfile 方式")])),_:1})]),n("li",b,[e(a,{to:"#_1-2-多-dockerfile-方式"},{default:l(()=>s[3]||(s[3]=[i("1.2 多 Dockerfile 方式")])),_:1})])])]),n("li",h,[e(a,{to:"#_2-多阶段构建"},{default:l(()=>s[4]||(s[4]=[i("2. 多阶段构建")])),_:1}),n("ul",null,[n("li",g,[e(a,{to:"#_2-1-基本用法"},{default:l(()=>s[5]||(s[5]=[i("2.1 基本用法")])),_:1})]),n("li",f,[e(a,{to:"#_2-2-构建镜像"},{default:l(()=>s[6]||(s[6]=[i("2.2 构建镜像")])),_:1})]),n("li",_,[e(a,{to:"#_2-3-高级特性"},{default:l(()=>s[7]||(s[7]=[i("2.3 高级特性")])),_:1})])])]),n("li",D,[e(a,{to:"#_3-最佳实践"},{default:l(()=>s[8]||(s[8]=[i("3. 最佳实践")])),_:1})])])]),s[10]||(s[10]=c(`<hr><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>多阶段构建(Multi-stage builds)是 Docker 17.05 引入的新特性，它允许在一个 Dockerfile 中使用多个 FROM 语句。这种方式可以:</p><ul><li>大幅减少最终镜像的体积</li><li>避免在构建过程中引入不必要的依赖</li><li>简化构建流程</li></ul><h2 id="_1-传统构建方式的问题" tabindex="-1"><a class="header-anchor" href="#_1-传统构建方式的问题"><span>1. 传统构建方式的问题</span></a></h2><p>在多阶段构建出现之前，通常采用两种方式构建镜像：</p><ul><li>全部放入一个 Dockerfile</li><li>分散到多个 Dockerfile</li></ul><h3 id="_1-1-单一-dockerfile-方式" tabindex="-1"><a class="header-anchor" href="#_1-1-单一-dockerfile-方式"><span>1.1 单一 Dockerfile 方式</span></a></h3><p><strong>存在的问题：</strong></p><ul><li>镜像层次多，镜像体积较大，部署时间变长</li><li>源代码存在泄露的风险</li></ul><h4 id="示例-构建-go-应用" tabindex="-1"><a class="header-anchor" href="#示例-构建-go-应用"><span>示例：构建 Go 应用</span></a></h4><ol><li><p>创建 app.go 文件：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写 Dockerfile.one：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">FROM golang<span class="token punctuation">:</span>1.9<span class="token punctuation">-</span>alpine</span>
<span class="line">RUN apk <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>cache add git ca<span class="token punctuation">-</span>certificates</span>
<span class="line">WORKDIR /go/src/github.com/go/helloworld</span>
<span class="line">COPY app.go .</span>
<span class="line">RUN go get <span class="token punctuation">-</span>d <span class="token punctuation">-</span>v github.com/go<span class="token punctuation">-</span>sql<span class="token punctuation">-</span>driver/mysql \\</span>
<span class="line">    <span class="token important">&amp;&amp;</span> CGO_ENABLED=0 GOOS=linux go build <span class="token punctuation">-</span>a <span class="token punctuation">-</span>installsuffix cgo <span class="token punctuation">-</span>o app . \\</span>
<span class="line">    <span class="token important">&amp;&amp;</span> cp /go/src/github.com/go/helloworld/app /root</span>
<span class="line">    </span>
<span class="line">WORKDIR /root/</span>
<span class="line">CMD <span class="token punctuation">[</span><span class="token string">&quot;./app&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构建镜像：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> go/helloword:1 <span class="token parameter variable">-f</span> Dockerfile.one <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="_1-2-多-dockerfile-方式" tabindex="-1"><a class="header-anchor" href="#_1-2-多-dockerfile-方式"><span>1.2 多 Dockerfile 方式</span></a></h3><p><strong>基本思路：</strong></p><ul><li>第一个 Dockerfile 用于编译构建</li><li>第二个 Dockerfile 用于生成运行环境</li><li>使用脚本将两个阶段连接起来</li></ul><p><strong>示例：</strong></p><ol><li><p>编写 Dockerfile.build（构建阶段）：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">FROM golang<span class="token punctuation">:</span>1.9<span class="token punctuation">-</span>alpine</span>
<span class="line">RUN apk <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>cache add git</span>
<span class="line">WORKDIR /go/src/github.com/go/helloworld</span>
<span class="line">COPY app.go .</span>
<span class="line">RUN go get <span class="token punctuation">-</span>d <span class="token punctuation">-</span>v github.com/go<span class="token punctuation">-</span>sql<span class="token punctuation">-</span>driver/mysql \\</span>
<span class="line">    <span class="token important">&amp;&amp;</span> CGO_ENABLED=0 GOOS=linux go build <span class="token punctuation">-</span>a <span class="token punctuation">-</span>installsuffix cgo <span class="token punctuation">-</span>o app .</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>编写 Dockerfile.copy（运行阶段）：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">FROM alpine<span class="token punctuation">:</span>latest</span>
<span class="line">RUN apk <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>cache add ca<span class="token punctuation">-</span>certificates</span>
<span class="line">WORKDIR /root/</span>
<span class="line">COPY app .</span>
<span class="line">CMD <span class="token punctuation">[</span><span class="token string">&quot;./app&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建构建脚本 build.sh：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/sh</span></span>
<span class="line"><span class="token builtin class-name">echo</span> Building go/helloworld:build</span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> go/helloworld:build <span class="token builtin class-name">.</span> <span class="token parameter variable">-f</span> Dockerfile.build</span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> create <span class="token parameter variable">--name</span> extract go/helloworld:build</span>
<span class="line"><span class="token function">docker</span> <span class="token function">cp</span> extract:/go/src/github.com/go/helloworld/app ./app</span>
<span class="line"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> extract</span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">echo</span> Building go/helloworld:2</span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> build --no-cache <span class="token parameter variable">-t</span> go/helloworld:2 <span class="token builtin class-name">.</span> <span class="token parameter variable">-f</span> Dockerfile.copy</span>
<span class="line"><span class="token function">rm</span> ./app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行构建：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">chmod</span> +x build.sh</span>
<span class="line"></span>
<span class="line">./build.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>镜像大小对比：</strong></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">$ <span class="token function">docker</span> image <span class="token function">ls</span></span>
<span class="line"></span>
<span class="line">REPOSITORY      TAG    IMAGE ID        CREATED         SIZE</span>
<span class="line">go/helloworld   <span class="token number">2</span>      f7cf3465432c    <span class="token number">22</span> seconds ago  <span class="token number">6</span>.47MB</span>
<span class="line">go/helloworld   <span class="token number">1</span>      f55d3e16affc    <span class="token number">2</span> minutes ago   295MB</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong> 虽然第二种方式可以得到更小的镜像，但构建过程较为复杂。</p></blockquote><h2 id="_2-多阶段构建" tabindex="-1"><a class="header-anchor" href="#_2-多阶段构建"><span>2. 多阶段构建</span></a></h2><h3 id="_2-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_2-1-基本用法"><span>2.1 基本用法</span></a></h3><p>使用多阶段构建，只需要一个 Dockerfile 就可以实现上述功能：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">FROM golang<span class="token punctuation">:</span>1.9<span class="token punctuation">-</span>alpine as builder</span>
<span class="line"></span>
<span class="line">RUN apk <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>cache add git</span>
<span class="line"></span>
<span class="line">WORKDIR /go/src/github.com/go/helloworld/</span>
<span class="line"></span>
<span class="line">RUN go get <span class="token punctuation">-</span>d <span class="token punctuation">-</span>v github.com/go<span class="token punctuation">-</span>sql<span class="token punctuation">-</span>driver/mysql</span>
<span class="line"></span>
<span class="line">COPY app.go .</span>
<span class="line"></span>
<span class="line">RUN CGO_ENABLED=0 GOOS=linux go build <span class="token punctuation">-</span>a <span class="token punctuation">-</span>installsuffix cgo <span class="token punctuation">-</span>o app .</span>
<span class="line"></span>
<span class="line">FROM alpine<span class="token punctuation">:</span>latest as prod</span>
<span class="line"></span>
<span class="line">RUN apk <span class="token punctuation">-</span><span class="token punctuation">-</span>no<span class="token punctuation">-</span>cache add ca<span class="token punctuation">-</span>certificates</span>
<span class="line"></span>
<span class="line">WORKDIR /root/</span>
<span class="line"></span>
<span class="line">COPY <span class="token punctuation">-</span><span class="token punctuation">-</span>from=0 /go/src/github.com/go/helloworld/app .</span>
<span class="line"></span>
<span class="line">CMD <span class="token punctuation">[</span><span class="token string">&quot;./app&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-构建镜像" tabindex="-1"><a class="header-anchor" href="#_2-2-构建镜像"><span>2.2 构建镜像</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> go/helloworld:3 <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-3-高级特性" tabindex="-1"><a class="header-anchor" href="#_2-3-高级特性"><span>2.3 高级特性</span></a></h3><h4 id="构建特定阶段" tabindex="-1"><a class="header-anchor" href="#构建特定阶段"><span>构建特定阶段</span></a></h4><p>使用 <code>--target</code> 参数可以指定构建到某个阶段：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 只构建 builder 阶段</span></span>
<span class="line"><span class="token function">docker</span> build <span class="token parameter variable">--target</span> builder <span class="token parameter variable">-t</span> username/imagename:tag <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="从其他镜像复制文件" tabindex="-1"><a class="header-anchor" href="#从其他镜像复制文件"><span>从其他镜像复制文件</span></a></h4><p>COPY 指令支持从其他阶段或外部镜像复制文件：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token comment"># 从上一阶段复制</span></span>
<span class="line">COPY <span class="token punctuation">-</span><span class="token punctuation">-</span>from=builder /go/src/app .</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 从指定镜像复制</span></span>
<span class="line">COPY <span class="token punctuation">-</span><span class="token punctuation">-</span>from=nginx<span class="token punctuation">:</span>latest /etc/nginx/nginx.conf /nginx.conf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-最佳实践" tabindex="-1"><a class="header-anchor" href="#_3-最佳实践"><span>3. 最佳实践</span></a></h2><ul><li>将构建阶段放在前面，运行阶段放在后面</li><li>使用 <code>as</code> 为每个阶段命名，提高可读性</li><li>只复制必要的文件，减少镜像体积</li><li>合理使用缓存，提高构建效率</li></ul>`,35))])}const R=p(d,[["render",x],["__file","Docker系列学习-08.Dockerfile多阶段创建.html.vue"]]),E=JSON.parse('{"path":"/flinux/Kubernetes/Docker%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0/Docker%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0-08.Dockerfile%E5%A4%9A%E9%98%B6%E6%AE%B5%E5%88%9B%E5%BB%BA.html","title":"08. Dockerfile多阶段创建","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"1. 传统构建方式的问题","slug":"_1-传统构建方式的问题","link":"#_1-传统构建方式的问题","children":[{"level":3,"title":"1.1 单一 Dockerfile 方式","slug":"_1-1-单一-dockerfile-方式","link":"#_1-1-单一-dockerfile-方式","children":[]},{"level":3,"title":"1.2 多 Dockerfile 方式","slug":"_1-2-多-dockerfile-方式","link":"#_1-2-多-dockerfile-方式","children":[]}]},{"level":2,"title":"2. 多阶段构建","slug":"_2-多阶段构建","link":"#_2-多阶段构建","children":[{"level":3,"title":"2.1 基本用法","slug":"_2-1-基本用法","link":"#_2-1-基本用法","children":[]},{"level":3,"title":"2.2 构建镜像","slug":"_2-2-构建镜像","link":"#_2-2-构建镜像","children":[]},{"level":3,"title":"2.3 高级特性","slug":"_2-3-高级特性","link":"#_2-3-高级特性","children":[]}]},{"level":2,"title":"3. 最佳实践","slug":"_3-最佳实践","link":"#_3-最佳实践","children":[]}],"git":{"updatedTime":1709276200000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":2}]},"filePathRelative":"flinux/Kubernetes/Docker系列学习/Docker系列学习-08.Dockerfile多阶段创建.md"}');export{R as comp,E as data};
