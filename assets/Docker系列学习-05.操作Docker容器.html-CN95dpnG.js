import{_ as t,c,a as n,d as a,e as l,f as o,r as p,o as r,b as i}from"./app-BCC5ysrj.js";const d={},u={class:"vuepress-toc"},m={class:"vuepress-toc-item"},k={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},x={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"},D={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},E={class:"vuepress-toc-item"},I={class:"vuepress-toc-item"},j={class:"vuepress-toc-item"},B={class:"vuepress-toc-item"};function w(q,s){const e=p("router-link");return r(),c("div",null,[s[15]||(s[15]=n("h1",{id:"_05-操作docker容器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_05-操作docker容器"},[n("span",null,"05. 操作Docker容器")])],-1)),n("nav",u,[n("ul",null,[n("li",m,[a(e,{to:"#简介"},{default:l(()=>s[0]||(s[0]=[i("简介")])),_:1})]),n("li",k,[a(e,{to:"#_1-容器的基本操作"},{default:l(()=>s[1]||(s[1]=[i("1. 容器的基本操作")])),_:1}),n("ul",null,[n("li",v,[a(e,{to:"#_1-1-创建和启动容器"},{default:l(()=>s[2]||(s[2]=[i("1.1 创建和启动容器")])),_:1})]),n("li",h,[a(e,{to:"#_1-2-容器管理命令"},{default:l(()=>s[3]||(s[3]=[i("1.2 容器管理命令")])),_:1})])])]),n("li",b,[a(e,{to:"#_2-容器运行模式"},{default:l(()=>s[4]||(s[4]=[i("2. 容器运行模式")])),_:1}),n("ul",null,[n("li",f,[a(e,{to:"#_2-1-后台运行"},{default:l(()=>s[5]||(s[5]=[i("2.1 后台运行")])),_:1})])])]),n("li",g,[a(e,{to:"#终止容器"},{default:l(()=>s[6]||(s[6]=[i("终止容器")])),_:1})]),n("li",x,[a(e,{to:"#进入容器"},{default:l(()=>s[7]||(s[7]=[i("进入容器")])),_:1}),n("ul",null,[n("li",_,[a(e,{to:"#attach命令"},{default:l(()=>s[8]||(s[8]=[i("attach命令")])),_:1})]),n("li",D,[a(e,{to:"#使用exec命令"},{default:l(()=>s[9]||(s[9]=[i("使用exec命令")])),_:1})])])]),n("li",y,[a(e,{to:"#导出和导入容器"},{default:l(()=>s[10]||(s[10]=[i("导出和导入容器")])),_:1}),n("ul",null,[n("li",E,[a(e,{to:"#导出容器-docker-export"},{default:l(()=>s[11]||(s[11]=[i("导出容器 docker export")])),_:1})]),n("li",I,[a(e,{to:"#导入容器快照-docker-inport"},{default:l(()=>s[12]||(s[12]=[i("导入容器快照 docker inport")])),_:1})])])]),n("li",j,[a(e,{to:"#删除容器"},{default:l(()=>s[13]||(s[13]=[i("删除容器")])),_:1}),n("ul",null,[n("li",B,[a(e,{to:"#清理所有处于终止状态的容器"},{default:l(()=>s[14]||(s[14]=[i("清理所有处于终止状态的容器")])),_:1})])])])])]),s[16]||(s[16]=o(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>容器是 Docker 的核心概念，它是一个轻量级的、独立运行的应用单元，包含应用程序及其运行环境。与虚拟机相比，容器共享主机操作系统内核，仅打包必要的运行环境，因此更加轻量和高效。</p><p>本文将介绍如何管理 Docker 容器的完整生命周期，包括创建、启动、停止和删除等操作。</p><h2 id="_1-容器的基本操作" tabindex="-1"><a class="header-anchor" href="#_1-容器的基本操作"><span>1. 容器的基本操作</span></a></h2><h3 id="_1-1-创建和启动容器" tabindex="-1"><a class="header-anchor" href="#_1-1-创建和启动容器"><span>1.1 创建和启动容器</span></a></h3><p>Docker 提供了两种启动容器的方式：</p><ul><li>基于镜像新建并启动容器</li><li>重新启动已终止的容器</li></ul><p>使用 <code>docker run</code> 命令创建并启动容器：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 运行容器并输出信息</span></span>
<span class="line"><span class="token function">docker</span> run centos:7 /bin/echo <span class="token string">&quot;Hello wang&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面来启动一个bash终端，允许用户进行交互</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 启动交互式终端</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> centos:7 /bin/bash</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>-i</code>: 保持标准输入打开</li><li><code>-t</code>: 分配伪终端(pseudo-tty)</li></ul><p>在交互模式下，用户可以通过创建的终端来输入命令。例如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@29bd2b63c1af /<span class="token punctuation">]</span><span class="token comment"># ls</span></span>
<span class="line">anaconda-post.log  dev  home  lib64  mnt  proc  run   srv  tmp  var</span>
<span class="line">bin                etc  lib   media  opt  root  sbin  sys  usr</span>
<span class="line"><span class="token punctuation">[</span>root@29bd2b63c1af /<span class="token punctuation">]</span><span class="token comment"># pwd</span></span>
<span class="line">/</span>
<span class="line"><span class="token punctuation">[</span>root@29bd2b63c1af /<span class="token punctuation">]</span><span class="token comment"># touch /mnt/a.txt</span></span>
<span class="line"><span class="token punctuation">[</span>root@29bd2b63c1af /<span class="token punctuation">]</span><span class="token comment"># exit     #退出容器</span></span>
<span class="line"><span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-a</span>       <span class="token comment">#列出所有容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">diff</span> 容器名或sha256值     <span class="token comment">#列出某个容器的历史操作</span></span>
<span class="line"><span class="token function">docker</span> stop 容器名或sha256值     <span class="token comment">#关闭容器</span></span>
<span class="line"><span class="token function">docker</span> hostory   镜像名:标签     <span class="token comment">#列出镜像的历史操作</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当利用<code>docker run</code>来创建容器时，Docker在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中</li><li>从地址池配置一个IP地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><h3 id="_1-2-容器管理命令" tabindex="-1"><a class="header-anchor" href="#_1-2-容器管理命令"><span>1.2 容器管理命令</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看容器</span></span>
<span class="line"><span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-a</span>    <span class="token comment"># 列出所有容器</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">ps</span>                <span class="token comment"># 查看运行中的容器</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 启动/停止容器</span></span>
<span class="line"><span class="token function">docker</span> container start <span class="token operator">&lt;</span>容器ID<span class="token operator">&gt;</span>   <span class="token comment"># 启动已终止的容器</span></span>
<span class="line"><span class="token function">docker</span> container stop <span class="token operator">&lt;</span>容器ID<span class="token operator">&gt;</span>    <span class="token comment"># 停止运行中的容器</span></span>
<span class="line"><span class="token function">docker</span> container restart <span class="token operator">&lt;</span>容器ID<span class="token operator">&gt;</span> <span class="token comment"># 重启容器</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 容器状态</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>容器ID<span class="token operator">&gt;</span>     <span class="token comment"># 查看容器文件变更</span></span>
<span class="line"><span class="token function">docker</span> <span class="token function">top</span> <span class="token operator">&lt;</span>容器ID<span class="token operator">&gt;</span>      <span class="token comment"># 查看容器进程</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-容器运行模式" tabindex="-1"><a class="header-anchor" href="#_2-容器运行模式"><span>2. 容器运行模式</span></a></h2><h3 id="_2-1-后台运行" tabindex="-1"><a class="header-anchor" href="#_2-1-后台运行"><span>2.1 后台运行</span></a></h3><p>使用 <code>-d</code> 参数可以让容器在后台运行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 前台运行</span></span>
<span class="line"><span class="token function">docker</span> run centos:7 /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span>
<span class="line"><span class="token comment"># 后台运行</span></span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> centos:7 /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;while true;do echo hello world;sleep 1;done&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看容器日志</span></span>
<span class="line"><span class="token function">docker</span> logs <span class="token operator">&lt;</span>容器ID<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：容器是否持续运行取决于启动命令，而不是 <code>-d</code> 参数</p></blockquote><h2 id="终止容器" tabindex="-1"><a class="header-anchor" href="#终止容器"><span>终止容器</span></a></h2><p>可以使用<code>docker container stop</code>来终止一个运行中的容器<br> 此外，当Docker容器中指定的应用终结时，容器也自动终止<br> 如上面启动了一个终端的容器，用户通过<code>exit</code>命令或<code>ctrl+d</code>来退出终端时，所创建的容器立刻终止。<br> 终止状态的容器可以用<code>docker container ls -a</code>来查看。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-a</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>处于终止状态的容器，可以通过 <code>docker container start</code>命令重新启动<br> 还有 <code>docker container restart</code>命令会将一个运行状态的容器终止，然后在重新启动它。</p><h2 id="进入容器" tabindex="-1"><a class="header-anchor" href="#进入容器"><span>进入容器</span></a></h2><p>使用 <code>-d</code>参数时，容器启动后会进入后台运行<br> 当需要进入容器进行操作，可以使用<code>docker attach</code>或者<code>docker exec</code>，建议使用 <code>docker exec</code>命令。</p><h3 id="attach命令" tabindex="-1"><a class="header-anchor" href="#attach命令"><span>attach命令</span></a></h3><p>使用attach命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span> centos:7</span>
<span class="line"><span class="token function">docker</span> container <span class="token function">ls</span></span>
<span class="line"><span class="token function">docker</span> attach 容器ID号</span>
<span class="line"><span class="token comment">## 说明：如果从这个stdin中exit，会导致容器的停止</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用exec命令" tabindex="-1"><a class="header-anchor" href="#使用exec命令"><span>使用exec命令</span></a></h3><h4 id="i-t参数" tabindex="-1"><a class="header-anchor" href="#i-t参数"><span>-i -t参数</span></a></h4><p><code>docker exec</code>后边可以跟多个参数，这里主要是-i -t参数<br> 只有<code>-i</code>参数时，由于没有分配伪终端，界面没有我们熟悉的Linux命令提示符。但命令执行结果仍然可以返回。<br><code>-i -t</code>参数一起使用，就是熟悉的linux命令提示符</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span> centos:7</span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> container <span class="token function">ls</span> </span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> 容器ID <span class="token function">bash</span></span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器ID  <span class="token function">bash</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 说明：从这个stdin中exit，不会导致容器的停止。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="导出和导入容器" tabindex="-1"><a class="header-anchor" href="#导出和导入容器"><span>导出和导入容器</span></a></h2><h3 id="导出容器-docker-export" tabindex="-1"><a class="header-anchor" href="#导出容器-docker-export"><span>导出容器 docker export</span></a></h3><p>如果要导出本地某个容器，可以使用<code>docker export</code>命令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-a</span> </span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> <span class="token builtin class-name">export</span> 容器ID <span class="token operator">&gt;</span> filename.tar  </span>
<span class="line"><span class="token comment">## 这样将导出容器快照到本地文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导入容器快照-docker-inport" tabindex="-1"><a class="header-anchor" href="#导入容器快照-docker-inport"><span>导入容器快照 docker inport</span></a></h3><p>可以使用<code>docker import</code>从容器快照文件中再导入为镜像</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> filename.tar <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - test/centos:v2.0</span>
<span class="line"><span class="token function">docker</span> image <span class="token function">ls</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，也可以通过制定URL或者某个目录来导入</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token function">import</span> http://example.com/exampleimage.tgz example/imagerepo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><strong>说明：</strong><br> 用户既可以使用<code>docker load</code>来导入镜像存储文件到本地镜像库，也可以使用<code>docker import</code>来导入一个容器快照到本地镜像库。两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息(即仅保存容器当时的快照状态)，而镜像存储文件将保存完整记录，体积也要大。从容器快照文件导入时可以重新制定标签等元数据信息。</p></blockquote><h2 id="删除容器" tabindex="-1"><a class="header-anchor" href="#删除容器"><span>删除容器</span></a></h2><p>可以使用<code>docker container rm</code>来删除一个处于中止状态的容器。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> container <span class="token function">rm</span> 容器ID或容器名      <span class="token comment">#删除容器</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果要删除一个运行中的容器，可以添加<code>-f</code>参数，Docker会发送SIGKILL信号给容器</p><h3 id="清理所有处于终止状态的容器" tabindex="-1"><a class="header-anchor" href="#清理所有处于终止状态的容器"><span>清理所有处于终止状态的容器</span></a></h3><p>用<code>docker container ls -a</code>命令可以查看所有已经创建的包括终止状态的容器，当数量过多，可以用下面的命令清理掉所有处于终止状态的容器</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> container prune      <span class="token comment">#删除所有处于终止状态的容器</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,54))])}const L=t(d,[["render",w],["__file","Docker系列学习-05.操作Docker容器.html.vue"]]),N=JSON.parse('{"path":"/flinux/Kubernetes/Docker%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0/Docker%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0-05.%E6%93%8D%E4%BD%9CDocker%E5%AE%B9%E5%99%A8.html","title":"05. 操作Docker容器","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"1. 容器的基本操作","slug":"_1-容器的基本操作","link":"#_1-容器的基本操作","children":[{"level":3,"title":"1.1 创建和启动容器","slug":"_1-1-创建和启动容器","link":"#_1-1-创建和启动容器","children":[]},{"level":3,"title":"1.2 容器管理命令","slug":"_1-2-容器管理命令","link":"#_1-2-容器管理命令","children":[]}]},{"level":2,"title":"2. 容器运行模式","slug":"_2-容器运行模式","link":"#_2-容器运行模式","children":[{"level":3,"title":"2.1 后台运行","slug":"_2-1-后台运行","link":"#_2-1-后台运行","children":[]}]},{"level":2,"title":"终止容器","slug":"终止容器","link":"#终止容器","children":[]},{"level":2,"title":"进入容器","slug":"进入容器","link":"#进入容器","children":[{"level":3,"title":"attach命令","slug":"attach命令","link":"#attach命令","children":[]},{"level":3,"title":"使用exec命令","slug":"使用exec命令","link":"#使用exec命令","children":[]}]},{"level":2,"title":"导出和导入容器","slug":"导出和导入容器","link":"#导出和导入容器","children":[{"level":3,"title":"导出容器 docker export","slug":"导出容器-docker-export","link":"#导出容器-docker-export","children":[]},{"level":3,"title":"导入容器快照 docker inport","slug":"导入容器快照-docker-inport","link":"#导入容器快照-docker-inport","children":[]}]},{"level":2,"title":"删除容器","slug":"删除容器","link":"#删除容器","children":[{"level":3,"title":"清理所有处于终止状态的容器","slug":"清理所有处于终止状态的容器","link":"#清理所有处于终止状态的容器","children":[]}]}],"git":{"updatedTime":1709276200000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":2}]},"filePathRelative":"flinux/Kubernetes/Docker系列学习/Docker系列学习-05.操作Docker容器.md"}');export{L as comp,N as data};
