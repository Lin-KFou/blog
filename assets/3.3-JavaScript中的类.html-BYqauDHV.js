import{_ as l,c as i,a as n,d as e,e as t,f as c,r as o,o as u,b as p}from"./app-BCC5ysrj.js";const r={},d={class:"vuepress-toc"},k={class:"vuepress-toc-item"},v={class:"vuepress-toc-item"},m={class:"vuepress-toc-item"},h={class:"vuepress-toc-item"},b={class:"vuepress-toc-item"},g={class:"vuepress-toc-item"},f={class:"vuepress-toc-item"},y={class:"vuepress-toc-item"},w={class:"vuepress-toc-item"},x={class:"vuepress-toc-item"},j={class:"vuepress-toc-item"},_={class:"vuepress-toc-item"},q={class:"vuepress-toc-item"},S={class:"vuepress-toc-item"},P={class:"vuepress-toc-item"},E={class:"vuepress-toc-item"};function M(A,s){const a=o("router-link");return u(),i("div",null,[s[16]||(s[16]=n("h1",{id:"javascript-中的类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#javascript-中的类"},[n("span",null,"JavaScript 中的类")])],-1)),n("nav",d,[n("ul",null,[n("li",k,[e(a,{to:"#类和构造函数"},{default:t(()=>s[0]||(s[0]=[p("类和构造函数")])),_:1}),n("ul",null,[n("li",v,[e(a,{to:"#类的定义"},{default:t(()=>s[1]||(s[1]=[p("类的定义")])),_:1})]),n("li",m,[e(a,{to:"#构造函数"},{default:t(()=>s[2]||(s[2]=[p("构造函数")])),_:1})]),n("li",h,[e(a,{to:"#创建实例"},{default:t(()=>s[3]||(s[3]=[p("创建实例")])),_:1})]),n("li",b,[e(a,{to:"#省略构造函数"},{default:t(()=>s[4]||(s[4]=[p("省略构造函数")])),_:1})])])]),n("li",g,[e(a,{to:"#继承"},{default:t(()=>s[5]||(s[5]=[p("继承")])),_:1}),n("ul",null,[n("li",f,[e(a,{to:"#基本语法"},{default:t(()=>s[6]||(s[6]=[p("基本语法")])),_:1})]),n("li",y,[e(a,{to:"#super-关键字"},{default:t(()=>s[7]||(s[7]=[p("super 关键字")])),_:1})]),n("li",w,[e(a,{to:"#创建子类实例"},{default:t(()=>s[8]||(s[8]=[p("创建子类实例")])),_:1})])])]),n("li",x,[e(a,{to:"#封装"},{default:t(()=>s[9]||(s[9]=[p("封装")])),_:1}),n("ul",null,[n("li",j,[e(a,{to:"#私有属性"},{default:t(()=>s[10]||(s[10]=[p("私有属性")])),_:1})]),n("li",_,[e(a,{to:"#访问私有属性"},{default:t(()=>s[11]||(s[11]=[p("访问私有属性")])),_:1})]),n("li",q,[e(a,{to:"#私有方法"},{default:t(()=>s[12]||(s[12]=[p("私有方法")])),_:1})])])]),n("li",S,[e(a,{to:"#静态成员"},{default:t(()=>s[13]||(s[13]=[p("静态成员")])),_:1}),n("ul",null,[n("li",P,[e(a,{to:"#静态方法"},{default:t(()=>s[14]||(s[14]=[p("静态方法")])),_:1})]),n("li",E,[e(a,{to:"#静态属性"},{default:t(()=>s[15]||(s[15]=[p("静态属性")])),_:1})])])])])]),s[17]||(s[17]=c(`<hr><h2 id="类和构造函数" tabindex="-1"><a class="header-anchor" href="#类和构造函数"><span>类和构造函数</span></a></h2><h3 id="类的定义" tabindex="-1"><a class="header-anchor" href="#类的定义"><span>类的定义</span></a></h3><p>使用 <code>class</code> 关键字声明一个类：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">introduceSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My name is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h3><p>构造函数使用 <code>constructor</code> 关键字声明，执行以下步骤：</p><ol><li>创建新对象</li><li>绑定 this</li><li>执行构造函数代码</li><li>返回新对象</li></ol><h3 id="创建实例" tabindex="-1"><a class="header-anchor" href="#创建实例"><span>创建实例</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> giles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;Giles&quot;</span><span class="token punctuation">)</span></span>
<span class="line">giles<span class="token punctuation">.</span><span class="token function">introduceSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="省略构造函数" tabindex="-1"><a class="header-anchor" href="#省略构造函数"><span>省略构造函数</span></a></h3><p>如果不需要特殊的初始化，可以省略构造函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I am sleeping&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> spot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">spot<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h3><p>使用 <code>extends</code> 关键字实现继承：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Professor</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    teaches</span>
<span class="line"></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> teaches</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>   </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>teaches <span class="token operator">=</span> teaches</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">introduceSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My name is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; and I teach &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>teaches<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">grade</span><span class="token punctuation">(</span><span class="token parameter">paper</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> grade <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="super-关键字" tabindex="-1"><a class="header-anchor" href="#super-关键字"><span>super 关键字</span></a></h3><ul><li>必须在访问 this 之前调用 super()</li><li>用于调用父类构造函数</li><li>传递父类构造函数所需的参数</li></ul><h3 id="创建子类实例" tabindex="-1"><a class="header-anchor" href="#创建子类实例"><span>创建子类实例</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> walsh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Professor</span><span class="token punctuation">(</span><span class="token string">&quot;walsh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;math&quot;</span><span class="token punctuation">)</span></span>
<span class="line">walsh<span class="token punctuation">.</span><span class="token function">introduceSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">walsh<span class="token punctuation">.</span><span class="token function">grade</span><span class="token punctuation">(</span><span class="token string">&quot;my paper&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h2><h3 id="私有属性" tabindex="-1"><a class="header-anchor" href="#私有属性"><span>私有属性</span></a></h3><p>使用 <code>#</code> 前缀声明私有属性：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    #year</span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> year</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>#year <span class="token operator">=</span> year</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">introduceSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My name is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; and I study &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#year<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">canStudyArchey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#year <span class="token operator">&gt;</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="访问私有属性" tabindex="-1"><a class="header-anchor" href="#访问私有属性"><span>访问私有属性</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> summers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;summers&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">summer<span class="token punctuation">.</span><span class="token function">introduceSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">summer<span class="token punctuation">.</span><span class="token function">canStudyArchey</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">summers<span class="token punctuation">.</span>#year  <span class="token comment">// 错误：无法从类外部访问私有属性</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="私有方法" tabindex="-1"><a class="header-anchor" href="#私有方法"><span>私有方法</span></a></h3><p>私有方法也使用 <code>#</code> 前缀，只能在类内部调用：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">somePublicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">#somePrivateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">#somePrivateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I am private&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">myExample<span class="token punctuation">.</span><span class="token function">somePublicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">myExample<span class="token punctuation">.</span><span class="token function">#somePrivateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 错误：无法从类外部访问私有方法</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="静态成员" tabindex="-1"><a class="header-anchor" href="#静态成员"><span>静态成员</span></a></h2><h3 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法"><span>静态方法</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MathUtils</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MathUtils<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态属性" tabindex="-1"><a class="header-anchor" href="#静态属性"><span>静态属性</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token constant">API_URL</span> <span class="token operator">=</span> <span class="token string">&quot;https://api.example.com&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token constant">VERSION</span> <span class="token operator">=</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Config<span class="token punctuation">.</span><span class="token constant">API_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>注意：</strong> 静态成员属于类本身，而不是类的实例。</p></blockquote>`,36))])}const B=l(r,[["render",M],["__file","3.3-JavaScript中的类.html.vue"]]),I=JSON.parse('{"path":"/fhtml/JavaScript/03%EF%BC%9AJS%E5%AF%B9%E8%B1%A1/3.3-JavaScript%E4%B8%AD%E7%9A%84%E7%B1%BB.html","title":"JavaScript 中的类","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"类和构造函数","slug":"类和构造函数","link":"#类和构造函数","children":[{"level":3,"title":"类的定义","slug":"类的定义","link":"#类的定义","children":[]},{"level":3,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":3,"title":"创建实例","slug":"创建实例","link":"#创建实例","children":[]},{"level":3,"title":"省略构造函数","slug":"省略构造函数","link":"#省略构造函数","children":[]}]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[{"level":3,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":3,"title":"super 关键字","slug":"super-关键字","link":"#super-关键字","children":[]},{"level":3,"title":"创建子类实例","slug":"创建子类实例","link":"#创建子类实例","children":[]}]},{"level":2,"title":"封装","slug":"封装","link":"#封装","children":[{"level":3,"title":"私有属性","slug":"私有属性","link":"#私有属性","children":[]},{"level":3,"title":"访问私有属性","slug":"访问私有属性","link":"#访问私有属性","children":[]},{"level":3,"title":"私有方法","slug":"私有方法","link":"#私有方法","children":[]}]},{"level":2,"title":"静态成员","slug":"静态成员","link":"#静态成员","children":[{"level":3,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[]},{"level":3,"title":"静态属性","slug":"静态属性","link":"#静态属性","children":[]}]}],"git":{},"filePathRelative":"fhtml/JavaScript/03：JS对象/3.3-JavaScript中的类.md"}');export{B as comp,I as data};
