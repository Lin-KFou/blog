import{_ as n,c as a,f as e,o as p}from"./app-BCC5ysrj.js";const t={};function l(o,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_4-1-构建post应用需要的数据集" tabindex="-1"><a class="header-anchor" href="#_4-1-构建post应用需要的数据集"><span>4.1 构建POST应用需要的数据集</span></a></h1><ul><li><a href="#41-%E6%9E%84%E5%BB%BApost%E5%BA%94%E7%94%A8%E9%9C%80%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86">4.1 构建POST应用需要的数据集</a><ul><li><a href="#411-post%E5%BA%94%E7%94%A8%E7%9A%84models%E5%AE%9A%E4%B9%89">4.1.1 post应用的Models定义</a></li><li><a href="#412-post%E5%BA%94%E7%94%A8%E5%AE%8C%E6%88%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB">4.1.2 post应用完成数据库迁移</a></li></ul></li></ul><hr><h2 id="_4-1-1-post应用的models定义" tabindex="-1"><a class="header-anchor" href="#_4-1-1-post应用的models定义"><span>4.1.1 post应用的Models定义</span></a></h2><p>本项目中post的功能</p><ul><li>用户在BBS站内发表话题，称为：Topic</li><li>可以针对每一个Topic发表评论，称为：Comment</li><li>可以对每一个Comment支持或者反对</li></ul><p>由于每一个数据表对应一个Model定义，每一个Model都是一个Python类，所以<strong>Model之间是可以继承的</strong></p><ul><li><p>Django规定：所有的Model都必须继承自django.db.models.Model.</p></li><li><p>可以直接继承，或者间接及成果</p></li><li><p>Model中的所有字段都是<code>django.db.models.Field</code>的子类</p></li><li><p>Django会根据Field的类型确定数据库表的字段类型</p></li><li><p>Django内置了数十种Field字段类型，不同的类型支持的参数不一定相同</p><ul><li>但名字，帮助文本，唯一性等参数都是通用的</li></ul></li><li><p>在post应用的models.py文件中定义抽象的Model基类：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Create your models here.</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">BaseModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    post 应用中的Model 基类</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span></span>
<span class="line">        abstract <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;-created_time&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    created_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>help_text<span class="token operator">=</span><span class="token string">u&#39;创建时间&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    last_modified <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>help_text<span class="token operator">=</span><span class="token string">u&#39;修改时间&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">raise</span> NotImplementedError</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代码解析</li><li>定义了两个类属性create_time和last_modified，都是DateTimeField类型，继承自BaseModel的类自动拥有这两个属性</li><li>定义的两个类属性用到了三个Field参数： <ul><li>auto_now_add: 用于将首次创建对象时间设置为当前时间</li><li>auto_now：用于将每次保存对象时间设置为当前时间</li><li>help_text：解释性的帮助文本</li></ul></li><li>定义了抽象方法__str__，继承自BaseModel的类必须实现这个方法，作用是：能够优化打印Model实例的样式</li><li>内部类Meta <ul><li>abstract：声明了这个是抽象类，不能是实例化，表现为BaseModel不会创建数据表</li><li>ordering：声明了排序的规则</li><li>created_time：代表按照创建时间正序排列，负号标识按照创建时间逆序排序</li></ul></li><li>BaseModel定义了两个DateTimeField类型的相关字段，会根据不同的数据存储后端选择对应的数据库字段类型</li></ul></li><li><p>BaseModel直接继承自django.db.models.Model，所以，Topic和Comment可以继承自BaseModel，从而实现间接继承</p><ul><li><p>Topic</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Topic</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    BBS论坛发布的话题  </span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> help_text<span class="token operator">=</span><span class="token string">&#39;话题标题&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    content <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>help_text<span class="token operator">=</span><span class="token string">&#39;话题内容&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    is_online <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>help_text<span class="token operator">=</span><span class="token string">&#39;话题是否在线&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    user <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>to<span class="token operator">=</span>User<span class="token punctuation">,</span> to_field<span class="token operator">=</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> help_text<span class="token operator">=</span><span class="token string">&#39;关联用户表&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;%s: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>外键引用的User字段：ForeignKey</li><li>ForeignKey：是Django内置的应用 django.contrib.auth中定义的Model，之前创建超级用户也是直接使用的这个类型</li></ul></li><li><p>Comment</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Comment</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    BBS 话题评论</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    content <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> help_text<span class="token operator">=</span><span class="token string">&#39;话题评论&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    topic <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>to<span class="token operator">=</span>Topic<span class="token punctuation">,</span>to_field<span class="token operator">=</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>on_delete<span class="token operator">=</span><span class="token string">&#39;models.CASCADE&#39;</span><span class="token punctuation">,</span> help_text<span class="token operator">=</span><span class="token string">&#39;关联话题表&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    up <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> help_text<span class="token operator">=</span><span class="token string">&#39;支持&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    down <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> help_text<span class="token operator">=</span><span class="token string">&#39;反对&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;%d: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="_4-1-2-post应用完成数据库迁移" tabindex="-1"><a class="header-anchor" href="#_4-1-2-post应用完成数据库迁移"><span>4.1.2 post应用完成数据库迁移</span></a></h2><ul><li>编写了post应用的Model定义，为实现这些Models对象的操作，需要使用manage.py提供的数据库迁移工具将Models对象映射为数据库中的表</li><li>在执行迁移命令前，需要把post应用加载到my_bbs项目中，在<code>INSTALLED_APPS</code>的第一行加入:<code>post.apps.PostConfig</code></li><li>然后对post应用执行<code>makemigrations</code>命令,会在post/migrations包下面生成迁移文件，命令：<code>python manage.py makemigrations post</code></li><li>迁移文件也是Python文件，可以利用<code>manage.py</code>提供的<code>sqlmigrate</code>命令打印迁移文件执行的SQL语句：<code>python manage.py sqlmigrate post 0001</code><ul><li>sqlmigrate命令后面跟随应用名称和迁移文件的名称</li></ul></li><li>manage.py提供了更为简单的命令帮助用户检查项目中的问题，可以在manage.py所在的目录下执行 <ul><li><code>python manage.py check</code></li><li>check命令也不会影响数据库</li><li>没有问题，会看到控制台上打印输出：<code>System checkidentified no issues(0 silenced)</code></li></ul></li><li>查看了SQL语句，验证了项目的正确性，就可以执行migrate命令将Models映射为数据库的表了 <ul><li><code>python manage.py migrate</code></li></ul></li><li>由于在刚才的定义中，Topic和Comment没有显示指定表名，默认使用Django的规则：<code>应用名_小写类名</code></li></ul>`,10)]))}const c=n(t,[["render",l],["__file","4.1 构建post应用所需的数据集.html.vue"]]),u=JSON.parse('{"path":"/fpython/htmlsystem/Django/chapter-04%EF%BC%9AORM%E5%BA%94%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/4.1%20%E6%9E%84%E5%BB%BApost%E5%BA%94%E7%94%A8%E6%89%80%E9%9C%80%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86.html","title":"4.1 构建POST应用需要的数据集","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"4.1.1 post应用的Models定义","slug":"_4-1-1-post应用的models定义","link":"#_4-1-1-post应用的models定义","children":[]},{"level":2,"title":"4.1.2 post应用完成数据库迁移","slug":"_4-1-2-post应用完成数据库迁移","link":"#_4-1-2-post应用完成数据库迁移","children":[]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/htmlsystem/Django/chapter-04：ORM应用与原理剖析/4.1 构建post应用所需的数据集.md"}');export{c as comp,u as data};
