import{_ as n,c as a,f as e,o as p}from"./app-BCC5ysrj.js";const l={};function t(i,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_9-3-用户认证系统应用" tabindex="-1"><a class="header-anchor" href="#_9-3-用户认证系统应用"><span>9.3 用户认证系统应用</span></a></h1><ul><li><a href="#93-%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8">9.3 用户认证系统应用</a><ul><li><a href="#931-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%A4%E8%AF%81%E5%90%8E%E7%AB%AF">9.3.1 自定义认证后端</a><ul><li><a href="#%E4%BE%8B%E5%AD%90%E8%AE%A9%E7%94%A8%E6%88%B7%E4%BD%BF%E7%94%A8%E7%BB%9F%E4%B8%80%E5%AF%86%E7%A0%81%E9%80%9A%E8%BF%87%E9%AA%8C%E8%AF%81">例子：让用户使用“统一密码”通过验证</a></li></ul></li><li><a href="#932-%E5%9C%A8%E6%A8%A1%E6%9D%BF%E4%B8%AD%E6%A0%A1%E9%AA%8C%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E5%92%8C%E6%9D%83%E9%99%90">9.3.2 在模板中校验用户身份和权限</a><ul><li><a href="#1-%E5%9C%A8%E6%A8%A1%E6%9D%BF%E4%B8%AD%E6%A0%A1%E9%AA%8C%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD">1. 在模板中校验用户身份</a></li><li><a href="#2-%E5%9C%A8%E6%A8%A1%E6%9D%BF%E4%B8%AD%E6%A0%A1%E9%AA%8C%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90">2. 在模板中校验用户权限</a></li></ul></li><li><a href="#933-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E8%A7%86%E5%9B%BE">9.3.3 身份验证视图</a><ul><li><a href="#1-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E8%A7%86%E5%9B%BE">1. 自定义用户登录视图</a></li><li><a href="#2-%E5%86%85%E7%BD%AE%E7%9A%84%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E8%A7%86%E5%9B%BE">2. 内置的用户登录视图</a></li></ul></li></ul></li></ul><hr><h2 id="_9-3-1-自定义认证后端" tabindex="-1"><a class="header-anchor" href="#_9-3-1-自定义认证后端"><span>9.3.1 自定义认证后端</span></a></h2><p>默认，Django系统中仅指定了一个认证后端：ModelBackend，它只简单地比对数据库中存储的用户名和密码是否匹配。这在很多情况下不能够满足需求，所以，Django允许自定义认证后端，并在AUTHENTICATION_BACKENDS中声明即可</p><p>认证后端需要实现两个方法的Python类</p><ul><li>get_user：方法接受一个参数，这个参数代表用户对象（不一定是auth.User，Django同样允许自定义用户对象）的主键</li><li>authenticate：将用户身份凭据作为关键字参数，大多数情况下，后端中的关键字参数至少会有usern ame和password</li></ul><h3 id="例子-让用户使用-统一密码-通过验证" tabindex="-1"><a class="header-anchor" href="#例子-让用户使用-统一密码-通过验证"><span>例子：让用户使用“统一密码”通过验证</span></a></h3><ul><li><p>post应用下新建backends.py文件</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MasterKeyBackend</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> username <span class="token keyword">and</span> password<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">                user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">&quot;abcdefg&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token keyword">return</span> user</span>
<span class="line">            <span class="token keyword">except</span> User<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_user</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>user_id<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>user_id<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">except</span> User<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>settings文件声明</p><ul><li>列出所有需要的认证后端，例如这里仍然需要指定ModelBackend，否则，系统中只有一个MasterKeyBackend，将不能通过用户名和密码匹配的方式完成用户认证。</li><li>列表中后端的顺序会影响验证过程。Django使用短路逻辑，当其中的一个后端返回了用户对象时，验证过程就会停止。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># settings</span></span>
<span class="line">AUTHENTICATION_BACKENDS <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&#39;django.contrib.auth.backends.ModelBackend&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;post.backends.MasterKeyBackend&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>验证</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> authenticate</span>
<span class="line">bbs <span class="token operator">=</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span><span class="token string">&#39;bbs&#39;</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">&#39;bbs_django&#39;</span><span class="token punctuation">)</span></span>
<span class="line">bbs<span class="token punctuation">.</span>backend   <span class="token comment"># 验证查看使用的验证后端</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_9-3-2-在模板中校验用户身份和权限" tabindex="-1"><a class="header-anchor" href="#_9-3-2-在模板中校验用户身份和权限"><span>9.3.2 在模板中校验用户身份和权限</span></a></h2><ul><li>传递上下文使用的是ResponseContext时，对于默认的配置，可以在模板中使用user和perms变量</li><li>user变量是User或AnonymousUser类型的实例，不论user是什么类型，都可以使用<code>is_authenticated</code>方法判断当前用户是否登录</li><li>perms变量是PermWrapper实例，将user进行了包装。使用它可以校验当前用户是否拥有某些权限</li></ul><h3 id="_1-在模板中校验用户身份" tabindex="-1"><a class="header-anchor" href="#_1-在模板中校验用户身份"><span>1. 在模板中校验用户身份</span></a></h3><ul><li><p>已经登录的用户，<code>is_authenticated</code>会返回<code>True</code>，没有登录，返回<code>False</code></p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">{% if user.is_authenticated %}</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span> Hello {{ user.username }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">{% else %}</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span> Hello AnonymousUser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">{% endif %}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-在模板中校验用户权限" tabindex="-1"><a class="header-anchor" href="#_2-在模板中校验用户权限"><span>2. 在模板中校验用户权限</span></a></h3><ul><li><p>perms变量可以完成两类权限校验</p><ul><li>是否有某个应用的权限，只要当前用户拥有某个应用中的任何一个权限，即为True。<code>{{perms.post}}</code>可以返回当前用户被授予的post应用的权限</li><li>是否有某一项权限，这里指的是当前用户是否有某个确定的权限。例如，<code>{{perms.post.add_topic}}</code>返回True则代表当前用户拥有post应用中的add_topic权限</li></ul></li><li><p>PermWrapper实现了<code>__contains__</code>方法,可以在模板中使用<code>{% if in %}</code></p><ul><li><code>{% if &#39;post&#39; in perms %}</code>：</li><li><code>{% if &#39;post.change_topic&#39; in perms %}</code></li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">{% if perms.post %}</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span> {{ user.username }} has post permission<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    {% if perms.post.add_topic %}</span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span> can add topic <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    {% endif %}</span>
<span class="line"></span>
<span class="line">    {% if perms.post.change_topic %}</span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span> can delete topic <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    {% endif %}</span>
<span class="line">{% else %}</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span> user do not have post permission<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">{% endif %}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_9-3-3-身份验证视图" tabindex="-1"><a class="header-anchor" href="#_9-3-3-身份验证视图"><span>9.3.3 身份验证视图</span></a></h2><p>Web站点提供类似：用户注册，用户登录，修改密码，注销登录等功能，都被称为<strong>身份认证视图</strong></p><ul><li>Django内置了身份认证视图，这些视图只需要提供模板即可</li></ul><h3 id="_1-自定义用户登录视图" tabindex="-1"><a class="header-anchor" href="#_1-自定义用户登录视图"><span>1. 自定义用户登录视图</span></a></h3><ul><li><p>使用用户封路需要使用login方法</p><ul><li>接受一个HttpRequest参数和一个User参数</li></ul></li><li><p>用户登录的功能实现主要是两个步骤。</p><ul><li>（1）根据用户传递的凭证（通常是用户名和密码）使用authenticate方法获取用户对象。</li><li>（2）获取到用户对象，使用login方法完成登录，再跳转到自定义的成功页面；没有获取到用户对象，给出错误提示信息。</li></ul></li><li><p>认证系统内置的用户登录视图同样也是实现了这两个步骤，而且可以指定一些额外的参数控制用户的登录行为。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth <span class="token keyword">import</span> authenticate<span class="token punctuation">,</span> login</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">login_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    username <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    password <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">[</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token comment"># 使用authenticate方法验证用户身份</span></span>
<span class="line">    user <span class="token operator">=</span> authenticate<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> user<span class="token punctuation">:</span></span>
<span class="line">        login<span class="token punctuation">(</span>request<span class="token punctuation">,</span> user<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-内置的用户登录视图" tabindex="-1"><a class="header-anchor" href="#_2-内置的用户登录视图"><span>2. 内置的用户登录视图</span></a></h3><ul><li>Django在django/contrib/auth/urls.py文件中定义了身份认证视图的URL模式，所以，可以直接将它们include到当前的项目中</li><li>例如：可以在BBS项目的my_bbs/urls.py文件中添加<code>path(&#39;&#39;,include(&#39;django.contrib.auth.urls&#39;))</code><ul><li>这样就可以使用Django内置的用户身份验证框架</li><li>由于内建框架并没有提供模板的实现，所以，需要按照视图定义的位置放置模板文件</li></ul></li></ul>`,22)]))}const o=n(l,[["render",t],["__file","03：用户认证系统的应用.html.vue"]]),u=JSON.parse('{"path":"/fpython/htmlsystem/Django/chapter-09%EF%BC%9A%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9F/03%EF%BC%9A%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BA%94%E7%94%A8.html","title":"9.3 用户认证系统应用","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"9.3.1 自定义认证后端","slug":"_9-3-1-自定义认证后端","link":"#_9-3-1-自定义认证后端","children":[{"level":3,"title":"例子：让用户使用“统一密码”通过验证","slug":"例子-让用户使用-统一密码-通过验证","link":"#例子-让用户使用-统一密码-通过验证","children":[]}]},{"level":2,"title":"9.3.2 在模板中校验用户身份和权限","slug":"_9-3-2-在模板中校验用户身份和权限","link":"#_9-3-2-在模板中校验用户身份和权限","children":[{"level":3,"title":"1. 在模板中校验用户身份","slug":"_1-在模板中校验用户身份","link":"#_1-在模板中校验用户身份","children":[]},{"level":3,"title":"2. 在模板中校验用户权限","slug":"_2-在模板中校验用户权限","link":"#_2-在模板中校验用户权限","children":[]}]},{"level":2,"title":"9.3.3 身份验证视图","slug":"_9-3-3-身份验证视图","link":"#_9-3-3-身份验证视图","children":[{"level":3,"title":"1. 自定义用户登录视图","slug":"_1-自定义用户登录视图","link":"#_1-自定义用户登录视图","children":[]},{"level":3,"title":"2. 内置的用户登录视图","slug":"_2-内置的用户登录视图","link":"#_2-内置的用户登录视图","children":[]}]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/htmlsystem/Django/chapter-09：用户认证系统/03：用户认证系统的应用.md"}');export{o as comp,u as data};
