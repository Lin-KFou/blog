import{_ as s,c as a,f as e,o as t}from"./app-BCC5ysrj.js";const p={};function l(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="_5-2-管理后台实现原理" tabindex="-1"><a class="header-anchor" href="#_5-2-管理后台实现原理"><span>5.2 管理后台实现原理</span></a></h1><ul><li><a href="#52-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">5.2 管理后台实现原理</a><ul><li><a href="#521-python%E8%A3%85%E9%A5%B0%E5%99%A8">5.2.1 Python装饰器</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E8%A3%85%E9%A5%B0%E5%99%A8">简单装饰器</a></li><li><a href="#%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8">带参数的装饰器</a></li></ul></li><li><a href="#522-contenttypes%E5%BA%94%E7%94%A8%E5%88%86%E6%9E%90">5.2.2 contenttypes应用分析</a><ul><li><a href="#model_class">model_class</a></li><li><a href="#get_object_for_this_type">get_object_for_this_type</a></li><li><a href="#get_all_object_for_this_type">get_all_object_for_this_type</a></li></ul></li></ul></li></ul><hr><ul><li>使用管理后台需要：先注册 <ul><li><code>admin.site.register()</code> 方法</li><li><code>@admin.register()</code> 装饰器方法</li></ul></li><li>使用ModelAdmin自定义管理后台的样式和功能</li></ul><h2 id="_5-2-1-python装饰器" tabindex="-1"><a class="header-anchor" href="#_5-2-1-python装饰器"><span>5.2.1 Python装饰器</span></a></h2><ul><li>考虑问题：如何打印函数的执行时间？</li></ul><h3 id="简单装饰器" tabindex="-1"><a class="header-anchor" href="#简单装饰器"><span>简单装饰器</span></a></h3><ul><li>定义一个打印函数执行时间的装饰器 <img src="https://oss.moniter.top/blog/202210/20220926174949.png" alt="exec_time"></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> time</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">exec_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        res <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%ss elapsed for %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> res</span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token comment"># exec_time：接受一个函数作为参数，且参数被wrapper包裹起来</span></span>
<span class="line"><span class="token comment"># wrapper执行函数并打印时间，最后将wrapper返回</span></span>
<span class="line"><span class="token comment"># wrapper函数的参数定义是(*args, **kwargs), 所以可以接受任意参数的调用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>装饰器：本质上是一个函数或类，他的返回值也是一个函数或类</p></li><li><p>上面的方式，总体来说不够方便；下面，使用Python提供的语法 <code>糖@</code>，把装饰器放入到函数的定义处，并执行函数 <img src="https://oss.moniter.top/blog/202210/20220926175339.png" alt="语法糖"></p></li><li><p><code>@语法糖</code>，在使用装饰器会方便许多</p></li><li><p>需要给函数添加额外的功能，可以不需要修改函数定义，也不需要修改函数的调用方式，这其实就是<code>面向切面编程的效果</code></p></li></ul><h3 id="带参数的装饰器" tabindex="-1"><a class="header-anchor" href="#带参数的装饰器"><span>带参数的装饰器</span></a></h3><ul><li>需要给装饰器传递参数，实际上需要写一个返回装饰器的函数</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> time</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">exec_time_with_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            res <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;(%s): %ss elapsed for %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> res</span>
<span class="line">        <span class="token keyword">return</span> wrapper</span>
<span class="line">    <span class="token keyword">return</span> decorator</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://oss.moniter.top/blog/202210/20220926195559.png" alt="exec_time_with_name"></p><ul><li><p>上面的例子，exec_time_with_name装饰器就是对之前简单装饰器的函数封装，使用时，需要传递一个参数name</p></li><li><p>装饰器的其他问题：</p><ul><li>如在打印函数的属性时，打印它的__name__属性，会显示为 wrapper</li></ul></li><li><p>要解决上面的问题，需要使用Python内置的<code>functools.wraps</code>装饰器，作用：将原函数对象的属性复制到包装函数对象</p></li><li><p>如重新定义exec_time_with_name装饰器</p></li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> time</span>
<span class="line"><span class="token keyword">import</span> functools</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">exec_time_with_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            start <span class="token operator">=</span> time<span class="token punctuation">.</span>time</span>
<span class="line">            res <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;(%s): %ss elapsed for %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> res</span>
<span class="line">        <span class="token keyword">return</span> wrapper</span>
<span class="line">    <span class="token keyword">return</span> decorator</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在此定义其他函数的属性，并打印__name__属性，会发现正常</li><li>重新定义exec_time装饰器也可采用类似的方式</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> time</span>
<span class="line"><span class="token keyword">import</span> functools</span>
<span class="line"><span class="token keyword">def</span> <span class="token function">exec_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        res <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%ss elapsed for %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> res</span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用装饰器的场景：</p><ul><li>打印日志，事务处理，权限校验等</li><li>通过装饰器，可以将原本在函数中但又与函数功能本身无关的代码抽离出来，解耦的同事也提高代码的重用性</li><li>Django中的很多模块都使用了装饰器，如：注册Model的<code>@admin.register</code></li></ul></blockquote><h2 id="_5-2-2-contenttypes应用分析" tabindex="-1"><a class="header-anchor" href="#_5-2-2-contenttypes应用分析"><span>5.2.2 contenttypes应用分析</span></a></h2><ul><li>contenttypes是Django的内置应用，会记录项目中所有App和model的对应关系，并记录于ContentType中</li><li>ContentType的定义（django/contrib/contenttypes/models.py）</li><li>创建Django项目的时候，INSTALLED_APPS就包含了contenttypes应用，经过数据库迁移后，生成了django_content_type表，并记录了Django内置应用的Model信息，加入新的Model，会自动地创建ContentType实例</li><li>强大的功能：通过记录的信息动态地访问Model对象</li></ul><h3 id="model-class" tabindex="-1"><a class="header-anchor" href="#model-class"><span>model_class</span></a></h3><ul><li><strong>核心方法</strong>，获取当前ContentType实例所对应的Model对象</li><li>model_name是对大小写不敏感的（在获取Model对象的时候传递的是<code>model_name.lower()</code>）</li></ul><h3 id="get-object-for-this-type" tabindex="-1"><a class="header-anchor" href="#get-object-for-this-type"><span>get_object_for_this_type</span></a></h3><ul><li>通过传递关键字参数可以获取到Model实例对象</li><li>先通过model_class方法获取到Model对象，在使用查询管理器get到匹配关键字参数的实例对象</li></ul><h3 id="get-all-object-for-this-type" tabindex="-1"><a class="header-anchor" href="#get-all-object-for-this-type"><span>get_all_object_for_this_type</span></a></h3><ul><li><p>根据提供的关键字参数返回QuerySet，实现原理与get_object_for_this_type类似</p></li><li><p>ContentType自己提供了查询管理器 ContentTypeManager</p></li><li><p>ContentTypeManager 继承自 models.Manager，所以如get filter等方法都直接继承自父类</p></li><li><p>ContentTypeManager的两个重要方法</p><ul><li>get_for_id方法 <ul><li>通过id获取ContentType实例对象，先从缓存中获取，获取不到才会从数据表中检索</li><li>通过id查询，尽量使用此方法</li></ul></li><li>get_for_model方法 <ul><li>通过传递的Model或Model实例获取对应的ContentType实例对象</li></ul></li></ul></li></ul>`,27)]))}const c=s(p,[["render",l],["__file","5.2 Django管理后台实现原理.html.vue"]]),r=JSON.parse('{"path":"/fpython/htmlsystem/Django/chapter-05%EF%BC%9ADjango%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0/5.2%20Django%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html","title":"5.2 管理后台实现原理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"5.2.1 Python装饰器","slug":"_5-2-1-python装饰器","link":"#_5-2-1-python装饰器","children":[{"level":3,"title":"简单装饰器","slug":"简单装饰器","link":"#简单装饰器","children":[]},{"level":3,"title":"带参数的装饰器","slug":"带参数的装饰器","link":"#带参数的装饰器","children":[]}]},{"level":2,"title":"5.2.2 contenttypes应用分析","slug":"_5-2-2-contenttypes应用分析","link":"#_5-2-2-contenttypes应用分析","children":[{"level":3,"title":"model_class","slug":"model-class","link":"#model-class","children":[]},{"level":3,"title":"get_object_for_this_type","slug":"get-object-for-this-type","link":"#get-object-for-this-type","children":[]},{"level":3,"title":"get_all_object_for_this_type","slug":"get-all-object-for-this-type","link":"#get-all-object-for-this-type","children":[]}]}],"git":{"updatedTime":1735029308000,"contributors":[{"name":"Linkefou","username":"Linkefou","email":"wlh724567296@163.com","commits":1},{"name":"wanglinhao","username":"wanglinhao","email":"wanglinhao@wegooooo.com","commits":3}]},"filePathRelative":"fpython/htmlsystem/Django/chapter-05：Django管理后台/5.2 Django管理后台实现原理.md"}');export{c as comp,r as data};
